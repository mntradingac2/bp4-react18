{"version":3,"file":"keyComboTag.js","sourceRoot":"","sources":["../../../../src/components/hotkeys/keyComboTag.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, Props } from \"../../common\";\nimport { Icon, IconName } from \"../icon/icon\";\nimport { normalizeKeyCombo } from \"./hotkeyParser\";\n\nconst KeyIcons: { [key: string]: { icon: IconName; iconTitle: string } } = {\n    alt: { icon: \"key-option\", iconTitle: \"Alt/Option key\" },\n    cmd: { icon: \"key-command\", iconTitle: \"Command key\" },\n    ctrl: { icon: \"key-control\", iconTitle: \"Control key\" },\n    delete: { icon: \"key-delete\", iconTitle: \"Delete key\" },\n    down: { icon: \"arrow-down\", iconTitle: \"Down key\" },\n    enter: { icon: \"key-enter\", iconTitle: \"Enter key\" },\n    left: { icon: \"arrow-left\", iconTitle: \"Left key\" },\n    meta: { icon: \"key-command\", iconTitle: \"Command key\" },\n    right: { icon: \"arrow-right\", iconTitle: \"Right key\" },\n    shift: { icon: \"key-shift\", iconTitle: \"Shift key\" },\n    up: { icon: \"arrow-up\", iconTitle: \"Up key\" },\n};\n\n// eslint-disable-next-line deprecation/deprecation\nexport type KeyComboTagProps = IKeyComboProps;\n/** @deprecated use KeyComboTagProps */\nexport interface IKeyComboProps extends Props {\n    /** The key combo to display, such as `\"cmd + s\"`. */\n    combo: string;\n\n    /**\n     * Whether to render in a minimal style.\n     * If `false`, each key in the combo will be rendered inside a `<kbd>` tag.\n     * If `true`, only the icon or short name of a key will be rendered with no wrapper styles.\n     *\n     * @default false\n     */\n    minimal?: boolean;\n}\n\nexport class KeyComboTag extends AbstractPureComponent2<KeyComboTagProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.KeyComboTag`;\n\n    public render() {\n        const { className, combo, minimal } = this.props;\n        const keys = normalizeKeyCombo(combo)\n            .map(key => (key.length === 1 ? key.toUpperCase() : key))\n            .map(minimal ? this.renderMinimalKey : this.renderKey);\n        return <span className={classNames(Classes.KEY_COMBO, className)}>{keys}</span>;\n    }\n\n    private renderKey = (key: string, index: number) => {\n        const icon = KeyIcons[key];\n        const reactKey = `key-${index}`;\n        return (\n            <kbd className={classNames(Classes.KEY, { [Classes.MODIFIER_KEY]: icon != null })} key={reactKey}>\n                {icon != null && <Icon icon={icon.icon} title={icon.iconTitle} />}\n                {key}\n            </kbd>\n        );\n    };\n\n    private renderMinimalKey = (key: string, index: number) => {\n        const icon = KeyIcons[key];\n        return icon == null ? key : <Icon icon={icon.icon} title={icon.iconTitle} key={`key-${index}`} />;\n    };\n}\n\n/** @deprecated use the new, more specific component name `KeyComboTag` instead (forwards-compatible with v5) */\nexport const KeyCombo = KeyComboTag;\n// eslint-disable-next-line deprecation/deprecation\nKeyCombo.displayName = `${DISPLAYNAME_PREFIX}.KeyCombo`;\n"]}