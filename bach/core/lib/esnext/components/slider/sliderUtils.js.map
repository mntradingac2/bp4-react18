{"version":3,"file":"sliderUtils.js","sourceRoot":"","sources":["../../../../src/components/slider/sliderUtils.ts"],"names":[],"mappings":";;;AAiBA,SAAgB,gBAAgB,CAAC,KAAa;IAC1C,OAAO,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;AAC1C,CAAC;AAFD,4CAEC;AAKD,SAAgB,UAAU,CAAI,MAAW,EAAE,UAAkB,EAAE,QAAgB,EAAE,SAAY;IACzF,MAAM,GAAG,GAAG,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,KAAK,IAAI,KAAK,GAAG,UAAU,EAAE,KAAK,KAAK,QAAQ,GAAG,GAAG,EAAE,KAAK,IAAI,GAAG,EAAE;QACjE,MAAM,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;KAC7B;AACL,CAAC;AALD,gCAKC;AAMD,SAAgB,MAAM,CAAI,MAAW,EAAE,KAAwB;IAC3D,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,SAAS,CAAC;KACpB;IAED,IAAI,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACzB,IAAI,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;IAE7B,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QAChD,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5B,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,GAAG,GAAG,MAAM,EAAE;YACd,QAAQ,GAAG,KAAK,CAAC;YACjB,MAAM,GAAG,GAAG,CAAC;SAChB;KACJ;IAED,OAAO,QAAQ,CAAC;AACpB,CAAC;AAlBD,wBAkBC","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Helper function for formatting ratios as CSS percentage values. */\nexport function formatPercentage(ratio: number) {\n    return `${(ratio * 100).toFixed(2)}%`;\n}\n\n/**\n * Mutates the values array by filling all the values between start and end index (inclusive) with the fill value.\n */\nexport function fillValues<T>(values: T[], startIndex: number, endIndex: number, fillValue: T) {\n    const inc = startIndex < endIndex ? 1 : -1;\n    for (let index = startIndex; index !== endIndex + inc; index += inc) {\n        values[index] = fillValue;\n    }\n}\n\n/**\n * Returns the minimum element of an array as determined by comparing the results of calling the arg function on each\n * element of the array. The function will only be called once per element.\n */\nexport function argMin<T>(values: T[], argFn: (value: T) => any): T | undefined {\n    if (values.length === 0) {\n        return undefined;\n    }\n\n    let minValue = values[0];\n    let minArg = argFn(minValue);\n\n    for (let index = 1; index < values.length; index++) {\n        const value = values[index];\n        const arg = argFn(value);\n        if (arg < minArg) {\n            minValue = value;\n            minArg = arg;\n        }\n    }\n\n    return minValue;\n}\n"]}