{"version":3,"file":"icon.js","sourceRoot":"","sources":["../../../../src/components/icon/icon.tsx"],"names":[],"mappings":";;;;AAgBA,oEAAoC;AACpC,qDAA+B;AAE/B,8CAAwG;AAExG,yCAAqH;AACrH,8CAA8C;AAI9C,IAAY,QAGX;AAHD,WAAY,QAAQ;IAChB,gDAAa,CAAA;IACb,0CAAU,CAAA;AACd,CAAC,EAHW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAGnB;AAqFD,MAAa,IAAK,SAAQ,+BAAoF;IACnG,MAAM,CAAC,WAAW,GAAG,GAAG,2BAAkB,OAAO,CAAC;IAElD,MAAM;QACT,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;YAC3C,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YACjC,OAAO,IAAI,CAAC;SACf;QAED,MAAM,EACF,SAAS,EACT,KAAK,EACL,SAAS,EAET,QAAQ,EACR,MAAM,EACN,IAAI,GAAG,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EACpC,QAAQ,EACR,KAAK,EACL,OAAO,GAAG,MAAM,EAChB,GAAG,SAAS,EACf,GAAG,IAAI,CAAC,KAAK,CAAC;QAGf,MAAM,aAAa,GAAG,IAAI,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAElF,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAEvD,MAAM,OAAO,GAAG,IAAA,oBAAU,EAAC,gBAAO,CAAC,IAAI,EAAE,gBAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,gBAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;QAC1G,MAAM,OAAO,GAAG,OAAO,aAAa,IAAI,aAAa,EAAE,CAAC;QAExD,MAAM,OAAO,GAAG,IAAA,gBAAQ,EAAC,WAAW,CAAC,CAAC;QAEtC,OAAO,KAAK,CAAC,aAAa,CACtB,OAAO,EACP;YACI,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI;YACvC,GAAG,SAAS;YACZ,SAAS,EAAE,OAAO;YAClB,KAAK,EAAE,SAAS;SACnB,EACD,6BACI,IAAI,EAAE,KAAK,eACA,IAAI,EACf,KAAK,EAAE,IAAI,EACX,MAAM,EAAE,IAAI,EACZ,OAAO,EAAE,OAAO,qBACC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAC5C,IAAI,EAAC,KAAK,KACN,QAAQ;YAEX,KAAK,IAAI,+BAAO,EAAE,EAAE,OAAO,IAAG,KAAK,CAAS;YAC5C,KAAK,CACJ,CACT,CAAC;IACN,CAAC;IAGO,cAAc,CAAC,SAAiB,EAAE,QAAkB;QACxD,MAAM,cAAc,GAAG,SAAS,KAAK,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,sBAAc,CAAC,CAAC,CAAC,sBAAc,CAAC;QACzF,MAAM,KAAK,GAAG,cAAc,CAAC,IAAA,gCAAwB,EAAC,QAAQ,CAAC,CAAC,CAAC;QACjE,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,8BAAM,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAC,SAAS,GAAG,CAAC,CAAC;IAChF,CAAC;;AAnEL,oBAoEC","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { IconName, iconNameToPathsRecordKey, IconSvgPaths16, IconSvgPaths20 } from \"@blueprintjs/icons\";\n\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, IntentProps, MaybeElement, Props } from \"../../common\";\nimport { uniqueId } from \"../../common/utils\";\n\nexport type { IconName };\n\nexport enum IconSize {\n    STANDARD = 16,\n    LARGE = 20,\n}\n\n// eslint-disable-next-line deprecation/deprecation\nexport type IconProps = IIconProps;\n/** @deprecated use IconProps */\nexport interface IIconProps extends IntentProps, Props {\n    /** This component does not support custom children. Use the `icon` prop. */\n    children?: never;\n\n    /**\n     * Color of icon. This is used as the `fill` attribute on the `<svg>` image\n     * so it will override any CSS `color` property, including that set by\n     * `intent`. If this prop is omitted, icon color is inherited from\n     * surrounding text.\n     */\n    color?: string;\n\n    /**\n     * String for the `title` attribute on the rendered element, which will appear\n     * on hover as a native browser tooltip.\n     */\n    htmlTitle?: string;\n\n    /**\n     * Name of a Blueprint UI icon, or an icon element, to render. This prop is\n     * required because it determines the content of the component, but it can\n     * be explicitly set to falsy values to render nothing.\n     *\n     * - If `null` or `undefined` or `false`, this component will render nothing.\n     * - If given an `IconName` (a string literal union of all icon names), that\n     *   icon will be rendered as an `<svg>` with `<path>` tags. Unknown strings\n     *   will render a blank icon to occupy space.\n     * - If given a `JSX.Element`, that element will be rendered and _all other\n     *   props on this component are ignored._ This type is supported to\n     *   simplify icon support in other Blueprint components. As a consumer, you\n     *   should avoid using `<Icon icon={<Element />}` directly; simply render\n     *   `<Element />` instead.\n     */\n    icon: IconName | MaybeElement;\n\n    /**\n     * @deprecated use size prop instead\n     */\n    iconSize?: number;\n\n    /**\n     * Size of the icon, in pixels. Blueprint contains 16px and 20px SVG icon\n     * images, and chooses the appropriate resolution based on this prop.\n     *\n     * @default IconSize.STANDARD = 16\n     */\n    size?: number;\n\n    /** CSS style properties. */\n    style?: React.CSSProperties;\n\n    /** Props to apply to the `SVG` element */\n    svgProps?: React.HTMLAttributes<SVGElement>;\n\n    /**\n     * HTML tag to use for the rendered element.\n     *\n     * @default \"span\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * Description string. This string does not appear in normal browsers, but\n     * it increases accessibility. For instance, screen readers will use it for\n     * aural feedback.\n     *\n     * If this value is nullish, `false`, or an empty string, the component will assume\n     * that the icon is decorative and `aria-hidden=\"true\"` will be applied (can be overridden\n     * by manually passing `aria-hidden` prop).\n     *\n     * @see https://www.w3.org/WAI/tutorials/images/decorative/\n     */\n    title?: string | false | null;\n}\n\n/**\n * Icon component.\n *\n * @see https://blueprintjs.com/docs/#core/components/icon\n */\nexport class Icon extends AbstractPureComponent2<IconProps & Omit<React.HTMLAttributes<HTMLElement>, \"title\">> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Icon`;\n\n    public render(): JSX.Element | null {\n        const { icon } = this.props;\n        if (icon == null || typeof icon === \"boolean\") {\n            return null;\n        } else if (typeof icon !== \"string\") {\n            return icon;\n        }\n\n        const {\n            className,\n            color,\n            htmlTitle,\n            // eslint-disable-next-line deprecation/deprecation\n            iconSize,\n            intent,\n            size = iconSize ?? IconSize.STANDARD,\n            svgProps,\n            title,\n            tagName = \"span\",\n            ...htmlprops\n        } = this.props;\n\n        // choose which pixel grid is most appropriate for given icon size\n        const pixelGridSize = size >= IconSize.LARGE ? IconSize.LARGE : IconSize.STANDARD;\n        // render path elements, or nothing if icon name is unknown.\n        const paths = this.renderSvgPaths(pixelGridSize, icon);\n\n        const classes = classNames(Classes.ICON, Classes.iconClass(icon), Classes.intentClass(intent), className);\n        const viewBox = `0 0 ${pixelGridSize} ${pixelGridSize}`;\n\n        const titleId = uniqueId(\"iconTitle\");\n\n        return React.createElement(\n            tagName,\n            {\n                \"aria-hidden\": title ? undefined : true,\n                ...htmlprops,\n                className: classes,\n                title: htmlTitle,\n            },\n            <svg\n                fill={color}\n                data-icon={icon}\n                width={size}\n                height={size}\n                viewBox={viewBox}\n                aria-labelledby={title ? titleId : undefined}\n                role=\"img\"\n                {...svgProps}\n            >\n                {title && <title id={titleId}>{title}</title>}\n                {paths}\n            </svg>,\n        );\n    }\n\n    /** Render `<path>` elements for the given icon name. Returns `null` if name is unknown. */\n    private renderSvgPaths(pathsSize: number, iconName: IconName): JSX.Element[] | null {\n        const svgPathsRecord = pathsSize === IconSize.STANDARD ? IconSvgPaths16 : IconSvgPaths20;\n        const paths = svgPathsRecord[iconNameToPathsRecordKey(iconName)];\n        if (paths == null) {\n            return null;\n        }\n        return paths.map((path, i) => <path key={i} d={path} fillRule=\"evenodd\" />);\n    }\n}\n"]}