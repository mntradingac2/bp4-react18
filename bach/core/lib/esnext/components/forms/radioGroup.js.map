{"version":3,"file":"radioGroup.js","sourceRoot":"","sources":["../../../../src/components/forms/radioGroup.tsx"],"names":[],"mappings":";;;;AAgBA,qDAA+B;AAE/B,yCAA+D;AAC/D,oEAA8C;AAC9C,8CAA4E;AAC5E,8CAAqD;AACrD,yCAA+C;AAiD/C,IAAI,OAAO,GAAG,CAAC,CAAC;AAChB,SAAS,QAAQ;IACb,OAAO,GAAG,UAAU,CAAC,WAAW,IAAI,OAAO,EAAE,EAAE,CAAC;AACpD,CAAC;AAOD,MAAa,UAAW,SAAQ,+BAAuC;IAC5D,MAAM,CAAC,WAAW,GAAG,GAAG,0BAAkB,aAAa,CAAC;IAGvD,aAAa,GAAG,QAAQ,EAAE,CAAC;IAE5B,MAAM;QACT,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC7B,OAAO,CACH,6BAAK,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;YAC/B,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,+BAAO,SAAS,EAAE,gBAAO,CAAC,KAAK,IAAG,KAAK,CAAS;YACvE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAC/E,CACT,CAAC;IACN,CAAC;IAES,aAAa;QACnB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,EAAE;YAC3D,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,sCAAsC,CAAC,CAAC;SAC/D;IACL,CAAC;IAEO,cAAc;QAClB,OAAO,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;YACnD,IAAI,IAAA,uBAAe,EAAC,KAAK,EAAE,gBAAK,CAAC,EAAE;gBAC/B,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAoB,CAAC,CAAC,CAAC;aACpF;iBAAM;gBACH,OAAO,KAAK,CAAC;aAChB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,aAAa;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CACrC,oBAAC,gBAAK,OAAK,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,KAAK,EAAE,YAAY,EAAE,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,GAAI,CAC3G,CAAC,CAAC;IACP,CAAC;IAEO,aAAa,CAAC,WAAwB;QAC1C,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC;QACnD,OAAO;YACH,OAAO,EAAE,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa;YAC3C,SAAS;YACT,QAAQ,EAAE,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ;YACzC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;YACzB,IAAI,EAAE,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI;YAC9C,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;YAC7B,KAAK;SACR,CAAC;IACN,CAAC;;AAlDL,gCAmDC","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, OptionProps, Props } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Radio, RadioProps } from \"./controls\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type RadioGroupProps = IRadioGroupProps;\n/** @deprecated use RadioGroupProps */\nexport interface IRadioGroupProps extends Props {\n    /**\n     * Radio elements. This prop is mutually exclusive with `options`.\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Whether the group and _all_ its radios are disabled.\n     * Individual radios can be disabled using their `disabled` prop.\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the radio buttons are to be displayed inline horizontally.\n     */\n    inline?: boolean;\n\n    /** Optional label text to display above the radio buttons. */\n    label?: React.ReactNode;\n\n    /**\n     * Name of the group, used to link radio buttons together in HTML.\n     * If omitted, a unique name will be generated internally.\n     */\n    name?: string;\n\n    /**\n     * Callback invoked when the currently selected radio changes.\n     * Use `event.currentTarget.value` to read the currently selected value.\n     * This prop is required because this component only supports controlled usage.\n     */\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n\n    /**\n     * Array of options to render in the group. This prop is mutually exclusive\n     * with `children`: either provide an array of `OptionProps` objects or\n     * provide `<Radio>` children elements.\n     */\n    options?: readonly OptionProps[];\n\n    /** Value of the selected radio. The child with this value will be `:checked`. */\n    selectedValue?: string | number;\n}\n\nlet counter = 0;\nfunction nextName() {\n    return `${RadioGroup.displayName}-${counter++}`;\n}\n\n/**\n * Radio group component.\n *\n * @see https://blueprintjs.com/docs/#core/components/radio.radiogroup\n */\nexport class RadioGroup extends AbstractPureComponent2<RadioGroupProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.RadioGroup`;\n\n    // a unique name for this group, which can be overridden by `name` prop.\n    private autoGroupName = nextName();\n\n    public render() {\n        const { label } = this.props;\n        return (\n            <div className={this.props.className}>\n                {label == null ? null : <label className={Classes.LABEL}>{label}</label>}\n                {Array.isArray(this.props.options) ? this.renderOptions() : this.renderChildren()}\n            </div>\n        );\n    }\n\n    protected validateProps() {\n        if (this.props.children != null && this.props.options != null) {\n            console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n        }\n    }\n\n    private renderChildren() {\n        return React.Children.map(this.props.children, child => {\n            if (isElementOfType(child, Radio)) {\n                return React.cloneElement(child, this.getRadioProps(child.props as OptionProps));\n            } else {\n                return child;\n            }\n        });\n    }\n\n    private renderOptions() {\n        return this.props.options?.map(option => (\n            <Radio {...this.getRadioProps(option)} key={option.value} labelElement={option.label || option.value} />\n        ));\n    }\n\n    private getRadioProps(optionProps: OptionProps): RadioProps {\n        const { name } = this.props;\n        const { className, disabled, value } = optionProps;\n        return {\n            checked: value === this.props.selectedValue,\n            className,\n            disabled: disabled || this.props.disabled,\n            inline: this.props.inline,\n            name: name == null ? this.autoGroupName : name,\n            onChange: this.props.onChange,\n            value,\n        };\n    }\n}\n"]}