{"version":3,"file":"tag.js","sourceRoot":"","sources":["../../../../src/components/tag/tag.tsx"],"names":[],"mappings":";;;;AAgBA,oEAAoC;AACpC,qDAA+B;AAE/B,yCASsB;AACtB,8CAAsD;AACtD,uCAAwD;AACxD,uCAAoC;AAiGpC,MAAa,GAAI,SAAQ,+BAAgC;IAC9C,MAAM,CAAC,WAAW,GAAG,GAAG,2BAAkB,MAAM,CAAC;IAEjD,MAAM;QACT,MAAM,EACF,MAAM,EACN,QAAQ,EACR,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,MAAM,EACN,WAAW,EACX,KAAK,EACL,OAAO,EACP,SAAS,EACT,QAAQ,EACR,SAAS,EACT,KAAK,EACL,QAAQ,GAAG,CAAC,EACZ,SAAS,EACT,UAAU,EACV,GAAG,SAAS,EACf,GAAG,IAAI,CAAC,KAAK,CAAC;QACf,MAAM,WAAW,GAAG,cAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC/C,MAAM,UAAU,GAAG,IAAA,oBAAU,EACzB,gBAAO,CAAC,GAAG,EACX,gBAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAC3B;YACI,CAAC,gBAAO,CAAC,MAAM,CAAC,EAAE,MAAM;YACxB,CAAC,gBAAO,CAAC,IAAI,CAAC,EAAE,IAAI;YACpB,CAAC,gBAAO,CAAC,WAAW,CAAC,EAAE,WAAW;YAClC,CAAC,gBAAO,CAAC,KAAK,CAAC,EAAE,KAAK;YACtB,CAAC,gBAAO,CAAC,OAAO,CAAC,EAAE,OAAO;YAC1B,CAAC,gBAAO,CAAC,KAAK,CAAC,EAAE,KAAK;SACzB,EACD,SAAS,CACZ,CAAC;QACF,MAAM,OAAO,GAAG,KAAK,IAAI,UAAU,CAAC,OAAO,CAAC,gBAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAChE,MAAM,YAAY,GAAG,WAAW,CAAC,CAAC,CAAC,CAC/B,8CACe,YAAY,EACvB,IAAI,EAAC,QAAQ,EACb,SAAS,EAAE,gBAAO,CAAC,UAAU,EAC7B,OAAO,EAAE,IAAI,CAAC,aAAa,EAC3B,QAAQ,EAAE,QAAQ;YAElB,oBAAC,WAAI,IAAC,IAAI,EAAC,aAAa,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,eAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,eAAQ,CAAC,QAAQ,GAAI,CAC1E,CACZ,CAAC,CAAC,CAAC,IAAI,CAAC;QAET,OAAO,CACH,iCAAU,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,EAAE,UAAU;YACrG,oBAAC,WAAI,IAAC,IAAI,EAAE,IAAI,GAAI;YACnB,CAAC,IAAA,wBAAgB,EAAC,QAAQ,CAAC,IAAI,CAC5B,oBAAC,WAAI,IAAC,SAAS,EAAE,gBAAO,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC,SAAS,EAAE,OAAO,EAAC,MAAM,EAAC,KAAK,EAAE,SAAS,IAChF,QAAQ,CACN,CACV;YACD,oBAAC,WAAI,IAAC,IAAI,EAAE,SAAS,GAAI;YACxB,YAAY,CACV,CACV,CAAC;IACN,CAAC;IAEO,aAAa,GAAG,CAAC,CAAsC,EAAE,EAAE;QAC/D,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC,CAAC;;AAlEN,kBAmEC","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    Classes,\n    DISPLAYNAME_PREFIX,\n    IElementRefProps,\n    IntentProps,\n    MaybeElement,\n    Props,\n    Utils,\n} from \"../../common\";\nimport { isReactNodeEmpty } from \"../../common/utils\";\nimport { Icon, IconName, IconSize } from \"../icon/icon\";\nimport { Text } from \"../text/text\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type TagProps = ITagProps;\n/** @deprecated use TagProps */\nexport interface ITagProps\n    extends Props,\n        IntentProps,\n        // eslint-disable-next-line deprecation/deprecation\n        IElementRefProps<HTMLSpanElement>,\n        React.HTMLAttributes<HTMLSpanElement> {\n    /**\n     * Whether the tag should appear in an active state.\n     *\n     * @default false\n     */\n    active?: boolean;\n\n    children?: React.ReactNode;\n\n    /**\n     * Whether the tag should take up the full width of its container.\n     *\n     * @default false\n     */\n    fill?: boolean;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render before the children. */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * Whether the tag should visually respond to user interactions. If set\n     * to `true`, hovering over the tag will change its color and mouse cursor.\n     *\n     * Recommended when `onClick` is also defined.\n     *\n     * @default false\n     */\n    interactive?: boolean;\n\n    /**\n     * Whether this tag should use large styles.\n     *\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * Whether this tag should use minimal styles.\n     *\n     * @default false\n     */\n    minimal?: boolean;\n\n    /**\n     * Whether tag content should be allowed to occupy multiple lines.\n     * If false, a single line of text will be truncated with an ellipsis if\n     * it overflows. Note that icons will be vertically centered relative to\n     * multiline text.\n     *\n     * @default false\n     */\n    multiline?: boolean;\n\n    /**\n     * Callback invoked when the tag is clicked.\n     * Recommended when `interactive` is `true`.\n     */\n    onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n\n    /**\n     * Click handler for remove button.\n     * The remove button will only be rendered if this prop is defined.\n     */\n    onRemove?: (e: React.MouseEvent<HTMLButtonElement>, tagProps: TagProps) => void;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render after the children. */\n    rightIcon?: IconName | MaybeElement;\n\n    /**\n     * Whether this tag should have rounded ends.\n     *\n     * @default false\n     */\n    round?: boolean;\n\n    /**\n     * HTML title to be passed to the <Text> component\n     */\n    htmlTitle?: string;\n}\n\n/**\n * Tag component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tag\n */\nexport class Tag extends AbstractPureComponent2<TagProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Tag`;\n\n    public render() {\n        const {\n            active,\n            children,\n            className,\n            fill,\n            icon,\n            intent,\n            interactive,\n            large,\n            minimal,\n            multiline,\n            onRemove,\n            rightIcon,\n            round,\n            tabIndex = 0,\n            htmlTitle,\n            elementRef,\n            ...htmlProps\n        } = this.props;\n        const isRemovable = Utils.isFunction(onRemove);\n        const tagClasses = classNames(\n            Classes.TAG,\n            Classes.intentClass(intent),\n            {\n                [Classes.ACTIVE]: active,\n                [Classes.FILL]: fill,\n                [Classes.INTERACTIVE]: interactive,\n                [Classes.LARGE]: large,\n                [Classes.MINIMAL]: minimal,\n                [Classes.ROUND]: round,\n            },\n            className,\n        );\n        const isLarge = large || tagClasses.indexOf(Classes.LARGE) >= 0;\n        const removeButton = isRemovable ? (\n            <button\n                aria-label=\"Remove Tag\"\n                type=\"button\"\n                className={Classes.TAG_REMOVE}\n                onClick={this.onRemoveClick}\n                tabIndex={tabIndex}\n            >\n                <Icon icon=\"small-cross\" size={isLarge ? IconSize.LARGE : IconSize.STANDARD} />\n            </button>\n        ) : null;\n\n        return (\n            <span {...htmlProps} className={tagClasses} tabIndex={interactive ? tabIndex : undefined} ref={elementRef}>\n                <Icon icon={icon} />\n                {!isReactNodeEmpty(children) && (\n                    <Text className={Classes.FILL} ellipsize={!multiline} tagName=\"span\" title={htmlTitle}>\n                        {children}\n                    </Text>\n                )}\n                <Icon icon={rightIcon} />\n                {removeButton}\n            </span>\n        );\n    }\n\n    private onRemoveClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        this.props.onRemove?.(e, this.props);\n    };\n}\n"]}