{"version":3,"file":"toast.js","sourceRoot":"","sources":["../../../../src/components/toast/toast.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { ActionProps, DISPLAYNAME_PREFIX, IntentProps, LinkProps, MaybeElement, Props } from \"../../common/props\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { AnchorButton, Button } from \"../button/buttons\";\nimport { Icon, IconName } from \"../icon/icon\";\n\n/** @deprecated use ToastProps */\nexport type IToastProps = ToastProps;\n\nexport interface ToastProps extends Props, IntentProps {\n    /**\n     * Action rendered as a minimal `AnchorButton`. The toast is dismissed automatically when the\n     * user clicks the action button. Note that the `intent` prop is ignored (the action button\n     * cannot have its own intent color that might conflict with the toast's intent). Omit this\n     * prop to omit the action button.\n     */\n    action?: ActionProps & LinkProps;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render before the message. */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * Whether to show the close button in the toast.\n     *\n     * @default true\n     */\n    isCloseButtonShown?: boolean;\n\n    /** Message to display in the body of the toast. */\n    message: React.ReactNode;\n\n    /**\n     * Callback invoked when the toast is dismissed, either by the user or by the timeout.\n     * The value of the argument indicates whether the toast was closed because the timeout expired.\n     */\n    onDismiss?: (didTimeoutExpire: boolean) => void;\n\n    /**\n     * Milliseconds to wait before automatically dismissing toast.\n     * Providing a value less than or equal to 0 will disable the timeout (this is discouraged).\n     *\n     * @default 5000\n     */\n    timeout?: number;\n}\n\n/**\n * Toast component.\n *\n * @see https://blueprintjs.com/docs/#core/components/toast\n */\nexport class Toast extends AbstractPureComponent2<ToastProps> {\n    public static defaultProps: ToastProps = {\n        className: \"\",\n        isCloseButtonShown: true,\n        message: \"\",\n        timeout: 5000,\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.Toast`;\n\n    public render(): JSX.Element {\n        const { className, icon, intent, message, isCloseButtonShown } = this.props;\n        return (\n            <div\n                className={classNames(Classes.TOAST, Classes.intentClass(intent), className)}\n                onBlur={this.startTimeout}\n                onFocus={this.clearTimeouts}\n                onMouseEnter={this.clearTimeouts}\n                onMouseLeave={this.startTimeout}\n                tabIndex={0}\n            >\n                <Icon icon={icon} />\n                <span className={Classes.TOAST_MESSAGE} role=\"alert\">\n                    {message}\n                </span>\n                <ButtonGroup minimal={true}>\n                    {this.maybeRenderActionButton()}\n                    {isCloseButtonShown && <Button aria-label=\"Close\" icon=\"cross\" onClick={this.handleCloseClick} />}\n                </ButtonGroup>\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        this.startTimeout();\n    }\n\n    public componentDidUpdate(prevProps: ToastProps) {\n        if (prevProps.timeout !== this.props.timeout) {\n            if (this.props.timeout! > 0) {\n                this.startTimeout();\n            } else {\n                this.clearTimeouts();\n            }\n        }\n    }\n\n    public componentWillUnmount() {\n        this.clearTimeouts();\n    }\n\n    private maybeRenderActionButton() {\n        const { action } = this.props;\n        if (action == null) {\n            return undefined;\n        } else {\n            return <AnchorButton {...action} intent={undefined} onClick={this.handleActionClick} />;\n        }\n    }\n\n    private handleActionClick = (e: React.MouseEvent<HTMLElement>) => {\n        this.props.action?.onClick?.(e);\n        this.triggerDismiss(false);\n    };\n\n    private handleCloseClick = () => this.triggerDismiss(false);\n\n    private triggerDismiss(didTimeoutExpire: boolean) {\n        this.clearTimeouts();\n        this.props.onDismiss?.(didTimeoutExpire);\n    }\n\n    private startTimeout = () => {\n        this.clearTimeouts();\n        if (this.props.timeout! > 0) {\n            this.setTimeout(() => this.triggerDismiss(true), this.props.timeout);\n        }\n    };\n}\n"]}