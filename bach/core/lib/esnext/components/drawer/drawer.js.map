{"version":3,"file":"drawer.js","sourceRoot":"","sources":["../../../../src/components/drawer/drawer.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { getPositionIgnoreAngles, isPositionHorizontal, Position } from \"../../common/position\";\nimport { DISPLAYNAME_PREFIX, MaybeElement, Props } from \"../../common/props\";\nimport { Button } from \"../button/buttons\";\nimport { H4 } from \"../html/html\";\nimport { Icon, IconName, IconSize } from \"../icon/icon\";\nimport { IBackdropProps, Overlay, OverlayableProps } from \"../overlay/overlay\";\n\nexport enum DrawerSize {\n    SMALL = \"360px\",\n    STANDARD = \"50%\",\n    LARGE = \"90%\",\n}\n\n// eslint-disable-next-line deprecation/deprecation\nexport type DrawerProps = IDrawerProps;\n/** @deprecated use DrawerProps */\nexport interface IDrawerProps extends OverlayableProps, IBackdropProps, Props {\n    /** Drawer contents. */\n    children?: React.ReactNode;\n\n    /**\n     * Name of a Blueprint UI icon (or an icon element) to render in the\n     * drawer's header. Note that the header will only be rendered if `title` is\n     * provided.\n     */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * Whether to show the close button in the dialog's header.\n     * Note that the header will only be rendered if `title` is provided.\n     *\n     * @default true\n     */\n    isCloseButtonShown?: boolean;\n\n    /**\n     * Toggles the visibility of the overlay and its children.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * Position of a drawer. All angled positions will be casted into pure positions\n     * (TOP, BOTTOM, LEFT or RIGHT).\n     *\n     * @default Position.RIGHT\n     */\n    position?: Position;\n\n    /**\n     * CSS size of the drawer. This sets `width` if horizontal position (default)\n     * and `height` otherwise.\n     *\n     * Constants are available for common sizes:\n     * - `DrawerSize.SMALL = 360px`\n     * - `DrawerSize.STANDARD = 50%`\n     * - `DrawerSize.LARGE = 90%`\n     *\n     * @default DrawerSize.STANDARD = \"50%\"\n     */\n    size?: number | string;\n\n    /**\n     * CSS styles to apply to the dialog.\n     *\n     * @default {}\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * Title of the dialog. If provided, an element with `Classes.DIALOG_HEADER`\n     * will be rendered inside the dialog before any children elements.\n     */\n    title?: React.ReactNode;\n\n    /**\n     * Name of the transition for internal `CSSTransition`. Providing your own\n     * name here will require defining new CSS transition properties.\n     */\n    transitionName?: string;\n}\n\n/**\n * Drawer component.\n *\n * @see https://blueprintjs.com/docs/#core/components/drawer\n */\nexport class Drawer extends AbstractPureComponent2<DrawerProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Drawer`;\n\n    public static defaultProps: DrawerProps = {\n        canOutsideClickClose: true,\n        isOpen: false,\n        position: \"right\",\n        style: {},\n    };\n\n    public render() {\n        const { size, style, position } = this.props;\n        const realPosition = getPositionIgnoreAngles(position!);\n\n        const classes = classNames(\n            Classes.DRAWER,\n            {\n                [Classes.positionClass(realPosition) ?? \"\"]: true,\n            },\n            this.props.className,\n        );\n\n        const styleProp =\n            size == null\n                ? style\n                : {\n                      ...style,\n                      [isPositionHorizontal(realPosition) ? \"height\" : \"width\"]: size,\n                  };\n        return (\n            <Overlay {...this.props} className={Classes.OVERLAY_CONTAINER}>\n                <div className={classes} style={styleProp}>\n                    {this.maybeRenderHeader()}\n                    {this.props.children}\n                </div>\n            </Overlay>\n        );\n    }\n\n    protected validateProps(props: DrawerProps) {\n        if (props.title == null) {\n            if (props.icon != null) {\n                console.warn(Errors.DIALOG_WARN_NO_HEADER_ICON);\n            }\n            if (props.isCloseButtonShown != null) {\n                console.warn(Errors.DIALOG_WARN_NO_HEADER_CLOSE_BUTTON);\n            }\n        }\n        if (props.position != null) {\n            if (props.position !== getPositionIgnoreAngles(props.position)) {\n                console.warn(Errors.DRAWER_ANGLE_POSITIONS_ARE_CASTED);\n            }\n        }\n    }\n\n    private maybeRenderCloseButton() {\n        // `isCloseButtonShown` can't be defaulted through default props because of props validation\n        // so this check actually defaults it to true (fails only if directly set to false)\n        if (this.props.isCloseButtonShown !== false) {\n            return (\n                <Button\n                    aria-label=\"Close\"\n                    className={Classes.DIALOG_CLOSE_BUTTON}\n                    icon={<Icon icon=\"small-cross\" size={IconSize.LARGE} />}\n                    minimal={true}\n                    onClick={this.props.onClose}\n                />\n            );\n        } else {\n            return null;\n        }\n    }\n\n    private maybeRenderHeader() {\n        const { icon, title } = this.props;\n        if (title == null) {\n            return null;\n        }\n        return (\n            <div className={Classes.DRAWER_HEADER}>\n                <Icon icon={icon} size={IconSize.LARGE} />\n                <H4>{title}</H4>\n                {this.maybeRenderCloseButton()}\n            </div>\n        );\n    }\n}\n"]}