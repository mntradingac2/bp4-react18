{"version":3,"file":"useHotkeys.js","sourceRoot":"","sources":["../../../../src/hooks/hotkeys/useHotkeys.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { HOTKEYS_PROVIDER_NOT_FOUND } from \"../../common/errors\";\nimport { elementIsTextInput } from \"../../common/utils/domUtils\";\nimport { comboMatches, getKeyCombo, IKeyCombo, parseKeyCombo } from \"../../components/hotkeys/hotkeyParser\";\nimport { HotkeysContext } from \"../../context\";\nimport { HotkeyConfig } from \"./hotkeyConfig\";\n\nexport interface UseHotkeysOptions {\n    /**\n     * A custom document to reference when binding global event handlers.\n     * This can be useful when using iframes in an application.\n     *\n     * @default window.document\n     */\n    document?: Document;\n\n    /**\n     * The key combo which will trigger the hotkeys dialog to open.\n     *\n     * @default \"?\"\n     */\n    showDialogKeyCombo?: string;\n}\n\nexport interface UseHotkeysReturnValue {\n    handleKeyDown: React.KeyboardEventHandler<HTMLElement>;\n    handleKeyUp: React.KeyboardEventHandler<HTMLElement>;\n}\n\n/**\n * React hook to register global and local hotkeys for a component.\n *\n * @see https://blueprintjs.com/docs/#core/hooks/use-hotkeys\n * @param keys list of hotkeys to configure\n * @param options hook options\n */\nexport function useHotkeys(keys: readonly HotkeyConfig[], options: UseHotkeysOptions = {}): UseHotkeysReturnValue {\n    const { document = getDefaultDocument(), showDialogKeyCombo = \"?\" } = options;\n    const localKeys = React.useMemo(\n        () =>\n            keys\n                .filter(k => !k.global)\n                .map(k => ({\n                    combo: parseKeyCombo(k.combo),\n                    config: k,\n                })),\n        [keys],\n    );\n    const globalKeys = React.useMemo(\n        () =>\n            keys\n                .filter(k => k.global)\n                .map(k => ({\n                    combo: parseKeyCombo(k.combo),\n                    config: k,\n                })),\n        [keys],\n    );\n\n    // register keys with global context\n    const [state, dispatch] = React.useContext(HotkeysContext);\n\n    if (!state.hasProvider) {\n        React.useEffect(() => console.warn(HOTKEYS_PROVIDER_NOT_FOUND), []);\n    }\n\n    // we can still bind the hotkeys if there is no HotkeysProvider, they just won't show up in the dialog\n    React.useEffect(() => {\n        const payload = [...globalKeys.map(k => k.config), ...localKeys.map(k => k.config)];\n        dispatch({ type: \"ADD_HOTKEYS\", payload });\n        return () => dispatch({ type: \"REMOVE_HOTKEYS\", payload });\n    }, [keys]);\n\n    const invokeNamedCallbackIfComboRecognized = (\n        global: boolean,\n        combo: IKeyCombo,\n        callbackName: \"onKeyDown\" | \"onKeyUp\",\n        e: KeyboardEvent,\n    ) => {\n        const isTextInput = elementIsTextInput(e.target as HTMLElement);\n        for (const key of global ? globalKeys : localKeys) {\n            const {\n                allowInInput = false,\n                disabled = false,\n                preventDefault = false,\n                stopPropagation = false,\n            } = key.config;\n            const shouldIgnore = (isTextInput && !allowInInput) || disabled;\n            if (!shouldIgnore && comboMatches(key.combo, combo)) {\n                if (preventDefault) {\n                    e.preventDefault();\n                }\n                if (stopPropagation) {\n                    // set a flag just for unit testing. not meant to be referenced in feature work.\n                    (e as any).isPropagationStopped = true;\n                    e.stopPropagation();\n                }\n                key.config[callbackName]?.(e);\n            }\n        }\n    };\n\n    const handleGlobalKeyDown = React.useCallback(\n        (e: KeyboardEvent) => {\n            // special case for global keydown: if '?' is pressed, open the hotkeys dialog\n            const combo = getKeyCombo(e);\n            const isTextInput = elementIsTextInput(e.target as HTMLElement);\n            if (!isTextInput && comboMatches(parseKeyCombo(showDialogKeyCombo), combo)) {\n                dispatch({ type: \"OPEN_DIALOG\" });\n            } else {\n                invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyDown\", e);\n            }\n        },\n        [globalKeys],\n    );\n    const handleGlobalKeyUp = React.useCallback(\n        (e: KeyboardEvent) => invokeNamedCallbackIfComboRecognized(true, getKeyCombo(e), \"onKeyUp\", e),\n        [globalKeys],\n    );\n\n    const handleLocalKeyDown = React.useCallback(\n        (e: React.KeyboardEvent<HTMLElement>) =>\n            invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyDown\", e.nativeEvent),\n        [localKeys],\n    );\n    const handleLocalKeyUp = React.useCallback(\n        (e: React.KeyboardEvent<HTMLElement>) =>\n            invokeNamedCallbackIfComboRecognized(false, getKeyCombo(e.nativeEvent), \"onKeyUp\", e.nativeEvent),\n        [localKeys],\n    );\n\n    React.useEffect(() => {\n        // document is guaranteed to be defined inside effects\n        document!.addEventListener(\"keydown\", handleGlobalKeyDown);\n        document!.addEventListener(\"keyup\", handleGlobalKeyUp);\n        return () => {\n            document!.removeEventListener(\"keydown\", handleGlobalKeyDown);\n            document!.removeEventListener(\"keyup\", handleGlobalKeyUp);\n        };\n    }, [handleGlobalKeyDown, handleGlobalKeyUp]);\n\n    return { handleKeyDown: handleLocalKeyDown, handleKeyUp: handleLocalKeyUp };\n}\n\nfunction getDefaultDocument(): Document | undefined {\n    if (typeof window === \"undefined\") {\n        return undefined;\n    }\n    return window.document;\n}\n"]}