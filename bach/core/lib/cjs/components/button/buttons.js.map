{"version":3,"file":"buttons.js","sourceRoot":"","sources":["../../../../src/components/button/buttons.tsx"],"names":[],"mappings":";;;;AAmBA,qDAA+B;AAE/B,8CAA4E;AAC5E,4CAAuD;AACvD,qDAAoH;AAUpH,MAAa,MAAO,SAAQ,+BAAiC;IAClD,MAAM,CAAC,WAAW,GAAG,GAAG,0BAAkB,SAAS,CAAC;IAGpD,SAAS,GAA6B,IAAI,CAAC;IAExC,SAAS,GAAiC,IAAA,iBAAU,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAElG,MAAM;QACT,OAAO,CACH,gCACI,IAAI,EAAC,QAAQ,EACb,GAAG,EAAE,IAAI,CAAC,SAAS,KACf,IAAA,0BAAkB,EAAC,IAAI,CAAC,KAAK,CAAC,KAC9B,IAAI,CAAC,oBAAoB,EAAE,IAE9B,IAAI,CAAC,cAAc,EAAE,CACjB,CACZ,CAAC;IACN,CAAC;IAEM,kBAAkB,CAAC,SAAsB;QAC5C,IAAI,SAAS,CAAC,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YAChD,IAAA,aAAM,EAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,SAAS,GAAG,IAAA,iBAAU,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACtE,IAAA,aAAM,EAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SACjD;IACL,CAAC;;AA3BL,wBA4BC;AAOD,MAAa,YAAa,SAAQ,+BAAiC;IACxD,MAAM,CAAC,WAAW,GAAG,GAAG,0BAAkB,eAAe,CAAC;IAG1D,SAAS,GAA6B,IAAI,CAAC;IAExC,SAAS,GAAiC,IAAA,iBAAU,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAElG,MAAM;QACT,MAAM,EAAE,IAAI,EAAE,QAAQ,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1C,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAEhD,OAAO,CACH,2BACI,IAAI,EAAC,QAAQ,EACb,GAAG,EAAE,IAAI,CAAC,SAAS,KACf,IAAA,0BAAkB,EAAC,IAAI,CAAC,KAAK,CAAC,KAC9B,WAAW,EACf,IAAI,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EAC7C,QAAQ,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,IAE7C,IAAI,CAAC,cAAc,EAAE,CACtB,CACP,CAAC;IACN,CAAC;IAEM,kBAAkB,CAAC,SAA4B;QAClD,IAAI,SAAS,CAAC,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YAChD,IAAA,aAAM,EAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,SAAS,GAAG,IAAA,iBAAU,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACtE,IAAA,aAAM,EAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SACjD;IACL,CAAC;;AAhCL,oCAiCC","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// HACKHACK: these components should go in separate files\n/* eslint-disable max-classes-per-file */\n\nimport * as React from \"react\";\n\nimport { DISPLAYNAME_PREFIX, removeNonHTMLProps } from \"../../common/props\";\nimport { refHandler, setRef } from \"../../common/refs\";\nimport { AbstractButton, AnchorButtonProps, ButtonProps, IAnchorButtonProps, IButtonProps } from \"./abstractButton\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport { IAnchorButtonProps, IButtonProps, ButtonProps, AnchorButtonProps };\n\n/**\n * Button component.\n *\n * @see https://blueprintjs.com/docs/#core/components/button\n */\nexport class Button extends AbstractButton<HTMLButtonElement> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Button`;\n\n    // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n    public buttonRef: HTMLButtonElement | null = null;\n\n    protected handleRef: React.Ref<HTMLButtonElement> = refHandler(this, \"buttonRef\", this.props.elementRef);\n\n    public render() {\n        return (\n            <button\n                type=\"button\"\n                ref={this.handleRef}\n                {...removeNonHTMLProps(this.props)}\n                {...this.getCommonButtonProps()}\n            >\n                {this.renderChildren()}\n            </button>\n        );\n    }\n\n    public componentDidUpdate(prevProps: ButtonProps) {\n        if (prevProps.elementRef !== this.props.elementRef) {\n            setRef(prevProps.elementRef, null);\n            this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n            setRef(this.props.elementRef, this.buttonRef);\n        }\n    }\n}\n\n/**\n * AnchorButton component.\n *\n * @see https://blueprintjs.com/docs/#core/components/button\n */\nexport class AnchorButton extends AbstractButton<HTMLAnchorElement> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.AnchorButton`;\n\n    // need to keep this ref so that we can access it in AbstractButton#handleKeyUp\n    public buttonRef: HTMLAnchorElement | null = null;\n\n    protected handleRef: React.Ref<HTMLAnchorElement> = refHandler(this, \"buttonRef\", this.props.elementRef);\n\n    public render() {\n        const { href, tabIndex = 0 } = this.props;\n        const commonProps = this.getCommonButtonProps();\n\n        return (\n            <a\n                role=\"button\"\n                ref={this.handleRef}\n                {...removeNonHTMLProps(this.props)}\n                {...commonProps}\n                href={commonProps.disabled ? undefined : href}\n                tabIndex={commonProps.disabled ? -1 : tabIndex}\n            >\n                {this.renderChildren()}\n            </a>\n        );\n    }\n\n    public componentDidUpdate(prevProps: AnchorButtonProps) {\n        if (prevProps.elementRef !== this.props.elementRef) {\n            setRef(prevProps.elementRef, null);\n            this.handleRef = refHandler(this, \"buttonRef\", this.props.elementRef);\n            setRef(this.props.elementRef, this.buttonRef);\n        }\n    }\n}\n"]}