{"version":3,"file":"controls.js","sourceRoot":"","sources":["../../../../src/components/forms/controls.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// we need some empty interfaces to show up in docs\n// HACKHACK: these components should go in separate files\n/* eslint-disable max-classes-per-file, @typescript-eslint/no-empty-interface */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Alignment, Classes, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, HTMLInputProps, Props } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type ControlProps = IControlProps;\n/** @deprecated use ControlProps */\nexport interface IControlProps extends Props, HTMLInputProps {\n    // NOTE: HTML props are duplicated here to provide control-specific documentation\n\n    /**\n     * Alignment of the indicator within container.\n     *\n     * @default Alignment.LEFT\n     */\n    alignIndicator?: Alignment;\n\n    /** Whether the control is checked. */\n    checked?: boolean;\n\n    /** JSX label for the control. */\n    children?: React.ReactNode;\n\n    /** Whether the control is initially checked (uncontrolled mode). */\n    defaultChecked?: boolean;\n\n    /** Whether the control is non-interactive. */\n    disabled?: boolean;\n\n    /** Ref handler that receives HTML `<input>` element backing this component. */\n    inputRef?: React.Ref<HTMLInputElement>;\n\n    /** Whether the control should appear as an inline element. */\n    inline?: boolean;\n\n    /**\n     * Text label for the control.\n     *\n     * Use `children` or `labelElement` to supply JSX content. This prop actually supports JSX elements,\n     * but TypeScript will throw an error because `HTMLAttributes` only allows strings.\n     */\n    label?: string;\n\n    /**\n     * JSX Element label for the control.\n     *\n     * This prop is a workaround for TypeScript consumers as the type definition for `label` only\n     * accepts strings. JavaScript consumers can provide a JSX element directly to `label`.\n     */\n    labelElement?: React.ReactNode;\n\n    /** Whether this control should use large styles. */\n    large?: boolean;\n\n    /** Event handler invoked when input value is changed. */\n    onChange?: React.FormEventHandler<HTMLInputElement>;\n\n    /**\n     * Name of the HTML tag that wraps the checkbox.\n     *\n     * By default a `<label>` is used, which effectively enlarges the click\n     * target to include all of its children. Supply a different tag name if\n     * this behavior is undesirable or you're listening to click events from a\n     * parent element (as the label can register duplicate clicks).\n     *\n     * @default \"label\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n}\n\n/** Internal props for Checkbox/Radio/Switch to render correctly. */\ninterface IControlInternalProps extends ControlProps {\n    type: \"checkbox\" | \"radio\";\n    typeClassName: string;\n    indicatorChildren?: React.ReactNode;\n}\n\n/**\n * Renders common control elements, with additional props to customize appearance.\n * This component is not exported and is only used in this file for `Checkbox`, `Radio`, and `Switch` below.\n */\nconst Control: React.FC<IControlInternalProps> = ({\n    alignIndicator,\n    children,\n    className,\n    indicatorChildren,\n    inline,\n    inputRef,\n    label,\n    labelElement,\n    large,\n    style,\n    type,\n    typeClassName,\n    tagName = \"label\",\n    ...htmlProps\n}) => {\n    const classes = classNames(\n        Classes.CONTROL,\n        typeClassName,\n        {\n            [Classes.DISABLED]: htmlProps.disabled,\n            [Classes.INLINE]: inline,\n            [Classes.LARGE]: large,\n        },\n        Classes.alignmentClass(alignIndicator),\n        className,\n    );\n\n    return React.createElement(\n        tagName,\n        { className: classes, style },\n        <input {...htmlProps} ref={inputRef} type={type} />,\n        <span className={Classes.CONTROL_INDICATOR}>{indicatorChildren}</span>,\n        label,\n        labelElement,\n        children,\n    );\n};\n\n//\n// Switch\n//\n\n// eslint-disable-next-line deprecation/deprecation\nexport type SwitchProps = ISwitchProps;\n/** @deprecated use SwitchProps */\nexport interface ISwitchProps extends ControlProps {\n    /**\n     * Text to display inside the switch indicator when checked.\n     * If `innerLabel` is provided and this prop is omitted, then `innerLabel`\n     * will be used for both states.\n     *\n     * @default innerLabel\n     */\n    innerLabelChecked?: string;\n\n    /**\n     * Text to display inside the switch indicator when unchecked.\n     */\n    innerLabel?: string;\n}\n\n/**\n * Switch component.\n *\n * @see https://blueprintjs.com/docs/#core/components/switch\n */\nexport class Switch extends AbstractPureComponent2<SwitchProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Switch`;\n\n    public render() {\n        const { innerLabelChecked, innerLabel, ...controlProps } = this.props;\n        const switchLabels =\n            innerLabel || innerLabelChecked\n                ? [\n                      <div key=\"checked\" className={Classes.CONTROL_INDICATOR_CHILD}>\n                          <div className={Classes.SWITCH_INNER_TEXT}>\n                              {innerLabelChecked ? innerLabelChecked : innerLabel}\n                          </div>\n                      </div>,\n                      <div key=\"unchecked\" className={Classes.CONTROL_INDICATOR_CHILD}>\n                          <div className={Classes.SWITCH_INNER_TEXT}>{innerLabel}</div>\n                      </div>,\n                  ]\n                : null;\n        return (\n            <Control\n                {...controlProps}\n                type=\"checkbox\"\n                typeClassName={Classes.SWITCH}\n                indicatorChildren={switchLabels}\n            />\n        );\n    }\n}\n\n//\n// Radio\n//\n\n/** @deprecated use RadioProps */\nexport type IRadioProps = ControlProps;\n// eslint-disable-next-line deprecation/deprecation\nexport type RadioProps = IRadioProps;\n\n/**\n * Radio component.\n *\n * @see https://blueprintjs.com/docs/#core/components/radio\n */\nexport class Radio extends AbstractPureComponent2<RadioProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Radio`;\n\n    public render() {\n        return <Control {...this.props} type=\"radio\" typeClassName={Classes.RADIO} />;\n    }\n}\n\n//\n// Checkbox\n//\n\n// eslint-disable-next-line deprecation/deprecation\nexport type CheckboxProps = ICheckboxProps;\n/** @deprecated use CheckboxProps */\nexport interface ICheckboxProps extends ControlProps {\n    /** Whether this checkbox is initially indeterminate (uncontrolled mode). */\n    defaultIndeterminate?: boolean;\n\n    /**\n     * Whether this checkbox is indeterminate, or \"partially checked.\"\n     * The checkbox will appear with a small dash instead of a tick to indicate that the value\n     * is not exactly true or false.\n     *\n     * Note that this prop takes precendence over `checked`: if a checkbox is marked both\n     * `checked` and `indeterminate` via props, it will appear as indeterminate in the DOM.\n     */\n    indeterminate?: boolean;\n}\n\nexport interface ICheckboxState {\n    // Checkbox adds support for uncontrolled indeterminate state\n    indeterminate: boolean;\n}\n\n/**\n * Checkbox component.\n *\n * @see https://blueprintjs.com/docs/#core/components/checkbox\n */\nexport class Checkbox extends AbstractPureComponent2<CheckboxProps, ICheckboxState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Checkbox`;\n\n    public static getDerivedStateFromProps({ indeterminate }: CheckboxProps): ICheckboxState | null {\n        // put props into state if controlled by props\n        if (indeterminate != null) {\n            return { indeterminate };\n        }\n\n        return null;\n    }\n\n    public state: ICheckboxState = {\n        indeterminate: this.props.indeterminate || this.props.defaultIndeterminate || false,\n    };\n\n    // must maintain internal reference for `indeterminate` support\n    public input: HTMLInputElement | null = null;\n\n    private handleInputRef: React.Ref<HTMLInputElement> = refHandler(this, \"input\", this.props.inputRef);\n\n    public render() {\n        const { defaultIndeterminate, indeterminate, ...controlProps } = this.props;\n        return (\n            <Control\n                {...controlProps}\n                inputRef={this.handleInputRef}\n                onChange={this.handleChange}\n                type=\"checkbox\"\n                typeClassName={Classes.CHECKBOX}\n            />\n        );\n    }\n\n    public componentDidMount() {\n        this.updateIndeterminate();\n    }\n\n    public componentDidUpdate(prevProps: CheckboxProps) {\n        this.updateIndeterminate();\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.handleInputRef = refHandler(this, \"input\", this.props.inputRef);\n            setRef(this.props.inputRef, this.input);\n        }\n    }\n\n    private updateIndeterminate() {\n        if (this.input != null) {\n            this.input.indeterminate = this.state.indeterminate;\n        }\n    }\n\n    private handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n        const { indeterminate } = evt.target;\n        // update state immediately only if uncontrolled\n        if (this.props.indeterminate == null) {\n            this.setState({ indeterminate });\n        }\n        // otherwise wait for props change. always invoke handler.\n        this.props.onChange?.(evt);\n    };\n}\n"]}