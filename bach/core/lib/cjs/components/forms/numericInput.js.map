{"version":3,"file":"numericInput.js","sourceRoot":"","sources":["../../../../src/components/forms/numericInput.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    Classes,\n    DISPLAYNAME_PREFIX,\n    HTMLInputProps,\n    Intent,\n    Keys,\n    Position,\n    refHandler,\n    removeNonHTMLProps,\n    setRef,\n    Utils,\n} from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { Button } from \"../button/buttons\";\nimport { ControlGroup } from \"./controlGroup\";\nimport { InputGroup } from \"./inputGroup\";\nimport type { InputSharedProps } from \"./inputSharedProps\";\nimport {\n    clampValue,\n    getValueOrEmptyValue,\n    isValidNumericKeyboardEvent,\n    isValueNumeric,\n    parseStringToStringNumber,\n    sanitizeNumericInput,\n    toLocaleString,\n    toMaxPrecision,\n} from \"./numericInputUtils\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type NumericInputProps = INumericInputProps;\n/** @deprecated use NumericInputProps */\nexport interface INumericInputProps extends InputSharedProps {\n    /**\n     * Whether to allow only floating-point number characters in the field,\n     * mimicking the native `input[type=\"number\"]`.\n     *\n     * @default true\n     */\n    allowNumericCharactersOnly?: boolean;\n\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler.\n     */\n    asyncControl?: boolean;\n\n    /**\n     * The position of the buttons with respect to the input field.\n     *\n     * @default Position.RIGHT\n     */\n    buttonPosition?: typeof Position.LEFT | typeof Position.RIGHT | \"none\";\n\n    /**\n     * Whether the value should be clamped to `[min, max]` on blur.\n     * The value will be clamped to each bound only if the bound is defined.\n     * Note that native `input[type=\"number\"]` controls do *NOT* clamp on blur.\n     *\n     * @default false\n     */\n    clampValueOnBlur?: boolean;\n\n    /**\n     * In uncontrolled mode, this sets the default value of the input.\n     * Note that this value is only used upon component instantiation and changes to this prop\n     * during the component lifecycle will be ignored.\n     *\n     * @default \"\"\n     */\n    defaultValue?: number | string;\n\n    /**\n     * If set to `true`, the input will display with larger styling.\n     * This is equivalent to setting `Classes.LARGE` via className on the\n     * parent control group and on the child input group.\n     *\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * The locale name, which is passed to the component to format the number and allowing to type the number in the specific locale.\n     * [See MDN documentation for more info about browser locale identification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n     *\n     * @default \"\"\n     */\n    locale?: string;\n\n    /**\n     * The increment between successive values when <kbd>shift</kbd> is held.\n     * Pass explicit `null` value to disable this interaction.\n     *\n     * @default 10\n     */\n    majorStepSize?: number | null;\n\n    /** The maximum value of the input. */\n    max?: number;\n\n    /** The minimum value of the input. */\n    min?: number;\n\n    /**\n     * The increment between successive values when <kbd>alt</kbd> is held.\n     * Pass explicit `null` value to disable this interaction.\n     *\n     * @default 0.1\n     */\n    minorStepSize?: number | null;\n\n    /**\n     * Whether the entire text field should be selected on focus.\n     *\n     * @default false\n     */\n    selectAllOnFocus?: boolean;\n\n    /**\n     * Whether the entire text field should be selected on increment.\n     *\n     * @default false\n     */\n    selectAllOnIncrement?: boolean;\n\n    /**\n     * If set to `true`, the input will display with smaller styling.\n     * This is equivalent to setting `Classes.SMALL` via className on the\n     * parent control group and on the child input group.\n     *\n     * @default false\n     */\n    small?: boolean;\n\n    /**\n     * The increment between successive values when no modifier keys are held.\n     *\n     * @default 1\n     */\n    stepSize?: number;\n\n    /**\n     * The value to display in the input field.\n     */\n    value?: number | string;\n\n    /** The callback invoked when the value changes due to a button click. */\n    onButtonClick?(valueAsNumber: number, valueAsString: string): void;\n\n    /** The callback invoked when the value changes due to typing, arrow keys, or button clicks. */\n    onValueChange?(valueAsNumber: number, valueAsString: string, inputElement: HTMLInputElement | null): void;\n}\n\nexport interface INumericInputState {\n    currentImeInputInvalid: boolean;\n    prevMinProp?: number;\n    prevMaxProp?: number;\n    shouldSelectAfterUpdate: boolean;\n    stepMaxPrecision: number;\n    value: string;\n}\n\nenum IncrementDirection {\n    DOWN = -1,\n    UP = +1,\n}\n\nconst NON_HTML_PROPS: Array<keyof NumericInputProps> = [\n    \"allowNumericCharactersOnly\",\n    \"buttonPosition\",\n    \"clampValueOnBlur\",\n    \"className\",\n    \"defaultValue\",\n    \"majorStepSize\",\n    \"minorStepSize\",\n    \"onButtonClick\",\n    \"onValueChange\",\n    \"selectAllOnFocus\",\n    \"selectAllOnIncrement\",\n    \"stepSize\",\n];\n\ntype ButtonEventHandlers = Required<Pick<React.HTMLAttributes<Element>, \"onKeyDown\" | \"onMouseDown\">>;\n\n/**\n * Numeric input component.\n *\n * @see https://blueprintjs.com/docs/#core/components/numeric-input\n */\nexport class NumericInput extends AbstractPureComponent2<HTMLInputProps & NumericInputProps, INumericInputState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.NumericInput`;\n\n    public static VALUE_EMPTY = \"\";\n\n    public static VALUE_ZERO = \"0\";\n\n    private numericInputId = Utils.uniqueId(\"numericInput\");\n\n    public static defaultProps: NumericInputProps = {\n        allowNumericCharactersOnly: true,\n        buttonPosition: Position.RIGHT,\n        clampValueOnBlur: false,\n        defaultValue: NumericInput.VALUE_EMPTY,\n        large: false,\n        majorStepSize: 10,\n        minorStepSize: 0.1,\n        selectAllOnFocus: false,\n        selectAllOnIncrement: false,\n        small: false,\n        stepSize: 1,\n    };\n\n    public static getDerivedStateFromProps(props: NumericInputProps, state: INumericInputState) {\n        const nextState = {\n            prevMaxProp: props.max,\n            prevMinProp: props.min,\n        };\n\n        const didMinChange = props.min !== state.prevMinProp;\n        const didMaxChange = props.max !== state.prevMaxProp;\n        const didBoundsChange = didMinChange || didMaxChange;\n\n        // in controlled mode, use props.value\n        // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n        const value = props.value?.toString() ?? state.value;\n        const stepMaxPrecision = NumericInput.getStepMaxPrecision(props);\n\n        const sanitizedValue =\n            value !== NumericInput.VALUE_EMPTY\n                ? NumericInput.roundAndClampValue(value, stepMaxPrecision, props.min, props.max, 0, props.locale)\n                : NumericInput.VALUE_EMPTY;\n\n        // if a new min and max were provided that cause the existing value to fall\n        // outside of the new bounds, then clamp the value to the new valid range.\n        if (didBoundsChange && sanitizedValue !== state.value) {\n            return { ...nextState, stepMaxPrecision, value: sanitizedValue };\n        }\n        return { ...nextState, stepMaxPrecision, value };\n    }\n\n    private static CONTINUOUS_CHANGE_DELAY = 300;\n\n    private static CONTINUOUS_CHANGE_INTERVAL = 100;\n\n    // Value Helpers\n    // =============\n    private static getStepMaxPrecision(props: HTMLInputProps & NumericInputProps) {\n        if (props.minorStepSize != null) {\n            return Utils.countDecimalPlaces(props.minorStepSize);\n        } else {\n            return Utils.countDecimalPlaces(props.stepSize!);\n        }\n    }\n\n    private static roundAndClampValue(\n        value: string,\n        stepMaxPrecision: number,\n        min: number | undefined,\n        max: number | undefined,\n        delta = 0,\n        locale: string | undefined,\n    ) {\n        if (!isValueNumeric(value, locale)) {\n            return NumericInput.VALUE_EMPTY;\n        }\n        const currentValue = parseStringToStringNumber(value, locale);\n        const nextValue = toMaxPrecision(Number(currentValue) + delta, stepMaxPrecision);\n        const clampedValue = clampValue(nextValue, min, max);\n        return toLocaleString(clampedValue, locale);\n    }\n\n    public state: INumericInputState = {\n        currentImeInputInvalid: false,\n        shouldSelectAfterUpdate: false,\n        stepMaxPrecision: NumericInput.getStepMaxPrecision(this.props),\n        value: getValueOrEmptyValue(this.props.value ?? this.props.defaultValue),\n    };\n\n    // updating these flags need not trigger re-renders, so don't include them in this.state.\n    private didPasteEventJustOccur = false;\n\n    private delta = 0;\n\n    public inputElement: HTMLInputElement | null = null;\n\n    private inputRef: React.Ref<HTMLInputElement> = refHandler(this, \"inputElement\", this.props.inputRef);\n\n    private intervalId?: number;\n\n    private incrementButtonHandlers = this.getButtonEventHandlers(IncrementDirection.UP);\n\n    private decrementButtonHandlers = this.getButtonEventHandlers(IncrementDirection.DOWN);\n\n    private getCurrentValueAsNumber = () => Number(parseStringToStringNumber(this.state.value, this.props.locale));\n\n    public render() {\n        const { buttonPosition, className, fill, large, small } = this.props;\n        const containerClasses = classNames(\n            Classes.NUMERIC_INPUT,\n            { [Classes.LARGE]: large, [Classes.SMALL]: small },\n            className,\n        );\n        const buttons = this.renderButtons();\n        return (\n            <ControlGroup className={containerClasses} fill={fill}>\n                {buttonPosition === Position.LEFT && buttons}\n                {this.renderInput()}\n                {buttonPosition === Position.RIGHT && buttons}\n            </ControlGroup>\n        );\n    }\n\n    public componentDidUpdate(prevProps: NumericInputProps, prevState: INumericInputState) {\n        super.componentDidUpdate(prevProps, prevState);\n\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.inputRef = refHandler(this, \"inputElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.inputElement);\n        }\n\n        if (this.state.shouldSelectAfterUpdate) {\n            this.inputElement?.setSelectionRange(0, this.state.value.length);\n        }\n\n        const didMinChange = this.props.min !== prevProps.min;\n        const didMaxChange = this.props.max !== prevProps.max;\n        const didBoundsChange = didMinChange || didMaxChange;\n        const didLocaleChange = this.props.locale !== prevProps.locale;\n        const didValueChange = this.state.value !== prevState.value;\n\n        if ((didBoundsChange && didValueChange) || (didLocaleChange && prevState.value !== NumericInput.VALUE_EMPTY)) {\n            // we clamped the value due to a bounds change, so we should fire the change callback\n            const valueToParse = didLocaleChange ? prevState.value : this.state.value;\n            const valueAsString = parseStringToStringNumber(valueToParse, prevProps.locale);\n            const localizedValue = toLocaleString(+valueAsString, this.props.locale);\n\n            this.props.onValueChange?.(+valueAsString, localizedValue, this.inputElement);\n        }\n    }\n\n    protected validateProps(nextProps: HTMLInputProps & NumericInputProps) {\n        const { majorStepSize, max, min, minorStepSize, stepSize, value } = nextProps;\n        if (min != null && max != null && min > max) {\n            console.error(Errors.NUMERIC_INPUT_MIN_MAX);\n        }\n        if (stepSize! <= 0) {\n            console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (majorStepSize && majorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize > stepSize!) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n        }\n        if (majorStepSize && majorStepSize < stepSize!) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n        }\n\n        // controlled mode\n        if (value != null) {\n            const stepMaxPrecision = NumericInput.getStepMaxPrecision(nextProps);\n            const sanitizedValue = NumericInput.roundAndClampValue(\n                value.toString(),\n                stepMaxPrecision,\n                min,\n                max,\n                0,\n                this.props.locale,\n            );\n            const valueDoesNotMatch = sanitizedValue !== value.toString();\n            const localizedValue = toLocaleString(\n                Number(parseStringToStringNumber(value, this.props.locale)),\n                this.props.locale,\n            );\n            const isNotLocalized = sanitizedValue !== localizedValue;\n\n            if (valueDoesNotMatch && isNotLocalized) {\n                console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n            }\n        }\n    }\n\n    // Render Helpers\n    // ==============\n\n    private renderButtons() {\n        const { intent, max, min, locale } = this.props;\n        const value = parseStringToStringNumber(this.state.value, locale);\n        const disabled = this.props.disabled || this.props.readOnly;\n        const isIncrementDisabled = max !== undefined && value !== \"\" && +value >= max;\n        const isDecrementDisabled = min !== undefined && value !== \"\" && +value <= min;\n\n        return (\n            <ButtonGroup className={Classes.FIXED} key=\"button-group\" vertical={true}>\n                <Button\n                    aria-label=\"increment\"\n                    aria-controls={this.numericInputId}\n                    disabled={disabled || isIncrementDisabled}\n                    icon=\"chevron-up\"\n                    intent={intent}\n                    {...this.incrementButtonHandlers}\n                />\n                <Button\n                    aria-label=\"decrement\"\n                    aria-controls={this.numericInputId}\n                    disabled={disabled || isDecrementDisabled}\n                    icon=\"chevron-down\"\n                    intent={intent}\n                    {...this.decrementButtonHandlers}\n                />\n            </ButtonGroup>\n        );\n    }\n\n    private renderInput() {\n        const inputGroupHtmlProps = removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n        const valueAsNumber = this.getCurrentValueAsNumber();\n\n        return (\n            <InputGroup\n                asyncControl={this.props.asyncControl}\n                autoComplete=\"off\"\n                id={this.numericInputId}\n                role={this.props.allowNumericCharactersOnly ? \"spinbutton\" : undefined}\n                {...inputGroupHtmlProps}\n                aria-valuemax={this.props.max}\n                aria-valuemin={this.props.min}\n                aria-valuenow={valueAsNumber}\n                intent={this.state.currentImeInputInvalid ? Intent.DANGER : this.props.intent}\n                inputClassName={this.props.inputClassName}\n                inputRef={this.inputRef}\n                large={this.props.large}\n                leftElement={this.props.leftElement}\n                leftIcon={this.props.leftIcon}\n                onFocus={this.handleInputFocus}\n                onBlur={this.handleInputBlur}\n                onChange={this.handleInputChange}\n                onCompositionEnd={this.handleCompositionEnd}\n                onCompositionUpdate={this.handleCompositionUpdate}\n                onKeyDown={this.handleInputKeyDown}\n                onKeyPress={this.handleInputKeyPress}\n                onPaste={this.handleInputPaste}\n                rightElement={this.props.rightElement}\n                small={this.props.small}\n                value={this.state.value}\n            />\n        );\n    }\n\n    // Callbacks - Buttons\n    // ===================\n\n    private getButtonEventHandlers(direction: IncrementDirection): ButtonEventHandlers {\n        return {\n            // keydown is fired repeatedly when held so it's implicitly continuous\n            onKeyDown: evt => {\n                // eslint-disable-next-line deprecation/deprecation\n                if (!this.props.disabled && Keys.isKeyboardClick(evt.keyCode)) {\n                    this.handleButtonClick(evt, direction);\n                }\n            },\n            onMouseDown: evt => {\n                if (!this.props.disabled) {\n                    this.handleButtonClick(evt, direction);\n                    this.startContinuousChange();\n                }\n            },\n        };\n    }\n\n    private handleButtonClick = (e: React.MouseEvent | React.KeyboardEvent, direction: IncrementDirection) => {\n        const delta = this.updateDelta(direction, e);\n        const nextValue = this.incrementValue(delta);\n        this.props.onButtonClick?.(Number(parseStringToStringNumber(nextValue, this.props.locale)), nextValue);\n    };\n\n    private startContinuousChange() {\n        // The button's onMouseUp event handler doesn't fire if the user\n        // releases outside of the button, so we need to watch all the way\n        // from the top.\n        document.addEventListener(\"mouseup\", this.stopContinuousChange);\n\n        // Initial delay is slightly longer to prevent the user from\n        // accidentally triggering the continuous increment/decrement.\n        this.setTimeout(() => {\n            this.intervalId = window.setInterval(this.handleContinuousChange, NumericInput.CONTINUOUS_CHANGE_INTERVAL);\n        }, NumericInput.CONTINUOUS_CHANGE_DELAY);\n    }\n\n    private stopContinuousChange = () => {\n        this.delta = 0;\n        this.clearTimeouts();\n        clearInterval(this.intervalId);\n        document.removeEventListener(\"mouseup\", this.stopContinuousChange);\n    };\n\n    private handleContinuousChange = () => {\n        // If either min or max prop is set, when reaching the limit\n        // the button will be disabled and stopContinuousChange will be never fired,\n        // hence the need to check on each iteration to properly clear the timeout\n        if (this.props.min !== undefined || this.props.max !== undefined) {\n            const min = this.props.min ?? -Infinity;\n            const max = this.props.max ?? Infinity;\n            const valueAsNumber = this.getCurrentValueAsNumber();\n            if (valueAsNumber <= min || valueAsNumber >= max) {\n                this.stopContinuousChange();\n                return;\n            }\n        }\n        const nextValue = this.incrementValue(this.delta);\n        this.props.onButtonClick?.(Number(parseStringToStringNumber(nextValue, this.props.locale)), nextValue);\n    };\n\n    // Callbacks - Input\n    // =================\n\n    private handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        // update this state flag to trigger update for input selection (see componentDidUpdate)\n        this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnFocus! });\n        this.props.onFocus?.(e);\n    };\n\n    private handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n        // always disable this flag on blur so it's ready for next time.\n        this.setState({ shouldSelectAfterUpdate: false });\n\n        if (this.props.clampValueOnBlur) {\n            const { value } = e.target as HTMLInputElement;\n            this.handleNextValue(this.roundAndClampValue(value));\n        }\n\n        this.props.onBlur?.(e);\n    };\n\n    private handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (this.props.disabled || this.props.readOnly) {\n            return;\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        const { keyCode } = e;\n\n        let direction: IncrementDirection | undefined;\n\n        if (keyCode === Keys.ARROW_UP) {\n            direction = IncrementDirection.UP;\n        } else if (keyCode === Keys.ARROW_DOWN) {\n            direction = IncrementDirection.DOWN;\n        }\n\n        if (direction !== undefined) {\n            // when the input field has focus, some key combinations will modify\n            // the field's selection range. we'll actually want to select all\n            // text in the field after we modify the value on the following\n            // lines. preventing the default selection behavior lets us do that\n            // without interference.\n            e.preventDefault();\n\n            const delta = this.updateDelta(direction, e);\n            this.incrementValue(delta);\n        }\n\n        this.props.onKeyDown?.(e);\n    };\n\n    private handleCompositionEnd = (e: React.CompositionEvent<HTMLInputElement>) => {\n        if (this.props.allowNumericCharactersOnly) {\n            this.handleNextValue(sanitizeNumericInput(e.data, this.props.locale));\n            this.setState({ currentImeInputInvalid: false });\n        }\n    };\n\n    private handleCompositionUpdate = (e: React.CompositionEvent<HTMLInputElement>) => {\n        if (this.props.allowNumericCharactersOnly) {\n            const { data } = e;\n            const sanitizedValue = sanitizeNumericInput(data, this.props.locale);\n            if (sanitizedValue.length === 0 && data.length > 0) {\n                this.setState({ currentImeInputInvalid: true });\n            } else {\n                this.setState({ currentImeInputInvalid: false });\n            }\n        }\n    };\n\n    private handleInputKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n        // e.key is not trustworthy in onKeyDown in all browsers.\n        if (this.props.allowNumericCharactersOnly && !isValidNumericKeyboardEvent(e, this.props.locale)) {\n            e.preventDefault();\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        this.props.onKeyPress?.(e);\n    };\n\n    private handleInputPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n        this.didPasteEventJustOccur = true;\n        this.props.onPaste?.(e);\n    };\n\n    private handleInputChange = (e: React.FormEvent) => {\n        const { value } = e.target as HTMLInputElement;\n        let nextValue = value;\n        if (this.props.allowNumericCharactersOnly && this.didPasteEventJustOccur) {\n            this.didPasteEventJustOccur = false;\n            nextValue = sanitizeNumericInput(value, this.props.locale);\n        }\n\n        this.handleNextValue(nextValue);\n        this.setState({ shouldSelectAfterUpdate: false });\n    };\n\n    // Data logic\n    // ==========\n\n    private handleNextValue(valueAsString: string) {\n        if (this.props.value == null) {\n            this.setState({ value: valueAsString });\n        }\n\n        this.props.onValueChange?.(\n            Number(parseStringToStringNumber(valueAsString, this.props.locale)),\n            valueAsString,\n            this.inputElement,\n        );\n    }\n\n    private incrementValue(delta: number) {\n        // pretend we're incrementing from 0 if currValue is empty\n        const currValue = this.state.value === NumericInput.VALUE_EMPTY ? NumericInput.VALUE_ZERO : this.state.value;\n        const nextValue = this.roundAndClampValue(currValue, delta);\n\n        if (nextValue !== this.state.value) {\n            this.handleNextValue(nextValue);\n            this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnIncrement! });\n        }\n\n        // return value used in continuous change updates\n        return nextValue;\n    }\n\n    private getIncrementDelta(direction: IncrementDirection, isShiftKeyPressed: boolean, isAltKeyPressed: boolean) {\n        const { majorStepSize, minorStepSize, stepSize } = this.props;\n\n        if (isShiftKeyPressed && majorStepSize != null) {\n            return direction * majorStepSize;\n        } else if (isAltKeyPressed && minorStepSize != null) {\n            return direction * minorStepSize;\n        } else {\n            return direction * stepSize!;\n        }\n    }\n\n    private roundAndClampValue(value: string, delta = 0) {\n        return NumericInput.roundAndClampValue(\n            value,\n            this.state.stepMaxPrecision,\n            this.props.min,\n            this.props.max,\n            delta,\n            this.props.locale,\n        );\n    }\n\n    private updateDelta(direction: IncrementDirection, e: React.MouseEvent | React.KeyboardEvent) {\n        this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n        return this.delta;\n    }\n}\n"]}