{"version":3,"file":"fileInput.js","sourceRoot":"","sources":["../../../../src/components/forms/fileInput.tsx"],"names":[],"mappings":";;;;AAgBA,oEAAoC;AACpC,qDAA+B;AAE/B,yCAA+D;AAC/D,8CAA+D;AA4E/D,MAAa,SAAU,SAAQ,+BAAsC;IAC1D,MAAM,CAAC,WAAW,GAAG,GAAG,0BAAkB,YAAY,CAAC;IAEvD,MAAM,CAAC,YAAY,GAAmB;QACzC,YAAY,EAAE,KAAK;QACnB,UAAU,EAAE,EAAE;QACd,IAAI,EAAE,gBAAgB;KACzB,CAAC;IAEK,MAAM;QACT,MAAM,EACF,UAAU,EACV,SAAS,EACT,QAAQ,EACR,IAAI,EACJ,YAAY,EACZ,UAAU,EACV,KAAK,EACL,aAAa,EACb,KAAK,EACL,IAAI,EACJ,GAAG,SAAS,EACf,GAAG,IAAI,CAAC,KAAK,CAAC;QAEf,MAAM,WAAW,GAAG,IAAA,oBAAU,EAC1B,gBAAO,CAAC,UAAU,EAClB;YACI,CAAC,gBAAO,CAAC,wBAAwB,CAAC,EAAE,YAAY;YAChD,CAAC,gBAAO,CAAC,QAAQ,CAAC,EAAE,QAAQ;YAC5B,CAAC,gBAAO,CAAC,IAAI,CAAC,EAAE,IAAI;YACpB,CAAC,gBAAO,CAAC,KAAK,CAAC,EAAE,KAAK;YACtB,CAAC,gBAAO,CAAC,KAAK,CAAC,EAAE,KAAK;SACzB,EACD,SAAS,CACZ,CAAC;QAEF,MAAM,EAAE,GAAG,gBAAO,CAAC,iBAAiB,EAAE,CAAC;QAEvC,MAAM,WAAW,GAAG;YAChB,CAAC,GAAG,EAAE,cAAc,CAAC,EAAE,UAAU;YACjC,SAAS,EAAE,IAAA,oBAAU,EAAC,gBAAO,CAAC,iBAAiB,EAAE;gBAC7C,CAAC,gBAAO,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC,UAAU;aACxD,CAAC;SACL,CAAC;QAEF,OAAO,CACH,kCAAW,SAAS,EAAE,SAAS,EAAE,WAAW;YACxC,kCAAW,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,EAAC,MAAM,EAAC,QAAQ,EAAE,QAAQ,GAAI;YAC3F,iCAAU,WAAW,IAAG,IAAI,CAAQ,CAChC,CACX,CAAC;IACN,CAAC;IAEO,iBAAiB,GAAG,CAAC,CAAoC,EAAE,EAAE;QACjE,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC;;AAxDN,8BAyDC","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type FileInputProps = IFileInputProps;\n/** @deprecated use FileInputProps */\nexport interface IFileInputProps extends React.LabelHTMLAttributes<HTMLLabelElement>, Props {\n    /**\n     * Whether the file input is non-interactive.\n     * Setting this to `true` will automatically disable the child input too.\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the file input should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /**\n     * Whether the user has made a selection in the input. This will affect the component's\n     * text styling. Make sure to set a non-empty value for the text prop as well.\n     *\n     * @default false\n     */\n    hasSelection?: boolean;\n\n    /**\n     * The props to pass to the child input.\n     * `disabled` will be ignored in favor of the top-level prop.\n     * `type` will be ignored, because the input _must_ be `type=\"file\"`.\n     * Pass `onChange` here to be notified when the user selects a file.\n     */\n    inputProps?: React.HTMLProps<HTMLInputElement>;\n\n    /**\n     * Whether the file input should appear with large styling.\n     */\n    large?: boolean;\n\n    /**\n     * Callback invoked on `<input>` `change` events.\n     *\n     * This callback is offered as a convenience; it is equivalent to passing\n     * `onChange` to `inputProps`.\n     *\n     * __Note:__ The top-level `onChange` prop is passed to the wrapping\n     * `<label>` rather than the `<input>`, which may not be what you expect.\n     */\n    onInputChange?: React.FormEventHandler<HTMLInputElement>;\n\n    /**\n     * Whether the file input should appear with small styling.\n     */\n    small?: boolean;\n\n    /**\n     * The text to display.\n     *\n     * @default \"Choose file...\"\n     */\n    text?: React.ReactNode;\n\n    /**\n     * The button text.\n     *\n     * @default \"Browse\"\n     */\n    buttonText?: string;\n}\n\n// this is a simple component, unit tests would be mostly tautological\n/* istanbul ignore next */\n/**\n * File input component.\n *\n * @see https://blueprintjs.com/docs/#core/components/file-input\n */\nexport class FileInput extends AbstractPureComponent2<FileInputProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.FileInput`;\n\n    public static defaultProps: FileInputProps = {\n        hasSelection: false,\n        inputProps: {},\n        text: \"Choose file...\",\n    };\n\n    public render() {\n        const {\n            buttonText,\n            className,\n            disabled,\n            fill,\n            hasSelection,\n            inputProps,\n            large,\n            onInputChange,\n            small,\n            text,\n            ...htmlProps\n        } = this.props;\n\n        const rootClasses = classNames(\n            Classes.FILE_INPUT,\n            {\n                [Classes.FILE_INPUT_HAS_SELECTION]: hasSelection,\n                [Classes.DISABLED]: disabled,\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.SMALL]: small,\n            },\n            className,\n        );\n\n        const NS = Classes.getClassNamespace();\n\n        const uploadProps = {\n            [`${NS}-button-text`]: buttonText,\n            className: classNames(Classes.FILE_UPLOAD_INPUT, {\n                [Classes.FILE_UPLOAD_INPUT_CUSTOM_TEXT]: !!buttonText,\n            }),\n        };\n\n        return (\n            <label {...htmlProps} className={rootClasses}>\n                <input {...inputProps} onChange={this.handleInputChange} type=\"file\" disabled={disabled} />\n                <span {...uploadProps}>{text}</span>\n            </label>\n        );\n    }\n\n    private handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n        this.props.onInputChange?.(e);\n        this.props.inputProps?.onChange?.(e);\n    };\n}\n"]}