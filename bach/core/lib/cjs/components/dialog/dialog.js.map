{"version":3,"file":"dialog.js","sourceRoot":"","sources":["../../../../src/components/dialog/dialog.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, MaybeElement, Props } from \"../../common/props\";\nimport { uniqueId } from \"../../common/utils\";\nimport { Button } from \"../button/buttons\";\nimport { H6 } from \"../html/html\";\nimport { Icon, IconName, IconSize } from \"../icon/icon\";\nimport { IBackdropProps, Overlay, OverlayableProps } from \"../overlay/overlay\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type DialogProps = IDialogProps;\n/** @deprecated use DialogProps */\nexport interface IDialogProps extends OverlayableProps, IBackdropProps, Props {\n    /** Dialog contents. */\n    children?: React.ReactNode;\n\n    /**\n     * Toggles the visibility of the overlay and its children.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * Dialog always has a backdrop so this prop is excluded from the public API.\n     *\n     * @internal\n     */\n    hasBackdrop?: boolean;\n\n    /**\n     * Name of a Blueprint UI icon (or an icon element) to render in the\n     * dialog's header. Note that the header will only be rendered if `title` is\n     * provided.\n     */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * Whether to show the close button in the dialog's header.\n     * Note that the header will only be rendered if `title` is provided.\n     *\n     * @default true\n     */\n    isCloseButtonShown?: boolean;\n\n    /**\n     * CSS styles to apply to the dialog.\n     *\n     * @default {}\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * Title of the dialog. If provided, an element with `Classes.DIALOG_HEADER`\n     * will be rendered inside the dialog before any children elements.\n     */\n    title?: React.ReactNode;\n\n    /**\n     * Name of the transition for internal `CSSTransition`. Providing your own\n     * name here will require defining new CSS transition properties.\n     */\n    transitionName?: string;\n\n    /**\n     * Ref supplied to the `Classes.DIALOG_CONTAINER` element.\n     */\n    containerRef?: React.Ref<HTMLDivElement>;\n\n    /**\n     * ID of the element that contains title or label text for this dialog.\n     *\n     * By default, if the `title` prop is supplied, this component will generate\n     * a unique ID for the `<H5>` title element and use that ID here.\n     */\n    \"aria-labelledby\"?: string;\n\n    /**\n     * ID of an element that contains description text inside this dialog.\n     */\n    \"aria-describedby\"?: string;\n}\n\n/**\n * Dialog component.\n *\n * @see https://blueprintjs.com/docs/#core/components/dialog\n */\nexport class Dialog extends AbstractPureComponent2<DialogProps> {\n    public static defaultProps: DialogProps = {\n        canOutsideClickClose: true,\n        isOpen: false,\n    };\n\n    private titleId: string;\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.Dialog`;\n\n    public constructor(props: DialogProps) {\n        super(props);\n\n        const id = uniqueId(\"bp-dialog\");\n        this.titleId = `title-${id}`;\n    }\n\n    public render() {\n        return (\n            <Overlay {...this.props} className={Classes.OVERLAY_SCROLL_CONTAINER} hasBackdrop={true}>\n                <div className={Classes.DIALOG_CONTAINER} ref={this.props.containerRef}>\n                    <div\n                        className={classNames(Classes.DIALOG, this.props.className)}\n                        role=\"dialog\"\n                        aria-labelledby={this.props[\"aria-labelledby\"] || (this.props.title ? this.titleId : undefined)}\n                        aria-describedby={this.props[\"aria-describedby\"]}\n                        style={this.props.style}\n                    >\n                        {this.maybeRenderHeader()}\n                        {this.props.children}\n                    </div>\n                </div>\n            </Overlay>\n        );\n    }\n\n    protected validateProps(props: DialogProps) {\n        if (props.title == null) {\n            if (props.icon != null) {\n                console.warn(Errors.DIALOG_WARN_NO_HEADER_ICON);\n            }\n            if (props.isCloseButtonShown != null) {\n                console.warn(Errors.DIALOG_WARN_NO_HEADER_CLOSE_BUTTON);\n            }\n        }\n    }\n\n    private maybeRenderCloseButton() {\n        // show close button if prop is undefined or null\n        // this gives us a behavior as if the default value were `true`\n        if (this.props.isCloseButtonShown !== false) {\n            return (\n                <Button\n                    aria-label=\"Close\"\n                    className={Classes.DIALOG_CLOSE_BUTTON}\n                    icon={<Icon icon=\"cross\" size={IconSize.STANDARD} />}\n                    minimal={true}\n                    onClick={this.props.onClose}\n                />\n            );\n        } else {\n            return undefined;\n        }\n    }\n\n    private maybeRenderHeader() {\n        const { icon, title } = this.props;\n        if (title == null) {\n            return undefined;\n        }\n        return (\n            <div className={Classes.DIALOG_HEADER}>\n                <Icon icon={icon} size={IconSize.STANDARD} aria-hidden={true} tabIndex={-1} />\n                <H6 id={this.titleId}>{title}</H6>\n                {this.maybeRenderCloseButton()}\n            </div>\n        );\n    }\n}\n"]}