{"version":3,"file":"text.js","sourceRoot":"","sources":["../../../../src/components/text/text.tsx"],"names":[],"mappings":";;;;AAgBA,oEAAoC;AACpC,qDAA+B;AAE/B,yCAA+D;AAC/D,8CAA+D;AAuC/D,MAAa,IAAK,SAAQ,+BAGzB;IACU,MAAM,CAAC,WAAW,GAAG,GAAG,0BAAkB,OAAO,CAAC;IAElD,MAAM,CAAC,YAAY,GAAuB;QAC7C,SAAS,EAAE,KAAK;KACnB,CAAC;IAEK,KAAK,GAAe;QACvB,oBAAoB,EAAE,KAAK;QAC3B,WAAW,EAAE,EAAE;KAClB,CAAC;IAEM,OAAO,GAAuB,IAAI,CAAC;IAEpC,iBAAiB;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEM,kBAAkB;QACrB,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEM,MAAM;QACT,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,GAAG,KAAK,EAAE,KAAK,EAAE,GAAG,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5F,MAAM,OAAO,GAAG,IAAA,oBAAU,EAAC,SAAS,EAAE;YAClC,CAAC,gBAAO,CAAC,sBAAsB,CAAC,EAAE,SAAS;SAC9C,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,aAAa,CACtB,OAAO,EACP;YACI,GAAG,SAAS;YACZ,SAAS,EAAE,OAAO;YAClB,GAAG,EAAE,CAAC,GAAuB,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACtD,KAAK,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;SACzF,EACD,QAAQ,CACX,CAAC;IACN,CAAC;IAEO,MAAM;QACV,IAAI,IAAI,CAAC,OAAO,EAAE,WAAW,IAAI,IAAI,EAAE;YACnC,OAAO;SACV;QACD,MAAM,QAAQ,GAAG;YACb,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,SAAU,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW;YAClG,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;SACxC,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;;AApDL,oBAqDC","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type TextProps = ITextProps;\n/** @deprecated use TextProps */\nexport interface ITextProps extends Props {\n    children?: React.ReactNode;\n\n    /**\n     * Indicates that this component should be truncated with an ellipsis if it overflows its container.\n     * The `title` attribute will also be added when content overflows to show the full text of the children on hover.\n     *\n     * @default false\n     */\n    ellipsize?: boolean;\n\n    /**\n     * HTML tag name to use for rendered element.\n     *\n     * @default \"div\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * HTML title of the element\n     */\n    title?: string;\n}\n\nexport interface ITextState {\n    textContent: string;\n    isContentOverflowing: boolean;\n}\n\n/**\n * Text component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text\n */\nexport class Text extends AbstractPureComponent2<\n    TextProps & Omit<React.HTMLAttributes<HTMLElement>, \"title\">,\n    ITextState\n> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Text`;\n\n    public static defaultProps: Partial<TextProps> = {\n        ellipsize: false,\n    };\n\n    public state: ITextState = {\n        isContentOverflowing: false,\n        textContent: \"\",\n    };\n\n    private textRef: HTMLElement | null = null;\n\n    public componentDidMount() {\n        this.update();\n    }\n\n    public componentDidUpdate() {\n        this.update();\n    }\n\n    public render() {\n        const { children, className, ellipsize, tagName = \"div\", title, ...htmlProps } = this.props;\n        const classes = classNames(className, {\n            [Classes.TEXT_OVERFLOW_ELLIPSIS]: ellipsize,\n        });\n\n        return React.createElement(\n            tagName,\n            {\n                ...htmlProps,\n                className: classes,\n                ref: (ref: HTMLElement | null) => (this.textRef = ref),\n                title: title ?? (this.state.isContentOverflowing ? this.state.textContent : undefined),\n            },\n            children,\n        );\n    }\n\n    private update() {\n        if (this.textRef?.textContent == null) {\n            return;\n        }\n        const newState = {\n            isContentOverflowing: this.props.ellipsize! && this.textRef.scrollWidth > this.textRef.clientWidth,\n            textContent: this.textRef.textContent,\n        };\n        this.setState(newState);\n    }\n}\n"]}