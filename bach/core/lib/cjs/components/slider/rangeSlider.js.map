{"version":3,"file":"rangeSlider.js","sourceRoot":"","sources":["../../../../src/components/slider/rangeSlider.tsx"],"names":[],"mappings":";;;;AAgBA,qDAA+B;AAE/B,yCAA8D;AAC9D,oEAA8C;AAC9C,8CAAwD;AAExD,+CAA8D;AAI9D,IAAK,UAGJ;AAHD,WAAK,UAAU;IACX,6CAAS,CAAA;IACT,yCAAO,CAAA;AACX,CAAC,EAHI,UAAU,KAAV,UAAU,QAGd;AA4BD,MAAa,WAAY,SAAQ,+BAAwC;IAC9D,MAAM,CAAC,YAAY,GAAqB;QAC3C,GAAG,yBAAW,CAAC,kBAAkB;QACjC,MAAM,EAAE,eAAM,CAAC,OAAO;QACtB,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;KACjB,CAAC;IAEK,MAAM,CAAC,WAAW,GAAG,GAAG,0BAAkB,cAAc,CAAC;IAEzD,MAAM;QACT,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACxD,OAAO,CACH,oBAAC,yBAAW,OAAK,KAAK;YAClB,oBAAC,yBAAW,CAAC,MAAM,IACf,KAAK,EAAE,KAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAC/B,IAAI,EAAC,OAAO,EACZ,WAAW,EAAE,KAAK,CAAC,MAAM,EACzB,SAAS,EAAE,eAAe,EAAE,KAAK,GACnC;YACF,oBAAC,yBAAW,CAAC,MAAM,IAAC,KAAK,EAAE,KAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,IAAI,EAAC,KAAK,EAAC,SAAS,EAAE,eAAe,EAAE,GAAG,GAAI,CACvF,CACjB,CAAC;IACN,CAAC;IAES,aAAa,CAAC,KAAuB;QAC3C,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;QACxB,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;YACnF,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;SAClD;IACL,CAAC;;AA7BL,kCA8BC","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Intent } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { HandleHtmlProps } from \"./handleProps\";\nimport { ISliderBaseProps, MultiSlider } from \"./multiSlider\";\n\nexport type NumberRange = [number, number];\n\nenum RangeIndex {\n    START = 0,\n    END = 1,\n}\n\n// eslint-disable-next-line deprecation/deprecation\nexport type RangeSliderProps = IRangeSliderProps;\n/** @deprecated use RangeSliderProps */\nexport interface IRangeSliderProps extends ISliderBaseProps {\n    /**\n     * Range value of slider. Handles will be rendered at each position in the range.\n     *\n     * @default [0, 10]\n     */\n    value?: NumberRange;\n\n    /** Callback invoked when the range value changes. */\n    onChange?(value: NumberRange): void;\n\n    /** Callback invoked when a handle is released. */\n    onRelease?(value: NumberRange): void;\n\n    /** HTML props to apply to the slider Handles */\n    handleHtmlProps?: { start?: HandleHtmlProps; end?: HandleHtmlProps };\n}\n\n/**\n * Range slider component.\n *\n * @see https://blueprintjs.com/docs/#core/components/sliders.range-slider\n */\nexport class RangeSlider extends AbstractPureComponent2<RangeSliderProps> {\n    public static defaultProps: RangeSliderProps = {\n        ...MultiSlider.defaultSliderProps,\n        intent: Intent.PRIMARY,\n        value: [0, 10],\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.RangeSlider`;\n\n    public render() {\n        const { value, handleHtmlProps, ...props } = this.props;\n        return (\n            <MultiSlider {...props}>\n                <MultiSlider.Handle\n                    value={value![RangeIndex.START]}\n                    type=\"start\"\n                    intentAfter={props.intent}\n                    htmlProps={handleHtmlProps?.start}\n                />\n                <MultiSlider.Handle value={value![RangeIndex.END]} type=\"end\" htmlProps={handleHtmlProps?.end} />\n            </MultiSlider>\n        );\n    }\n\n    protected validateProps(props: RangeSliderProps) {\n        const { value } = props;\n        if (value == null || value[RangeIndex.START] == null || value[RangeIndex.END] == null) {\n            throw new Error(Errors.RANGESLIDER_NULL_VALUE);\n        }\n    }\n}\n"]}