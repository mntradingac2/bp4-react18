{"version":3,"file":"spinner.js","sourceRoot":"","sources":["../../../../src/components/spinner/spinner.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX, IntentProps, Props } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\";\n\nexport enum SpinnerSize {\n    SMALL = 20,\n    STANDARD = 50,\n    LARGE = 100,\n}\n\n// see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\nconst R = 45;\nconst SPINNER_TRACK = `M 50,50 m 0,-${R} a ${R},${R} 0 1 1 0,${R * 2} a ${R},${R} 0 1 1 0,-${R * 2}`;\n\n// unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\nconst PATH_LENGTH = 280;\n\nconst MIN_SIZE = 10;\nconst STROKE_WIDTH = 4;\nconst MIN_STROKE_WIDTH = 16;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type SpinnerProps = (ISpinnerProps & React.HTMLAttributes<any>) | (ISpinnerProps & React.SVGAttributes<any>);\n/** @deprecated use SpinnerProps */\nexport interface ISpinnerProps extends Props, IntentProps {\n    /**\n     * Width and height of the spinner in pixels. The size cannot be less than\n     * 10px.\n     *\n     * Constants are available for common sizes:\n     * - `SpinnerSize.SMALL = 20px`\n     * - `SpinnerSize.STANDARD = 50px`\n     * - `SpinnerSize.LARGE = 100px`\n     *\n     * @default SpinnerSize.STANDARD = 50\n     */\n    size?: number;\n\n    /**\n     * HTML tag for the two wrapper elements. If rendering a `<Spinner>` inside\n     * an `<svg>`, change this to an SVG element like `\"g\"`.\n     *\n     * @default \"div\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * A value between 0 and 1 (inclusive) representing how far along the operation is.\n     * Values below 0 or above 1 will be interpreted as 0 or 1 respectively.\n     * Omitting this prop will result in an \"indeterminate\" spinner where the head spins indefinitely.\n     */\n    value?: number;\n}\n\n/**\n * Spinner component.\n *\n * @see https://blueprintjs.com/docs/#core/components/spinner\n */\nexport class Spinner extends AbstractPureComponent2<SpinnerProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Spinner`;\n\n    public componentDidUpdate(prevProps: SpinnerProps) {\n        if (prevProps.value !== this.props.value) {\n            // IE/Edge: re-render after changing value to force SVG update\n            this.forceUpdate();\n        }\n    }\n\n    public render() {\n        const { className, intent, value, tagName = \"div\", ...htmlProps } = this.props;\n        const size = this.getSize();\n\n        const classes = classNames(\n            Classes.SPINNER,\n            Classes.intentClass(intent),\n            { [Classes.SPINNER_NO_SPIN]: value != null },\n            className,\n        );\n\n        // keep spinner track width consistent at all sizes (down to about 10px).\n        const strokeWidth = Math.min(MIN_STROKE_WIDTH, (STROKE_WIDTH * SpinnerSize.LARGE) / size);\n        const strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1));\n\n        // multiple DOM elements around SVG are necessary to properly isolate animation:\n        // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n        // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n        return React.createElement(\n            tagName,\n            {\n                \"aria-valuemax\": 100,\n                \"aria-valuemin\": 0,\n                \"aria-valuenow\": value === undefined ? undefined : value * 100,\n                className: classes,\n                role: \"progressbar\",\n                ...htmlProps,\n            },\n            React.createElement(\n                tagName,\n                { className: Classes.SPINNER_ANIMATION },\n                <svg\n                    width={size}\n                    height={size}\n                    strokeWidth={strokeWidth.toFixed(2)}\n                    viewBox={this.getViewBox(strokeWidth)}\n                >\n                    <path className={Classes.SPINNER_TRACK} d={SPINNER_TRACK} />\n                    <path\n                        className={Classes.SPINNER_HEAD}\n                        d={SPINNER_TRACK}\n                        pathLength={PATH_LENGTH}\n                        strokeDasharray={`${PATH_LENGTH} ${PATH_LENGTH}`}\n                        strokeDashoffset={strokeOffset}\n                    />\n                </svg>,\n            ),\n        );\n    }\n\n    protected validateProps({ className = \"\", size }: SpinnerProps) {\n        if (size != null && (className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0)) {\n            console.warn(SPINNER_WARN_CLASSES_SIZE);\n        }\n    }\n\n    /**\n     * Resolve size to a pixel value.\n     * Size can be set by className, props, default, or minimum constant.\n     */\n    private getSize() {\n        const { className = \"\", size } = this.props;\n        if (size == null) {\n            // allow Classes constants to determine default size.\n            if (className.indexOf(Classes.SMALL) >= 0) {\n                return SpinnerSize.SMALL;\n            } else if (className.indexOf(Classes.LARGE) >= 0) {\n                return SpinnerSize.LARGE;\n            }\n            return SpinnerSize.STANDARD;\n        }\n        return Math.max(MIN_SIZE, size);\n    }\n\n    /** Compute viewbox such that stroked track sits exactly at edge of image frame. */\n    private getViewBox(strokeWidth: number) {\n        const radius = R + strokeWidth / 2;\n        const viewBoxX = (50 - radius).toFixed(2);\n        const viewBoxWidth = (radius * 2).toFixed(2);\n        return `${viewBoxX} ${viewBoxX} ${viewBoxWidth} ${viewBoxWidth}`;\n    }\n}\n"]}