{"version":3,"file":"panelStack2.js","sourceRoot":"","sources":["../../../../src/components/panel-stack2/panelStack2.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { Classes, DISPLAYNAME_PREFIX, Props } from \"../../common\";\nimport { Panel } from \"./panelTypes\";\nimport { PanelView2 } from \"./panelView2\";\n\n/**\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface PanelStack2Props<T extends Panel<object>> extends Props {\n    /**\n     * The initial panel to show on mount. This panel cannot be removed from the\n     * stack and will appear when the stack is empty.\n     * This prop is only used in uncontrolled mode and is thus mutually\n     * exclusive with the `stack` prop.\n     */\n    initialPanel?: T;\n\n    /**\n     * Callback invoked when the user presses the back button or a panel\n     * closes itself with a `closePanel()` action.\n     */\n    onClose?: (removedPanel: T) => void;\n\n    /**\n     * Callback invoked when a panel opens a new panel with an `openPanel(panel)`\n     * action.\n     */\n    onOpen?: (addedPanel: T) => void;\n\n    /**\n     * If false, PanelStack will render all panels in the stack to the DOM, allowing their\n     * React component trees to maintain state as a user navigates through the stack.\n     * Panels other than the currently active one will be invisible.\n     *\n     * @default true\n     */\n    renderActivePanelOnly?: boolean;\n\n    /**\n     * Whether to show the header with the \"back\" button in each panel.\n     *\n     * @default true\n     */\n    showPanelHeader?: boolean;\n\n    /**\n     * The full stack of panels in controlled mode. The last panel in the stack\n     * will be displayed.\n     */\n    stack?: readonly T[];\n}\n\ninterface PanelStack2Component {\n    /**\n     * @template T type union of all possible panels in this stack\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    <T extends Panel<object>>(props: PanelStack2Props<T>): JSX.Element | null;\n    displayName: string;\n}\n\n/**\n * Panel stack (v2) component.\n *\n * @see https://blueprintjs.com/docs/#core/components/panel-stack2\n * @template T type union of all possible panels in this stack\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const PanelStack2: PanelStack2Component = <T extends Panel<object>>(props: PanelStack2Props<T>) => {\n    const { renderActivePanelOnly = true, showPanelHeader = true, stack: propsStack } = props;\n    const [direction, setDirection] = React.useState(\"push\");\n\n    const [localStack, setLocalStack] = React.useState<T[]>(\n        props.initialPanel !== undefined ? [props.initialPanel] : [],\n    );\n    const stack = React.useMemo(\n        () => (propsStack != null ? propsStack.slice().reverse() : localStack),\n        [localStack, propsStack],\n    );\n    const stackLength = React.useRef<number>(stack.length);\n    React.useEffect(() => {\n        if (stack.length !== stackLength.current) {\n            // Adjust the direction in case the stack size has changed, controlled or uncontrolled\n            setDirection(stack.length - stackLength.current < 0 ? \"pop\" : \"push\");\n        }\n        stackLength.current = stack.length;\n    }, [stack]);\n\n    const handlePanelOpen = React.useCallback(\n        (panel: T) => {\n            props.onOpen?.(panel);\n            if (props.stack == null) {\n                setLocalStack(prevStack => [panel, ...prevStack]);\n            }\n        },\n        [props.onOpen],\n    );\n    const handlePanelClose = React.useCallback(\n        (panel: T) => {\n            // only remove this panel if it is at the top and not the only one.\n            if (stack[0] !== panel || stack.length <= 1) {\n                return;\n            }\n            props.onClose?.(panel);\n            if (props.stack == null) {\n                setLocalStack(prevStack => prevStack.slice(1));\n            }\n        },\n        [stack, props.onClose],\n    );\n\n    // early return, after all hooks are called\n    if (stack.length === 0) {\n        return null;\n    }\n\n    const panelsToRender = renderActivePanelOnly ? [stack[0]] : stack;\n    const panels = panelsToRender\n        .map((panel: T, index: number) => {\n            // With renderActivePanelOnly={false} we would keep all the CSSTransitions rendered,\n            // therefore they would not trigger the \"enter\" transition event as they were entered.\n            // To force the enter event, we want to change the key, but stack.length is not enough\n            // and a single panel should not rerender as long as it's hidden.\n            // This key contains two parts: first one, stack.length - index is constant (and unique) for each panel,\n            // second one, active changes only when the panel becomes or stops being active.\n            const layer = stack.length - index;\n            const key = renderActivePanelOnly ? stack.length : layer;\n\n            return (\n                <CSSTransition classNames={Classes.PANEL_STACK2} key={key} timeout={400}>\n                    <PanelView2<T>\n                        onClose={handlePanelClose}\n                        onOpen={handlePanelOpen}\n                        panel={panel}\n                        previousPanel={stack[index + 1]}\n                        showHeader={showPanelHeader}\n                    />\n                </CSSTransition>\n            );\n        })\n        .reverse();\n\n    const classes = classNames(Classes.PANEL_STACK2, `${Classes.PANEL_STACK2}-${direction}`, props.className);\n\n    return (\n        <TransitionGroup className={classes} component=\"div\">\n            {panels}\n        </TransitionGroup>\n    );\n};\nPanelStack2.displayName = `${DISPLAYNAME_PREFIX}.PanelStack2`;\n"]}