{"version":3,"file":"jsUtils.js","sourceRoot":"","sources":["../../../../src/common/utils/jsUtils.ts"],"names":[],"mappings":";;;AAgBA,sCAA0C;AAM1C,SAAgB,SAAS,CAAC,GAAW;IACjC,OAAO,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,GAAG,CAAC;AACzF,CAAC;AAFD,8BAEC;AAQD,SAAgB,kBAAkB,CAAC,IAAW,EAAE,EAAE,IAAW,EAAE;IAC3D,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;AAC/B,CAAC;AAFD,gDAEC;AAOD,SAAgB,WAAW,CAAC,CAAS,EAAE,CAAS,EAAE,SAAS,GAAG,OAAO;IACjE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC;AACxC,CAAC;AAFD,kCAEC;AAMD,SAAgB,KAAK,CAAC,GAAW,EAAE,GAAW,EAAE,GAAW;IACvD,IAAI,GAAG,IAAI,IAAI,EAAE;QACb,OAAO,GAAG,CAAC;KACd;IACD,IAAI,GAAG,GAAG,GAAG,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,sBAAa,CAAC,CAAC;KAClC;IACD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AAC7C,CAAC;AARD,sBAQC;AAGD,SAAgB,kBAAkB,CAAC,GAAW;IAC1C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAChB,OAAO,CAAC,CAAC;KACZ;IACD,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE;QACpC,CAAC,IAAI,EAAE,CAAC;QACR,CAAC,EAAE,CAAC;KACP;IACD,OAAO,CAAC,CAAC;AACb,CAAC;AAXD,gDAWC;AAED,MAAM,uBAAuB,GAAG,IAAI,GAAG,EAAkB,CAAC;AAE1D,SAAgB,QAAQ,CAAC,SAAiB;IACtC,MAAM,QAAQ,GAAG,uBAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7D,uBAAuB,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;IACrD,OAAO,GAAG,SAAS,IAAI,QAAQ,EAAE,CAAC;AACtC,CAAC;AAJD,4BAIC","sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CLAMP_MIN_MAX } from \"../errors\";\n\n// only accessible within this file, so use `Utils.isNodeEnv(env)` from the outside.\ndeclare let process: { env: any };\n\n/** Returns whether `process.env.NODE_ENV` exists and equals `env`. */\nexport function isNodeEnv(env: string) {\n    return typeof process !== \"undefined\" && process.env && process.env.NODE_ENV === env;\n}\n\n/**\n * Returns the difference in length between two arrays. A `null` argument is\n * considered an empty list. The return value will be positive if `a` is longer\n * than `b`, negative if the opposite is true, and zero if their lengths are\n * equal.\n */\nexport function arrayLengthCompare(a: any[] = [], b: any[] = []) {\n    return a.length - b.length;\n}\n\n/**\n * Returns true if the two numbers are within the given tolerance of each other.\n * This is useful to correct for floating point precision issues, less useful\n * for integers.\n */\nexport function approxEqual(a: number, b: number, tolerance = 0.00001) {\n    return Math.abs(a - b) <= tolerance;\n}\n\n/**\n * Clamps the given number between min and max values. Returns value if within\n * range, or closest bound.\n */\nexport function clamp(val: number, min: number, max: number) {\n    if (val == null) {\n        return val;\n    }\n    if (max < min) {\n        throw new Error(CLAMP_MIN_MAX);\n    }\n    return Math.min(Math.max(val, min), max);\n}\n\n/** Returns the number of decimal places in the given number. */\nexport function countDecimalPlaces(num: number) {\n    if (!isFinite(num)) {\n        return 0;\n    }\n    let e = 1;\n    let p = 0;\n    while (Math.round(num * e) / e !== num) {\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n\nconst uniqueCountForNamespace = new Map<string, number>();\n/** Generate a unique ID within a given namespace, using a simple counter-based implementation to avoid collisions. */\nexport function uniqueId(namespace: string) {\n    const curCount = uniqueCountForNamespace.get(namespace) ?? 0;\n    uniqueCountForNamespace.set(namespace, curCount + 1);\n    return `${namespace}-${curCount}`;\n}\n"]}