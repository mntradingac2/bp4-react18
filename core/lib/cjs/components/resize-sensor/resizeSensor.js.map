{"version":3,"file":"resizeSensor.js","sourceRoot":"","sources":["../../../../src/components/resize-sensor/resizeSensor.tsx"],"names":[],"mappings":";;;;AAgBA,6DAA8E;AAC9E,qDAA+B;AAC/B,yCAAwC;AAExC,yCAAsD;AACtD,8CAAwD;AA0CxD,MAAa,YAAa,SAAQ,+BAAyC;IAChE,MAAM,CAAC,WAAW,GAAG,GAAG,0BAAkB,eAAe,CAAC;IAEzD,OAAO,GAAmB,IAAI,CAAC;IAE/B,QAAQ,GAAG,IAAI,gCAAc,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAE1E,MAAM;QAET,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAEM,iBAAiB;QACpB,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAEM,kBAAkB,CAAC,SAA4B;QAClD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,SAAS,CAAC,cAAc,CAAC,CAAC;IAChF,CAAC;IAEM,oBAAoB;QACvB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IAOO,cAAc,CAAC,KAAK,GAAG,KAAK;QAChC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,IAAI,CAAC,CAAC,OAAO,YAAY,OAAO,CAAC,EAAE;YAE/B,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;YAC3B,OAAO;SACV;QAED,IAAI,OAAO,KAAK,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,EAAE;YAEpC,OAAO;SACV;aAAM;YAEH,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;YAE3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SAC1B;QAGD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAE/B,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;YAC3B,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC;YACnC,OAAO,MAAM,IAAI,IAAI,EAAE;gBACnB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAC9B,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC;aACjC;SACJ;IACL,CAAC;IAEO,UAAU;QACd,IAAI;YAMA,OAAO,IAAA,uBAAW,EAAC,IAAI,CAAC,CAAC;SAC5B;QAAC,MAAM;YAEJ,OAAO,IAAI,CAAC;SACf;IACL,CAAC;;AAxEL,oCAyEC","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResizeObserver, ResizeObserverEntry } from \"@juggle/resize-observer\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\n\nimport { AbstractPureComponent2 } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type ResizeSensorProps = IResizeSensorProps;\n/** @deprecated use ResizeSensorProps */\nexport interface IResizeSensorProps {\n    /** Contents to observe for size changes. */\n    children: React.ReactNode;\n\n    /**\n     * Callback invoked when the wrapped element resizes.\n     *\n     * The `entries` array contains an entry for each observed element. In the\n     * default case (no `observeParents`), the array will contain only one\n     * element: the single child of the `ResizeSensor`.\n     *\n     * Note that this method is called _asynchronously_ after a resize is\n     * detected and typically it will be called no more than once per frame.\n     */\n    onResize: (entries: ResizeObserverEntry[]) => void;\n\n    /**\n     * If `true`, all parent DOM elements of the container will also be\n     * observed for size changes. The array of entries passed to `onResize`\n     * will now contain an entry for each parent element up to the root of the\n     * document.\n     *\n     * Only enable this prop if a parent element resizes in a way that does\n     * not also cause the child element to resize.\n     *\n     * @default false\n     */\n    observeParents?: boolean;\n}\n\n/**\n * Resize sensor component.\n *\n * It requires a single DOM element child and will error otherwise.\n *\n * @see https://blueprintjs.com/docs/#core/components/resize-sensor\n **/\nexport class ResizeSensor extends AbstractPureComponent2<ResizeSensorProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.ResizeSensor`;\n\n    private element: Element | null = null;\n\n    private observer = new ResizeObserver(entries => this.props.onResize?.(entries));\n\n    public render(): React.ReactNode {\n        // pass-through render of single child\n        return React.Children.only(this.props.children);\n    }\n\n    public componentDidMount() {\n        this.observeElement();\n    }\n\n    public componentDidUpdate(prevProps: ResizeSensorProps) {\n        this.observeElement(this.props.observeParents !== prevProps.observeParents);\n    }\n\n    public componentWillUnmount() {\n        this.observer.disconnect();\n        this.element = null;\n    }\n\n    /**\n     * Observe the DOM element, if defined and different from the currently\n     * observed element. Pass `force` argument to skip element checks and always\n     * re-observe.\n     */\n    private observeElement(force = false) {\n        const element = this.getElement();\n        if (!(element instanceof Element)) {\n            // stop everything if not defined\n            this.observer.disconnect();\n            return;\n        }\n\n        if (element === this.element && !force) {\n            // quit if given same element -- nothing to update (unless forced)\n            return;\n        } else {\n            // clear observer list if new element\n            this.observer.disconnect();\n            // remember element reference for next time\n            this.element = element;\n        }\n\n        // observer callback is invoked immediately when observing new elements\n        this.observer.observe(element);\n\n        if (this.props.observeParents) {\n            let parent = element.parentElement;\n            while (parent != null) {\n                this.observer.observe(parent);\n                parent = parent.parentElement;\n            }\n        }\n    }\n\n    private getElement() {\n        try {\n            // using findDOMNode for two reasons:\n            // 1. cloning to insert a ref is unwieldy and not performant.\n            // 2. ensure that we resolve to an actual DOM node (instead of any JSX ref instance).\n            // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n            /* eslint-disable-next-line react/no-find-dom-node */\n            return findDOMNode(this);\n        } catch {\n            // swallow error if findDOMNode is run on unmounted component.\n            return null;\n        }\n    }\n}\n"]}