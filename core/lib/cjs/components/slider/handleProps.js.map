{"version":3,"file":"handleProps.js","sourceRoot":"","sources":["../../../../src/components/slider/handleProps.tsx"],"names":[],"mappings":";;;AAoBa,QAAA,UAAU,GAAG;IAEtB,IAAI,EAAE,MAAgB;IAGtB,KAAK,EAAE,OAAkB;IAGzB,GAAG,EAAE,KAAc;CACtB,CAAC;AAIW,QAAA,qBAAqB,GAAG;IAEjC,IAAI,EAAE,MAAgB;IAGtB,IAAI,EAAE,MAAgB;IAMtB,IAAI,EAAE,MAAgB;CACzB,CAAC","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { Intent, Props } from \"../../common\";\n\nexport const HandleType = {\n    /** A full handle appears as a small square. */\n    FULL: \"full\" as \"full\",\n\n    /** A start handle appears as the left or top half of a square. */\n    START: \"start\" as \"start\",\n\n    /** An end handle appears as the right or bottom half of a square. */\n    END: \"end\" as \"end\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type HandleType = (typeof HandleType)[keyof typeof HandleType];\n\nexport const HandleInteractionKind = {\n    /** Locked handles prevent other handles from being dragged past then. */\n    LOCK: \"lock\" as \"lock\",\n\n    /** Push handles move overlapping handles with them as they are dragged. */\n    PUSH: \"push\" as \"push\",\n\n    /**\n     * Handles marked \"none\" are not interactive and do not appear in the UI.\n     * They serve only to break the track into subsections that can be colored separately.\n     */\n    NONE: \"none\" as \"none\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type HandleInteractionKind = (typeof HandleInteractionKind)[keyof typeof HandleInteractionKind];\n\nexport type HandleHtmlProps = Pick<React.HTMLProps<HTMLSpanElement>, \"aria-label\" | \"aria-labelledby\">;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type HandleProps = IHandleProps;\n/** @deprecated use HandleProps */\nexport interface IHandleProps extends Props {\n    /** Numeric value of this handle. */\n    value: number;\n\n    /** Intent for the track segment immediately after this handle, taking priority over `intentBefore`. */\n    intentAfter?: Intent;\n\n    /** Intent for the track segment immediately before this handle. */\n    intentBefore?: Intent;\n\n    /** Style to use for the track segment immediately after this handle, taking priority over `trackStyleBefore`. */\n    trackStyleAfter?: React.CSSProperties;\n\n    /** Style to use for the track segment immediately before this handle */\n    trackStyleBefore?: React.CSSProperties;\n\n    /**\n     * How this handle interacts with other handles.\n     *\n     * @default \"lock\"\n     */\n    interactionKind?: HandleInteractionKind;\n\n    /**\n     * Callback invoked when this handle's value is changed due to a drag\n     * interaction. Note that \"push\" interactions can cause multiple handles to\n     * update at the same time.\n     */\n    onChange?: (newValue: number) => void;\n\n    /** Callback invoked when this handle is released (the end of a drag interaction). */\n    onRelease?: (newValue: number) => void;\n\n    /**\n     * Handle appearance type.\n     *\n     * @default \"full\"\n     */\n    type?: HandleType;\n\n    /**\n     * A limited subset of HTML props to apply to the rendered `<span>` element.\n     */\n    htmlProps?: HandleHtmlProps;\n}\n"]}