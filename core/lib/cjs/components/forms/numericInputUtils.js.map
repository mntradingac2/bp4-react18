{"version":3,"file":"numericInputUtils.js","sourceRoot":"","sources":["../../../../src/components/forms/numericInputUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { clamp } from \"../../common/utils\";\n\n/** Returns the `decimal` number separator based on locale */\nfunction getDecimalSeparator(locale: string) {\n    const testNumber = 1.9;\n    const testText = testNumber.toLocaleString(locale);\n    const one = (1).toLocaleString(locale);\n    const nine = (9).toLocaleString(locale);\n    const pattern = `${one}(.+)${nine}`;\n\n    const result = new RegExp(pattern).exec(testText);\n\n    return (result && result[1]) || \".\";\n}\n\nexport function toLocaleString(num: number, locale: string = \"en-US\") {\n    return sanitizeNumericInput(num.toLocaleString(locale), locale);\n}\n\nexport function clampValue(value: number, min?: number, max?: number) {\n    // defaultProps won't work if the user passes in null, so just default\n    // to +/- infinity here instead, as a catch-all.\n    const adjustedMin = min != null ? min : -Infinity;\n    const adjustedMax = max != null ? max : Infinity;\n    return clamp(value, adjustedMin, adjustedMax);\n}\n\nexport function getValueOrEmptyValue(value: number | string = \"\") {\n    return value.toString();\n}\n\n/** Transform the localized character (ex. \"\") to a javascript recognizable string number (ex. \"10.99\")  */\nfunction transformLocalizedNumberToStringNumber(character: string, locale: string) {\n    const charactersMap = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(value => value.toLocaleString(locale));\n    const jsNumber = charactersMap.indexOf(character);\n\n    if (jsNumber !== -1) {\n        return jsNumber;\n    } else {\n        return character;\n    }\n}\n\n/** Transforms the localized number (ex. \"10,99\") to a javascript recognizable string number (ex. \"10.99\")  */\nexport function parseStringToStringNumber(value: number | string, locale: string | undefined): string {\n    const valueAsString = \"\" + value;\n    if (parseFloat(valueAsString).toString() === value.toString()) {\n        return value.toString();\n    }\n\n    if (locale !== undefined) {\n        const decimalSeparator = getDecimalSeparator(locale);\n        const sanitizedString = sanitizeNumericInput(valueAsString, locale);\n\n        return sanitizedString\n            .split(\"\")\n            .map(character => transformLocalizedNumberToStringNumber(character, locale))\n            .join(\"\")\n            .replace(decimalSeparator, \".\");\n    }\n\n    return value.toString();\n}\n\n/** Returns `true` if the string represents a valid numeric value, like \"1e6\". */\nexport function isValueNumeric(value: string, locale: string | undefined) {\n    // checking if a string is numeric in Typescript is a big pain, because\n    // we can't simply toss a string parameter to isFinite. below is the\n    // essential approach that jQuery uses, which involves subtracting a\n    // parsed numeric value from the string representation of the value. we\n    // need to cast the value to the `any` type to allow this operation\n    // between dissimilar types.\n    const stringToStringNumber = parseStringToStringNumber(value, locale);\n    return value != null && (stringToStringNumber as any) - parseFloat(stringToStringNumber) + 1 >= 0;\n}\n\nexport function isValidNumericKeyboardEvent(e: React.KeyboardEvent, locale: string | undefined) {\n    // unit tests may not include e.key. don't bother disabling those events.\n    if (e.key == null) {\n        return true;\n    }\n\n    // allow modified key strokes that may involve letters and other\n    // non-numeric/invalid characters (Cmd + A, Cmd + C, Cmd + V, Cmd + X).\n    if (e.ctrlKey || e.altKey || e.metaKey) {\n        return true;\n    }\n\n    // keys that print a single character when pressed have a `key` name of\n    // length 1. every other key has a longer `key` name (e.g. \"Backspace\",\n    // \"ArrowUp\", \"Shift\"). since none of those keys can print a character\n    // to the field--and since they may have important native behaviors\n    // beyond printing a character--we don't want to disable their effects.\n    const isSingleCharKey = e.key.length === 1;\n    if (!isSingleCharKey) {\n        return true;\n    }\n\n    // now we can simply check that the single character that wants to be printed\n    // is a floating-point number character that we're allowed to print.\n    return isFloatingPointNumericCharacter(e.key, locale);\n}\n\n/**\n * A regex that matches a string of length 1 (i.e. a standalone character)\n * if and only if it is a floating-point number character as defined by W3C:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n *\n * Floating-point number characters are the only characters that can be\n * printed within a default input[type=\"number\"]. This component should\n * behave the same way when this.props.allowNumericCharactersOnly = true.\n * See here for the input[type=\"number\"].value spec:\n * https://www.w3.org/TR/2012/WD-html-markup-20120329/input.number.html#input.number.attrs.value\n */\nfunction isFloatingPointNumericCharacter(character: string, locale: string | undefined) {\n    if (locale !== undefined) {\n        const decimalSeparator = getDecimalSeparator(locale).replace(\".\", \"\\\\.\");\n        const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(value => value.toLocaleString(locale)).join(\"\");\n        const localeFloatingPointNumericCharacterRegex = new RegExp(\n            \"^[Ee\" + numbers + \"\\\\+\\\\-\" + decimalSeparator + \"]$\",\n        );\n\n        return localeFloatingPointNumericCharacterRegex.test(character);\n    } else {\n        const floatingPointNumericCharacterRegex = /^[Ee0-9\\+\\-\\.]$/;\n\n        return floatingPointNumericCharacterRegex.test(character);\n    }\n}\n\n/**\n * Round the value to have _up to_ the specified maximum precision.\n *\n * This differs from `toFixed(5)` in that trailing zeroes are not added on\n * more precise values, resulting in shorter strings.\n */\nexport function toMaxPrecision(value: number, maxPrecision: number) {\n    // round the value to have the specified maximum precision (toFixed is the wrong choice,\n    // because it would show trailing zeros in the decimal part out to the specified precision)\n    // source: http://stackoverflow.com/a/18358056/5199574\n    const scaleFactor = Math.pow(10, maxPrecision);\n    return Math.round(value * scaleFactor) / scaleFactor;\n}\n\n/**\n * Convert Japanese full-width numbers, e.g. '５', to ASCII, e.g. '5'\n * This should be called before performing any other numeric string input validation.\n */\nfunction convertFullWidthNumbersToAscii(value: string) {\n    return value.replace(/[\\uFF10-\\uFF19]/g, m => String.fromCharCode(m.charCodeAt(0) - 0xfee0));\n}\n\n/**\n * Convert full-width (Japanese) numbers to ASCII, and strip all characters that are not valid floating-point numeric characters\n */\nexport function sanitizeNumericInput(value: string, locale: string | undefined) {\n    const valueChars = convertFullWidthNumbersToAscii(value).split(\"\");\n    const sanitizedValueChars = valueChars.filter(valueChar => isFloatingPointNumericCharacter(valueChar, locale));\n\n    return sanitizedValueChars.join(\"\");\n}\n"]}