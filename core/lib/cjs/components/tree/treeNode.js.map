{"version":3,"file":"treeNode.js","sourceRoot":"","sources":["../../../../src/components/tree/treeNode.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX, MaybeElement, Props } from \"../../common/props\";\nimport { Collapse } from \"../collapse/collapse\";\nimport { Icon, IconName } from \"../icon/icon\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types, deprecation/deprecation\nexport type TreeNodeInfo<T = {}> = ITreeNode<T>;\n/** @deprecated use TreeNodeInfo */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface ITreeNode<T = {}> extends Props {\n    /**\n     * Child tree nodes of this node.\n     */\n    childNodes?: Array<TreeNodeInfo<T>>;\n\n    /**\n     * Whether this tree node is non-interactive. Enabling this prop will ignore\n     * mouse event handlers (in particular click, down, enter, leave).\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the caret to expand/collapse a node should be shown.\n     * If not specified, this will be true if the node has children and false otherwise.\n     */\n    hasCaret?: boolean;\n\n    /**\n     * The name of a Blueprint icon (or an icon element) to render next to the node's label.\n     */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * A unique identifier for the node.\n     */\n    id: string | number;\n\n    /**\n     */\n    isExpanded?: boolean;\n\n    /**\n     * Whether this node is selected.\n     *\n     * @default false\n     */\n    isSelected?: boolean;\n\n    /**\n     * The main label for the node.\n     */\n    label: string | JSX.Element;\n\n    /**\n     * A secondary label/component that is displayed at the right side of the node.\n     */\n    secondaryLabel?: string | MaybeElement;\n\n    /**\n     * An optional custom user object to associate with the node.\n     * This property can then be used in the `onClick`, `onContextMenu` and `onDoubleClick`\n     * event handlers for doing custom logic per node.\n     */\n    nodeData?: T;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TreeNodeProps<T = {}> = ITreeNodeProps<T>;\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface ITreeNodeProps<T = {}> extends TreeNodeInfo<T> {\n    children?: React.ReactNode;\n    contentRef?: (node: TreeNode<T>, element: HTMLDivElement | null) => void;\n    depth: number;\n    key?: string | number;\n    onClick?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    onCollapse?: (node: TreeNode<T>, e: React.MouseEvent<HTMLSpanElement>) => void;\n    onContextMenu?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    onDoubleClick?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    onExpand?: (node: TreeNode<T>, e: React.MouseEvent<HTMLSpanElement>) => void;\n    onMouseEnter?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    onMouseLeave?: (node: TreeNode<T>, e: React.MouseEvent<HTMLDivElement>) => void;\n    path: number[];\n}\n\n/**\n * Tree node component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tree.tree-node\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class TreeNode<T = {}> extends React.Component<ITreeNodeProps<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.TreeNode`;\n\n    /** @deprecated no longer necessary now that the TypeScript parser supports type arguments on JSX element tags */\n    public static ofType<U>() {\n        return TreeNode as new (props: ITreeNodeProps<U>) => TreeNode<U>;\n    }\n\n    public render() {\n        const { children, className, disabled, icon, isExpanded, isSelected, label } = this.props;\n        const classes = classNames(\n            Classes.TREE_NODE,\n            {\n                [Classes.DISABLED]: disabled,\n                [Classes.TREE_NODE_SELECTED]: isSelected,\n                [Classes.TREE_NODE_EXPANDED]: isExpanded,\n            },\n            className,\n        );\n\n        const contentClasses = classNames(\n            Classes.TREE_NODE_CONTENT,\n            `${Classes.TREE_NODE_CONTENT}-${this.props.depth}`,\n        );\n\n        const eventHandlers =\n            disabled === true\n                ? {}\n                : {\n                      onClick: this.handleClick,\n                      onContextMenu: this.handleContextMenu,\n                      onDoubleClick: this.handleDoubleClick,\n                      onMouseEnter: this.handleMouseEnter,\n                      onMouseLeave: this.handleMouseLeave,\n                  };\n\n        return (\n            <li className={classes}>\n                <div className={contentClasses} ref={this.handleContentRef} {...eventHandlers}>\n                    {this.maybeRenderCaret()}\n                    <Icon className={Classes.TREE_NODE_ICON} icon={icon} aria-hidden={true} tabIndex={-1} />\n                    <span className={Classes.TREE_NODE_LABEL}>{label}</span>\n                    {this.maybeRenderSecondaryLabel()}\n                </div>\n                <Collapse isOpen={isExpanded}>{children}</Collapse>\n            </li>\n        );\n    }\n\n    private maybeRenderCaret() {\n        const { children, isExpanded, disabled, hasCaret = React.Children.count(children) > 0 } = this.props;\n        if (hasCaret) {\n            const caretClasses = classNames(\n                Classes.TREE_NODE_CARET,\n                isExpanded ? Classes.TREE_NODE_CARET_OPEN : Classes.TREE_NODE_CARET_CLOSED,\n            );\n            const onClick = disabled === true ? undefined : this.handleCaretClick;\n            return (\n                <Icon\n                    title={isExpanded ? \"Collapse group\" : \"Expand group\"}\n                    className={caretClasses}\n                    onClick={onClick}\n                    icon={\"chevron-right\"}\n                />\n            );\n        }\n        return <span className={Classes.TREE_NODE_CARET_NONE} />;\n    }\n\n    private maybeRenderSecondaryLabel() {\n        if (this.props.secondaryLabel != null) {\n            return <span className={Classes.TREE_NODE_SECONDARY_LABEL}>{this.props.secondaryLabel}</span>;\n        } else {\n            return undefined;\n        }\n    }\n\n    private handleCaretClick = (e: React.MouseEvent<HTMLElement>) => {\n        e.stopPropagation();\n        const { isExpanded, onCollapse, onExpand } = this.props;\n        (isExpanded ? onCollapse : onExpand)?.(this, e);\n    };\n\n    private handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onClick?.(this, e);\n    };\n\n    private handleContentRef = (element: HTMLDivElement | null) => {\n        this.props.contentRef?.(this, element);\n    };\n\n    private handleContextMenu = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onContextMenu?.(this, e);\n    };\n\n    private handleDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onDoubleClick?.(this, e);\n    };\n\n    private handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onMouseEnter?.(this, e);\n    };\n\n    private handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n        this.props.onMouseLeave?.(this, e);\n    };\n}\n"]}