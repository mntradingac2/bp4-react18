{"version":3,"file":"panelView2.js","sourceRoot":"","sources":["../../../../src/components/panel-stack2/panelView2.tsx"],"names":[],"mappings":";;;;AAgBA,qDAA+B;AAE/B,yCAA2D;AAC3D,+CAA2C;AAC3C,uCAAoC;AAkC7B,MAAM,UAAU,GAAwB,CAA0B,KAAyB,EAAE,EAAE;IAClG,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAEtG,MAAM,eAAe,GACjB,KAAK,CAAC,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CACvC,oBAAC,gBAAM,kBACQ,MAAM,EACjB,SAAS,EAAE,gBAAO,CAAC,uBAAuB,EAC1C,IAAI,EAAC,cAAc,EACnB,OAAO,EAAE,IAAI,EACb,OAAO,EAAE,WAAW,EACpB,KAAK,EAAE,IAAI,EACX,IAAI,EAAE,KAAK,CAAC,aAAa,CAAC,KAAK,EAC/B,KAAK,EAAE,KAAK,CAAC,aAAa,CAAC,SAAS,GACtC,CACL,CAAC;IAKN,MAAM,YAAY,GAAa,KAAK,CAAC,OAAO,CACxC,GAAG,EAAE,CAAC,GAAG,EAAE,CAKP,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC;QACpB,UAAU,EAAE,WAAW;QACvB,SAAS,EAAE,KAAK,CAAC,MAAM;QACvB,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK;KACN,CAAC,EACvB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAC9B,CAAC;IAEF,OAAO,CACH,6BAAK,SAAS,EAAE,gBAAO,CAAC,iBAAiB;QACpC,KAAK,CAAC,UAAU,IAAI,CACjB,6BAAK,SAAS,EAAE,gBAAO,CAAC,mBAAmB;YAEvC,kCAAO,eAAe,CAAQ;YAC9B,oBAAC,WAAI,IAAC,SAAS,EAAE,gBAAO,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,SAAS,IAC1E,KAAK,CAAC,KAAK,CAAC,KAAK,CACf;YACP,iCAAQ,CACN,CACT;QACD,oBAAC,YAAY,OAAG,CACd,CACT,CAAC;AACN,CAAC,CAAC;AAjDW,QAAA,UAAU,cAiDrB;AACF,kBAAU,CAAC,WAAW,GAAG,GAAG,2BAAkB,aAAa,CAAC","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { Button } from \"../button/buttons\";\nimport { Text } from \"../text/text\";\nimport { Panel, PanelProps } from \"./panelTypes\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface PanelView2Props<T extends Panel<object>> {\n    /**\n     * Callback invoked when the user presses the back button or a panel invokes\n     * the `closePanel()` injected prop method.\n     */\n    onClose: (removedPanel: T) => void;\n\n    /**\n     * Callback invoked when a panel invokes the `openPanel(panel)` injected\n     * prop method.\n     */\n    onOpen: (addedPanel: T) => void;\n\n    /** The panel to be displayed. */\n    panel: T;\n\n    /** The previous panel in the stack, for rendering the \"back\" button. */\n    previousPanel?: T;\n\n    /** Whether to show the header with the \"back\" button. */\n    showHeader: boolean;\n}\n\ninterface PanelView2Component {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    <T extends Panel<object>>(props: PanelView2Props<T>): JSX.Element | null;\n    displayName: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const PanelView2: PanelView2Component = <T extends Panel<object>>(props: PanelView2Props<T>) => {\n    const handleClose = React.useCallback(() => props.onClose(props.panel), [props.onClose, props.panel]);\n\n    const maybeBackButton =\n        props.previousPanel === undefined ? null : (\n            <Button\n                aria-label=\"Back\"\n                className={Classes.PANEL_STACK_HEADER_BACK}\n                icon=\"chevron-left\"\n                minimal={true}\n                onClick={handleClose}\n                small={true}\n                text={props.previousPanel.title}\n                title={props.previousPanel.htmlTitle}\n            />\n        );\n\n    // `props.panel.renderPanel` is simply a function that returns a JSX.Element. It may be an FC which\n    // uses hooks. In order to avoid React errors due to inconsistent hook calls, we must encapsulate\n    // those hooks with their own lifecycle through a very simple wrapper component.\n    const PanelWrapper: React.FC = React.useMemo(\n        () => () =>\n            // N.B. A type cast is required because of error TS2345, where technically `panel.props` could be\n            // instantiated with a type unrelated to our generic constraint `T` here. We know\n            // we're sending the right values here though, and it makes the consumer API for this\n            // component type safe, so it's ok to do this...\n            props.panel.renderPanel({\n                closePanel: handleClose,\n                openPanel: props.onOpen,\n                ...props.panel.props,\n            } as PanelProps<T>),\n        [props.panel, props.onOpen],\n    );\n\n    return (\n        <div className={Classes.PANEL_STACK2_VIEW}>\n            {props.showHeader && (\n                <div className={Classes.PANEL_STACK2_HEADER}>\n                    {/* two <span> tags here ensure title is centered as long as possible, with `flex: 1` styling */}\n                    <span>{maybeBackButton}</span>\n                    <Text className={Classes.HEADING} ellipsize={true} title={props.panel.htmlTitle}>\n                        {props.panel.title}\n                    </Text>\n                    <span />\n                </div>\n            )}\n            <PanelWrapper />\n        </div>\n    );\n};\nPanelView2.displayName = `${DISPLAYNAME_PREFIX}.PanelView2`;\n"]}