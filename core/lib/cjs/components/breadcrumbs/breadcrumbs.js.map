{"version":3,"file":"breadcrumbs.js","sourceRoot":"","sources":["../../../../src/components/breadcrumbs/breadcrumbs.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable deprecation/deprecation */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Boundary, Classes, Position, Props, removeNonHTMLProps } from \"../../common\";\nimport { Menu } from \"../menu/menu\";\nimport { MenuItem } from \"../menu/menuItem\";\nimport { OverflowList, OverflowListProps } from \"../overflow-list/overflowList\";\nimport { IPopoverProps, Popover } from \"../popover/popover\";\nimport { Breadcrumb, BreadcrumbProps } from \"./breadcrumb\";\n\nexport type BreadcrumbsProps = IBreadcrumbsProps;\n/** @deprecated use BreadcrumbsProps */\nexport interface IBreadcrumbsProps extends Props {\n    /**\n     * Callback invoked to render visible breadcrumbs. Best practice is to\n     * render a `<Breadcrumb>` element. If `currentBreadcrumbRenderer` is also\n     * supplied, that callback will be used for the current breadcrumb instead.\n     *\n     * @default Breadcrumb\n     */\n    breadcrumbRenderer?: (props: BreadcrumbProps) => JSX.Element;\n\n    /**\n     * Which direction the breadcrumbs should collapse from: start or end.\n     *\n     * @default Boundary.START\n     */\n    collapseFrom?: Boundary;\n\n    /**\n     * Callback invoked to render the current breadcrumb, which is the last\n     * element in the `items` array.\n     *\n     * If this prop is omitted, `breadcrumbRenderer` will be invoked for the\n     * current breadcrumb instead.\n     */\n    currentBreadcrumbRenderer?: (props: BreadcrumbProps) => JSX.Element;\n\n    /**\n     * All breadcrumbs to display. Breadcrumbs that do not fit in the container\n     * will be rendered in an overflow menu instead.\n     */\n    items: readonly BreadcrumbProps[];\n\n    /**\n     * The minimum number of visible breadcrumbs that should never collapse into\n     * the overflow menu, regardless of DOM dimensions.\n     *\n     * @default 0\n     */\n    minVisibleItems?: number;\n\n    /**\n     * Props to spread to `OverflowList`. Note that `items`,\n     * `overflowRenderer`, and `visibleItemRenderer` cannot be changed.\n     */\n    overflowListProps?: Partial<OverflowListProps<BreadcrumbProps>>;\n\n    /**\n     * Props to spread to the `Popover` showing the overflow menu.\n     */\n    popoverProps?: IPopoverProps;\n}\n\n/**\n * Breadcrumbs component.\n *\n * @see https://blueprintjs.com/docs/#core/components/breadcrumbs\n * @deprecated use { Breadcrumbs2 } from \"@blueprintjs/popover2\"\n */\nexport class Breadcrumbs extends AbstractPureComponent2<BreadcrumbsProps> {\n    public static defaultProps: Partial<BreadcrumbsProps> = {\n        collapseFrom: Boundary.START,\n    };\n\n    public render() {\n        const { className, collapseFrom, items, minVisibleItems, overflowListProps = {} } = this.props;\n        return (\n            <OverflowList\n                collapseFrom={collapseFrom}\n                minVisibleItems={minVisibleItems}\n                tagName=\"ul\"\n                {...overflowListProps}\n                className={classNames(Classes.BREADCRUMBS, overflowListProps.className, className)}\n                items={items}\n                overflowRenderer={this.renderOverflow}\n                visibleItemRenderer={this.renderBreadcrumbWrapper}\n            />\n        );\n    }\n\n    private renderOverflow = (items: readonly BreadcrumbProps[]) => {\n        const { collapseFrom } = this.props;\n        const position = collapseFrom === Boundary.END ? Position.BOTTOM_RIGHT : Position.BOTTOM_LEFT;\n        let orderedItems = items;\n        if (collapseFrom === Boundary.START) {\n            // If we're collapsing from the start, the menu should be read from the bottom to the\n            // top, continuing with the breadcrumbs to the right. Since this means the first\n            // breadcrumb in the props must be the last in the menu, we need to reverse the overlow\n            // order.\n            orderedItems = items.slice().reverse();\n        }\n\n        return (\n            <li>\n                <Popover\n                    position={position}\n                    disabled={orderedItems.length === 0}\n                    content={<Menu>{orderedItems.map(this.renderOverflowBreadcrumb)}</Menu>}\n                    {...this.props.popoverProps}\n                >\n                    <span className={Classes.BREADCRUMBS_COLLAPSED} />\n                </Popover>\n            </li>\n        );\n    };\n\n    private renderOverflowBreadcrumb = (props: BreadcrumbProps, index: number) => {\n        const isClickable = props.href != null || props.onClick != null;\n        const htmlProps = removeNonHTMLProps(props);\n        return <MenuItem disabled={!isClickable} {...htmlProps} text={props.text} key={index} />;\n    };\n\n    private renderBreadcrumbWrapper = (props: BreadcrumbProps, index: number) => {\n        const isCurrent = this.props.items[this.props.items.length - 1] === props;\n        return <li key={index}>{this.renderBreadcrumb(props, isCurrent)}</li>;\n    };\n\n    private renderBreadcrumb(props: BreadcrumbProps, isCurrent: boolean) {\n        if (isCurrent && this.props.currentBreadcrumbRenderer != null) {\n            return this.props.currentBreadcrumbRenderer(props);\n        } else if (this.props.breadcrumbRenderer != null) {\n            return this.props.breadcrumbRenderer(props);\n        } else {\n            // allow user to override 'current' prop\n            return <Breadcrumb current={isCurrent} {...props} />;\n        }\n    }\n}\n"]}