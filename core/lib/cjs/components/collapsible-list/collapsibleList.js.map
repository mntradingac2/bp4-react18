{"version":3,"file":"collapsibleList.js","sourceRoot":"","sources":["../../../../src/components/collapsible-list/collapsibleList.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This component is DEPRECATED, and the code is frozen.\n * All changes & bugfixes should be made to OverflowList instead.\n */\n\n/* eslint-disable deprecation/deprecation */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Boundary } from \"../../common/boundary\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { Position } from \"../../common/position\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Menu } from \"../menu/menu\";\nimport { MenuItem, MenuItemProps } from \"../menu/menuItem\";\nimport { IPopoverProps, Popover } from \"../popover/popover\";\n\ntype CollapsibleItem = React.ReactElement<MenuItemProps>;\n\n/** @deprecated use OverflowList */\nexport type CollapsibleListProps = ICollapsibleListProps;\n/** @deprecated use OverflowList */\nexport interface ICollapsibleListProps extends Props {\n    /** Contents to collapse. */\n    children?: React.ReactNode;\n\n    /**\n     * Element to render as dropdown target with `CLICK` interaction to show collapsed menu.\n     */\n    dropdownTarget: JSX.Element;\n\n    /**\n     * Props to pass to the dropdown.\n     */\n    dropdownProps?: IPopoverProps;\n\n    /**\n     * Callback invoked to render each visible item. The item will be wrapped in an `li` with\n     * the optional `visibleItemClassName` prop.\n     */\n    visibleItemRenderer: (props: MenuItemProps, index: number) => JSX.Element;\n\n    /**\n     * Which direction the items should collapse from: start or end of the children.\n     *\n     * @default Boundary.START\n     */\n    collapseFrom?: Boundary;\n\n    /**\n     * CSS class names to add to `<li>` tags containing each visible item and the dropdown.\n     */\n    visibleItemClassName?: string;\n\n    /**\n     * Exact number of visible items.\n     *\n     * @default 3\n     */\n    visibleItemCount?: number;\n}\n\n/**\n * CollapsibleList component.\n *\n * @see https://blueprintjs.com/docs/#core/components/collapsible-list\n * @deprecated use `<OverflowList>` for automatic overflow based on available space.\n */\nexport class CollapsibleList extends React.Component<CollapsibleListProps> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.CollapsibleList`;\n\n    public static defaultProps: Partial<CollapsibleListProps> = {\n        collapseFrom: Boundary.START,\n        visibleItemCount: 3,\n    };\n\n    public render() {\n        const { collapseFrom } = this.props;\n        const childrenLength = React.Children.count(this.props.children);\n        const [visibleChildren, collapsedChildren] = this.partitionChildren();\n\n        const visibleItems = visibleChildren.map((child: CollapsibleItem, index: number) => {\n            const absoluteIndex = collapseFrom === Boundary.START ? childrenLength - 1 - index : index;\n            return (\n                <li className={this.props.visibleItemClassName} key={absoluteIndex}>\n                    {this.props.visibleItemRenderer(child.props, absoluteIndex)}\n                </li>\n            );\n        });\n        if (collapseFrom === Boundary.START) {\n            // reverse START list so separators appear before items\n            visibleItems.reverse();\n        }\n\n        // construct dropdown menu for collapsed items\n        let collapsedPopover: JSX.Element | undefined;\n        if (collapsedChildren.length > 0) {\n            const position = collapseFrom === Boundary.END ? Position.BOTTOM_RIGHT : Position.BOTTOM_LEFT;\n            collapsedPopover = (\n                <li className={this.props.visibleItemClassName}>\n                    <Popover\n                        content={<Menu>{collapsedChildren}</Menu>}\n                        position={position}\n                        {...this.props.dropdownProps}\n                    >\n                        {this.props.dropdownTarget}\n                    </Popover>\n                </li>\n            );\n        }\n\n        return (\n            <ul className={classNames(Classes.COLLAPSIBLE_LIST, this.props.className)}>\n                {collapseFrom === Boundary.START ? collapsedPopover : null}\n                {visibleItems}\n                {collapseFrom === Boundary.END ? collapsedPopover : null}\n            </ul>\n        );\n    }\n\n    // splits the list of children into two arrays: visible and collapsed\n    private partitionChildren(): [CollapsibleItem[], CollapsibleItem[]] {\n        const childrenArray = React.Children.map(this.props.children, (child: React.ReactNode, index: number) => {\n            if (!isElementOfType(child, MenuItem)) {\n                throw new Error(Errors.COLLAPSIBLE_LIST_INVALID_CHILD);\n            }\n            return React.cloneElement(child as JSX.Element, { key: `visible-${index}` });\n        });\n\n        if (childrenArray == null) {\n            return [[], []];\n        }\n\n        if (this.props.collapseFrom === Boundary.START) {\n            // reverse START list so we can always slice visible items from the front of the list\n            childrenArray.reverse();\n        }\n        const { visibleItemCount } = this.props;\n        return [childrenArray.slice(0, visibleItemCount), childrenArray.slice(visibleItemCount)];\n    }\n}\n"]}