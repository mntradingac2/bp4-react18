{"version":3,"file":"abstractButton.js","sourceRoot":"","sources":["../../../../src/components/button/abstractButton.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    ActionProps,\n    Alignment,\n    Classes,\n    IElementRefProps,\n    Keys,\n    MaybeElement,\n    Utils,\n} from \"../../common\";\nimport { Icon, IconName, IconSize } from \"../icon/icon\";\nimport { Spinner } from \"../spinner/spinner\";\n\n/** @deprecated use ButtonProps */\nexport type IButtonProps<E extends HTMLButtonElement | HTMLAnchorElement = HTMLButtonElement> = ButtonProps<E>;\n\n/**\n * Props interface for both the Button and AnchorButton components.\n *\n * Note that it is useful for the props for the two components to be assignable to each other, which we can allow\n * by omitting the `elementRef` prop as `DialogStepButton` does. This is mostly for backwards compatibility, but it is\n * a feature we like to preserve because the components are so similar and distinguishing between them in their event\n * handlers is usually unnecessary. For this reason, we extend `ActionProps<HTMLElement>` rather than `ActionProps<E>`.\n *\n * @see {@link ActionProps}\n */\nexport interface ButtonProps<E extends HTMLButtonElement | HTMLAnchorElement = HTMLButtonElement>\n    extends ActionProps<HTMLElement>,\n        // eslint-disable-next-line deprecation/deprecation\n        IElementRefProps<E> {\n    /**\n     * If set to `true`, the button will display in an active state.\n     * This is equivalent to setting `className={Classes.ACTIVE}`.\n     *\n     * @default false\n     */\n    active?: boolean;\n\n    /**\n     * Text alignment within button. By default, icons and text will be centered\n     * within the button. Passing `\"left\"` or `\"right\"` will align the button\n     * text to that side and push `icon` and `rightIcon` to either edge. Passing\n     * `\"center\"` will center the text and icons together.\n     *\n     * @default Alignment.CENTER\n     */\n    alignText?: Alignment;\n\n    /** Button contents. */\n    children?: React.ReactNode;\n\n    /** Whether this button should expand to fill its container. */\n    fill?: boolean;\n\n    /** Whether this button should use large styles. */\n    large?: boolean;\n\n    /**\n     * If set to `true`, the button will display a centered loading spinner instead of its contents\n     * and the button will be disabled (_even if_ `disabled={false}`). The width of the button is\n     * not affected by the value of this prop.\n     *\n     * @default false\n     */\n    loading?: boolean;\n\n    /** Whether this button should use minimal styles. */\n    minimal?: boolean;\n\n    /** Whether this button should use outlined styles. */\n    outlined?: boolean;\n\n    /** Name of a Blueprint UI icon (or an icon element) to render after the text. */\n    rightIcon?: IconName | MaybeElement;\n\n    /** Whether this button should use small styles. */\n    small?: boolean;\n\n    /**\n     * HTML `type` attribute of button. Accepted values are `\"button\"`, `\"submit\"`, and `\"reset\"`.\n     * Note that this prop has no effect on `AnchorButton`; it only affects `Button`.\n     *\n     * @default \"button\"\n     */\n    type?: \"submit\" | \"reset\" | \"button\";\n}\n\n/** @deprecated use AnchorButtonProps */\nexport type IAnchorButtonProps = ButtonProps<HTMLAnchorElement>;\n// eslint-disable-next-line deprecation/deprecation\nexport type AnchorButtonProps = IAnchorButtonProps;\n\nexport interface IButtonState {\n    isActive: boolean;\n}\n\nexport abstract class AbstractButton<E extends HTMLButtonElement | HTMLAnchorElement> extends AbstractPureComponent2<\n    ButtonProps<E> &\n        (E extends HTMLButtonElement\n            ? React.ButtonHTMLAttributes<HTMLButtonElement>\n            : React.AnchorHTMLAttributes<HTMLAnchorElement>),\n    IButtonState\n> {\n    public state = {\n        isActive: false,\n    };\n\n    protected abstract buttonRef: HTMLElement | null;\n\n    private currentKeyDown?: number;\n\n    public abstract render(): JSX.Element;\n\n    protected getCommonButtonProps() {\n        const {\n            active = false,\n            alignText,\n            fill,\n            large,\n            loading = false,\n            outlined,\n            minimal,\n            small,\n            tabIndex,\n        } = this.props;\n        const disabled = this.props.disabled || loading;\n\n        const className = classNames(\n            Classes.BUTTON,\n            {\n                [Classes.ACTIVE]: !disabled && (active || this.state.isActive),\n                [Classes.DISABLED]: disabled,\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.LOADING]: loading,\n                [Classes.MINIMAL]: minimal,\n                [Classes.OUTLINED]: outlined,\n                [Classes.SMALL]: small,\n            },\n            Classes.alignmentClass(alignText),\n            Classes.intentClass(this.props.intent),\n            this.props.className,\n        );\n\n        return {\n            className,\n            disabled,\n            onBlur: this.handleBlur,\n            onClick: disabled ? undefined : this.props.onClick,\n            onFocus: disabled ? undefined : this.props.onFocus,\n            onKeyDown: this.handleKeyDown,\n            onKeyUp: this.handleKeyUp,\n            tabIndex: disabled ? -1 : tabIndex,\n        };\n    }\n\n    // we're casting as `any` to get around a somewhat opaque safeInvoke error\n    // that \"Type argument candidate 'KeyboardEvent<T>' is not a valid type\n    // argument because it is not a supertype of candidate\n    // 'KeyboardEvent<HTMLElement>'.\"\n    protected handleKeyDown = (e: React.KeyboardEvent<any>) => {\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable deprecation/deprecation */\n        if (Keys.isKeyboardClick(e.which)) {\n            e.preventDefault();\n            if (e.which !== this.currentKeyDown) {\n                this.setState({ isActive: true });\n            }\n        }\n        this.currentKeyDown = e.which;\n        this.props.onKeyDown?.(e);\n    };\n\n    protected handleKeyUp = (e: React.KeyboardEvent<any>) => {\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable deprecation/deprecation */\n        if (Keys.isKeyboardClick(e.which)) {\n            this.setState({ isActive: false });\n            this.buttonRef?.click();\n        }\n        this.currentKeyDown = undefined;\n        this.props.onKeyUp?.(e);\n    };\n\n    protected handleBlur = (e: React.FocusEvent<any>) => {\n        if (this.state.isActive) {\n            this.setState({ isActive: false });\n        }\n        this.props.onBlur?.(e);\n    };\n\n    protected renderChildren(): React.ReactNode {\n        const { children, icon, loading, rightIcon, text } = this.props;\n        const maybeHasText = !Utils.isReactNodeEmpty(text) || !Utils.isReactNodeEmpty(children);\n        return [\n            loading && <Spinner key=\"loading\" className={Classes.BUTTON_SPINNER} size={IconSize.LARGE} />,\n            <Icon key=\"leftIcon\" icon={icon} />,\n            maybeHasText && (\n                <span key=\"text\" className={Classes.BUTTON_TEXT}>\n                    {text}\n                    {children}\n                </span>\n            ),\n            <Icon key=\"rightIcon\" icon={rightIcon} />,\n        ];\n    }\n}\n"]}