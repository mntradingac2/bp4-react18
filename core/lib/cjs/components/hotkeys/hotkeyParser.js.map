{"version":3,"file":"hotkeyParser.js","sourceRoot":"","sources":["../../../../src/components/hotkeys/hotkeyParser.ts"],"names":[],"mappings":";;;AA4Ba,QAAA,QAAQ,GAAkB;IACnC,CAAC,EAAE,WAAW;IACd,CAAC,EAAE,KAAK;IACR,EAAE,EAAE,OAAO;IACX,EAAE,EAAE,UAAU;IACd,EAAE,EAAE,KAAK;IACT,EAAE,EAAE,OAAO;IACX,EAAE,EAAE,QAAQ;IACZ,EAAE,EAAE,UAAU;IACd,EAAE,EAAE,KAAK;IACT,EAAE,EAAE,MAAM;IACV,EAAE,EAAE,MAAM;IACV,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,OAAO;IACX,EAAE,EAAE,MAAM;IACV,EAAE,EAAE,KAAK;IACT,EAAE,EAAE,KAAK;IAET,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IAEP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IAEP,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;CACX,CAAC;AAEW,QAAA,SAAS,GAAkB;IACpC,EAAE,EAAE,OAAO;IACX,EAAE,EAAE,MAAM;IACV,EAAE,EAAE,KAAK;IACT,EAAE,EAAE,MAAM;IACV,EAAE,EAAE,MAAM;IACV,GAAG,EAAE,MAAM;CACd,CAAC;AAEW,QAAA,gBAAgB,GAAyB;IAClD,GAAG,EAAE,CAAC;IACN,IAAI,EAAE,CAAC;IACP,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,CAAC;CACX,CAAC;AAEW,QAAA,OAAO,GAAY;IAC5B,GAAG,EAAE,MAAM;IACX,OAAO,EAAE,MAAM;IACf,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,GAAG;IACV,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM;IAC9B,MAAM,EAAE,KAAK;IACb,IAAI,EAAE,GAAG;IACT,MAAM,EAAE,OAAO;IACf,GAAG,EAAE,MAAM;CACd,CAAC;AAIW,QAAA,SAAS,GAAY;IAC9B,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,CAAC,EAAE,GAAG;IACN,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,CAAC,EAAE,GAAG;IACN,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;CACX,CAAC;AAIF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE;IAC1B,gBAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;CAC/B;AAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;IACzB,gBAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;CAC3C;AAOD,SAAgB,YAAY,CAAC,CAAY,EAAE,CAAY;IACnD,OAAO,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC;AAC1D,CAAC;AAFD,oCAEC;AAWM,MAAM,aAAa,GAAG,CAAC,KAAa,EAAa,EAAE;IACtD,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjE,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI,GAAuB,CAAC;IAC5B,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;QACtB,IAAI,KAAK,KAAK,EAAE,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,8BAA8B,KAAK;2EACY,CAAC,CAAC;SACpE;QAED,IAAI,eAAO,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;YACxB,KAAK,GAAG,eAAO,CAAC,KAAK,CAAC,CAAC;SAC1B;QAED,IAAI,wBAAgB,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;YACjC,SAAS,IAAI,wBAAgB,CAAC,KAAK,CAAC,CAAC;SACxC;aAAM,IAAI,iBAAS,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;YACjC,SAAS,IAAI,wBAAgB,CAAC,KAAK,CAAC;YACpC,GAAG,GAAG,iBAAS,CAAC,KAAK,CAAC,CAAC;SAC1B;aAAM;YACH,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;SAC7B;KACJ;IACD,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;AAC9B,CAAC,CAAC;AAxBW,QAAA,aAAa,iBAwBxB;AAKK,MAAM,iBAAiB,GAAG,CAAC,CAAgB,EAAU,EAAE;IAC1D,MAAM,IAAI,GAAG,EAAc,CAAC;IAG5B,IAAI,CAAC,CAAC,OAAO,EAAE;QACX,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACrB;IACD,IAAI,CAAC,CAAC,MAAM,EAAE;QACV,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpB;IACD,IAAI,CAAC,CAAC,QAAQ,EAAE;QACZ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACtB;IACD,IAAI,CAAC,CAAC,OAAO,EAAE;QACX,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACrB;IAID,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACpB,IAAI,iBAAS,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;KAE7B;SAAM,IAAI,gBAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;QAChC,IAAI,CAAC,IAAI,CAAC,gBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;KAC9B;SAAM;QAEH,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;KACvD;IAGD,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC5B,CAAC,CAAC;AA/BW,QAAA,iBAAiB,qBA+B5B;AAQK,MAAM,WAAW,GAAG,CAAC,CAAgB,EAAa,EAAE;IACvD,IAAI,GAAuB,CAAC;IAG5B,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACpB,IAAI,iBAAS,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;KAE7B;SAAM,IAAI,gBAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;QAChC,GAAG,GAAG,gBAAQ,CAAC,KAAK,CAAC,CAAC;KACzB;SAAM;QAEH,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;KAClD;IAED,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI,CAAC,CAAC,MAAM,EAAE;QACV,SAAS,IAAI,wBAAgB,CAAC,GAAG,CAAC;KACrC;IACD,IAAI,CAAC,CAAC,OAAO,EAAE;QACX,SAAS,IAAI,wBAAgB,CAAC,IAAI,CAAC;KACtC;IACD,IAAI,CAAC,CAAC,OAAO,EAAE;QACX,SAAS,IAAI,wBAAgB,CAAC,IAAI,CAAC;KACtC;IACD,IAAI,CAAC,CAAC,QAAQ,EAAE;QACZ,SAAS,IAAI,wBAAgB,CAAC,KAAK,CAAC;KACvC;IAED,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;AAC9B,CAAC,CAAC;AA7BW,QAAA,WAAW,eA6BtB;AASK,MAAM,iBAAiB,GAAG,CAAC,KAAa,EAAE,gBAAyB,EAAY,EAAE;IACpF,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QAClB,MAAM,OAAO,GAAG,eAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,eAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QAC1D,OAAO,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IACrF,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AANW,QAAA,iBAAiB,qBAM5B;AAEF,SAAS,KAAK,CAAC,gBAAyB;IAGpC,MAAM,QAAQ,GAAG,gBAAgB,IAAI,CAAC,OAAO,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IACzG,OAAO,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAClF,CAAC","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface IKeyCodeTable {\n    [code: number]: string;\n}\n\nexport interface IKeyCodeReverseTable {\n    [key: string]: number;\n}\n\nexport interface IKeyMap {\n    [key: string]: string;\n}\n\nexport const KeyCodes: IKeyCodeTable = {\n    8: \"backspace\",\n    9: \"tab\",\n    13: \"enter\",\n    20: \"capslock\",\n    27: \"esc\",\n    32: \"space\",\n    33: \"pageup\",\n    34: \"pagedown\",\n    35: \"end\",\n    36: \"home\",\n    37: \"left\",\n    38: \"up\",\n    39: \"right\",\n    40: \"down\",\n    45: \"ins\",\n    46: \"del\",\n    // number keys\n    48: \"0\",\n    49: \"1\",\n    50: \"2\",\n    51: \"3\",\n    52: \"4\",\n    53: \"5\",\n    54: \"6\",\n    55: \"7\",\n    56: \"8\",\n    57: \"9\",\n    // alphabet\n    65: \"a\",\n    66: \"b\",\n    67: \"c\",\n    68: \"d\",\n    69: \"e\",\n    70: \"f\",\n    71: \"g\",\n    72: \"h\",\n    73: \"i\",\n    74: \"j\",\n    75: \"k\",\n    76: \"l\",\n    77: \"m\",\n    78: \"n\",\n    79: \"o\",\n    80: \"p\",\n    81: \"q\",\n    82: \"r\",\n    83: \"s\",\n    84: \"t\",\n    85: \"u\",\n    86: \"v\",\n    87: \"w\",\n    88: \"x\",\n    89: \"y\",\n    90: \"z\",\n    // punctuation\n    106: \"*\",\n    107: \"+\",\n    109: \"-\",\n    110: \".\",\n    111: \"/\",\n    186: \";\",\n    187: \"=\",\n    188: \",\",\n    189: \"-\",\n    190: \".\",\n    191: \"/\",\n    192: \"`\",\n    219: \"[\",\n    220: \"\\\\\",\n    221: \"]\",\n    222: \"'\",\n};\n\nexport const Modifiers: IKeyCodeTable = {\n    16: \"shift\",\n    17: \"ctrl\",\n    18: \"alt\",\n    91: \"meta\",\n    93: \"meta\",\n    224: \"meta\",\n};\n\nexport const ModifierBitMasks: IKeyCodeReverseTable = {\n    alt: 1,\n    ctrl: 2,\n    meta: 4,\n    shift: 8,\n};\n\nexport const Aliases: IKeyMap = {\n    cmd: \"meta\",\n    command: \"meta\",\n    escape: \"esc\",\n    minus: \"-\",\n    mod: isMac() ? \"meta\" : \"ctrl\",\n    option: \"alt\",\n    plus: \"+\",\n    return: \"enter\",\n    win: \"meta\",\n};\n\n// alph sorting is unintuitive here\n// tslint:disable object-literal-sort-keys\nexport const ShiftKeys: IKeyMap = {\n    \"~\": \"`\",\n    \"!\": \"1\",\n    \"@\": \"2\",\n    \"#\": \"3\",\n    $: \"4\",\n    \"%\": \"5\",\n    \"^\": \"6\",\n    \"&\": \"7\",\n    \"*\": \"8\",\n    \"(\": \"9\",\n    \")\": \"0\",\n    _: \"-\",\n    \"+\": \"=\",\n    \"{\": \"[\",\n    \"}\": \"]\",\n    \"|\": \"\\\\\",\n    \":\": \";\",\n    '\"': \"'\",\n    \"<\": \",\",\n    \">\": \".\",\n    \"?\": \"/\",\n};\n// tslint:enable object-literal-sort-keys\n\n// Function keys\nfor (let i = 1; i <= 12; ++i) {\n    KeyCodes[111 + i] = \"f\" + i;\n}\n\n// Numpad\nfor (let i = 0; i <= 9; ++i) {\n    KeyCodes[96 + i] = \"num\" + i.toString();\n}\n\nexport interface IKeyCombo {\n    key?: string;\n    modifiers: number;\n}\n\nexport function comboMatches(a: IKeyCombo, b: IKeyCombo) {\n    return a.modifiers === b.modifiers && a.key === b.key;\n}\n\n/**\n * Converts a key combo string into a key combo object. Key combos include\n * zero or more modifier keys, such as `shift` or `alt`, and exactly one\n * action key, such as `A`, `enter`, or `left`.\n *\n * For action keys that require a shift, e.g. `@` or `|`, we inlude the\n * necessary `shift` modifier and automatically convert the action key to the\n * unshifted version. For example, `@` is equivalent to `shift+2`.\n */\nexport const parseKeyCombo = (combo: string): IKeyCombo => {\n    const pieces = combo.replace(/\\s/g, \"\").toLowerCase().split(\"+\");\n    let modifiers = 0;\n    let key: string | undefined;\n    for (let piece of pieces) {\n        if (piece === \"\") {\n            throw new Error(`Failed to parse key combo \"${combo}\".\n                Valid key combos look like \"cmd + plus\", \"shift+p\", or \"!\"`);\n        }\n\n        if (Aliases[piece] != null) {\n            piece = Aliases[piece];\n        }\n\n        if (ModifierBitMasks[piece] != null) {\n            modifiers += ModifierBitMasks[piece];\n        } else if (ShiftKeys[piece] != null) {\n            modifiers += ModifierBitMasks.shift;\n            key = ShiftKeys[piece];\n        } else {\n            key = piece.toLowerCase();\n        }\n    }\n    return { modifiers, key };\n};\n\n/**\n * Converts a keyboard event into a valid combo prop string\n */\nexport const getKeyComboString = (e: KeyboardEvent): string => {\n    const keys = [] as string[];\n\n    // modifiers first\n    if (e.ctrlKey) {\n        keys.push(\"ctrl\");\n    }\n    if (e.altKey) {\n        keys.push(\"alt\");\n    }\n    if (e.shiftKey) {\n        keys.push(\"shift\");\n    }\n    if (e.metaKey) {\n        keys.push(\"meta\");\n    }\n\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n    const { which } = e;\n    if (Modifiers[which] != null) {\n        // no action key\n    } else if (KeyCodes[which] != null) {\n        keys.push(KeyCodes[which]);\n    } else {\n        // eslint-disable-next-line id-blacklist\n        keys.push(String.fromCharCode(which).toLowerCase());\n    }\n\n    // join keys with plusses\n    return keys.join(\" + \");\n};\n\n/**\n * Determines the key combo object from the given keyboard event. Again, a key\n * combo includes zero or more modifiers (represented by a bitmask) and one\n * action key, which we determine from the `e.which` property of the keyboard\n * event.\n */\nexport const getKeyCombo = (e: KeyboardEvent): IKeyCombo => {\n    let key: string | undefined;\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n    const { which } = e;\n    if (Modifiers[which] != null) {\n        // keep key null\n    } else if (KeyCodes[which] != null) {\n        key = KeyCodes[which];\n    } else {\n        // eslint-disable-next-line id-blacklist\n        key = String.fromCharCode(which).toLowerCase();\n    }\n\n    let modifiers = 0;\n    if (e.altKey) {\n        modifiers += ModifierBitMasks.alt;\n    }\n    if (e.ctrlKey) {\n        modifiers += ModifierBitMasks.ctrl;\n    }\n    if (e.metaKey) {\n        modifiers += ModifierBitMasks.meta;\n    }\n    if (e.shiftKey) {\n        modifiers += ModifierBitMasks.shift;\n    }\n\n    return { modifiers, key };\n};\n\n/**\n * Splits a key combo string into its constituent key values and looks up\n * aliases, such as `return` -> `enter`.\n *\n * Unlike the parseKeyCombo method, this method does NOT convert shifted\n * action keys. So `\"@\"` will NOT be converted to `[\"shift\", \"2\"]`).\n */\nexport const normalizeKeyCombo = (combo: string, platformOverride?: string): string[] => {\n    const keys = combo.replace(/\\s/g, \"\").split(\"+\");\n    return keys.map(key => {\n        const keyName = Aliases[key] != null ? Aliases[key] : key;\n        return keyName === \"meta\" ? (isMac(platformOverride) ? \"cmd\" : \"ctrl\") : keyName;\n    });\n};\n\nfunction isMac(platformOverride?: string) {\n    // HACKHACK: see https://github.com/palantir/blueprint/issues/5174\n    // eslint-disable-next-line deprecation/deprecation\n    const platform = platformOverride ?? (typeof navigator !== \"undefined\" ? navigator.platform : undefined);\n    return platform === undefined ? false : /Mac|iPod|iPhone|iPad/.test(platform);\n}\n"]}