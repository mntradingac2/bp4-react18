{"version":3,"file":"hotkeyConfig.js","sourceRoot":"","sources":["../../../../src/hooks/hotkeys/hotkeyConfig.ts"],"names":[],"mappings":"","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface HotkeyConfig {\n    /**\n     * Whether the hotkey should be triggerable when focused in a text input.\n     *\n     * @default false\n     */\n    allowInInput?: boolean;\n\n    /**\n     * Hotkey combination string, such as \"space\" or \"cmd+n\".\n     */\n    combo: string;\n\n    /**\n     * Whether the hotkey cannot be triggered.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Human-friendly label for the hotkey.\n     */\n    label: React.ReactNode;\n\n    /**\n     * If `false`, the hotkey is active only when the target is focused. If\n     * `true`, the hotkey can be triggered regardless of what component is\n     * focused.\n     *\n     * @default false\n     */\n    global?: boolean;\n\n    /**\n     * Unless the hotkey is global, you must specify a group where the hotkey\n     * will be displayed in the hotkeys dialog. This string will be displayed\n     * in a header at the start of the group of hotkeys.\n     */\n    group?: string;\n\n    /**\n     * When `true`, invokes `event.preventDefault()` before the respective `onKeyDown` and\n     * `onKeyUp` callbacks are invoked. Enabling this can simplify handler implementations.\n     *\n     * @default false\n     */\n    preventDefault?: boolean;\n\n    /**\n     * When `true`, invokes `event.stopPropagation()` before the respective `onKeyDown` and\n     * `onKeyUp` callbacks are invoked. Enabling this can simplify handler implementations.\n     *\n     * @default false\n     */\n    stopPropagation?: boolean;\n\n    /**\n     * `keydown` event handler.\n     */\n    onKeyDown?(e: KeyboardEvent): any;\n\n    /**\n     * `keyup` event handler.\n     */\n    onKeyUp?(e: KeyboardEvent): any;\n}\n"]}