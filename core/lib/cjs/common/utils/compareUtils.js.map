{"version":3,"file":"compareUtils.js","sourceRoot":"","sources":["../../../../src/common/utils/compareUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// we use the empty object {} a lot in this public API\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable deprecation/deprecation */\n\n/** @deprecated use KeyAllowlist */\nexport interface IKeyAllowlist<T> {\n    include: Array<keyof T>;\n}\nexport type KeyAllowlist<T> = IKeyAllowlist<T>;\n\n/** @deprecated use KeyDenylist */\nexport interface IKeyDenylist<T> {\n    exclude: Array<keyof T>;\n}\nexport type KeyDenylist<T> = IKeyDenylist<T>;\n\n/* eslint-enable deprecation/deprecation */\n\n/**\n * Returns true if the arrays are equal. Elements will be shallowly compared by\n * default, or they will be compared using the custom `compare` function if one\n * is provided.\n */\nexport function arraysEqual(arrA: any[], arrB: any[], compare = (a: any, b: any) => a === b) {\n    // treat `null` and `undefined` as the same\n    if (arrA == null && arrB == null) {\n        return true;\n    } else if (arrA == null || arrB == null || arrA.length !== arrB.length) {\n        return false;\n    } else {\n        return arrA.every((a, i) => compare(a, arrB[i]));\n    }\n}\n\n/**\n * Shallow comparison between objects. If `keys` is provided, just that subset\n * of keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nexport function shallowCompareKeys<T extends {}>(\n    objA: T | null | undefined,\n    objB: T | null | undefined,\n    keys?: KeyDenylist<T> | KeyAllowlist<T>,\n) {\n    // treat `null` and `undefined` as the same\n    if (objA == null && objB == null) {\n        return true;\n    } else if (objA == null || objB == null) {\n        return false;\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return false;\n    } else if (keys != null) {\n        return shallowCompareKeysImpl(objA, objB, keys);\n    } else {\n        // shallowly compare all keys from both objects\n        const keysA = Object.keys(objA) as Array<keyof T>;\n        const keysB = Object.keys(objB) as Array<keyof T>;\n        return (\n            shallowCompareKeysImpl(objA, objB, { include: keysA }) &&\n            shallowCompareKeysImpl(objA, objB, { include: keysB })\n        );\n    }\n}\n\n/**\n * Deep comparison between objects. If `keys` is provided, just that subset of\n * keys will be compared; otherwise, all keys will be compared.\n *\n * @returns true if items are equal.\n */\nexport function deepCompareKeys(objA: any, objB: any, keys?: Array<string | number | symbol>): boolean {\n    if (objA === objB) {\n        return true;\n    } else if (objA == null && objB == null) {\n        // treat `null` and `undefined` as the same\n        return true;\n    } else if (objA == null || objB == null) {\n        return false;\n    } else if (Array.isArray(objA) || Array.isArray(objB)) {\n        return arraysEqual(objA, objB, deepCompareKeys);\n    } else if (isSimplePrimitiveType(objA) || isSimplePrimitiveType(objB)) {\n        return objA === objB;\n    } else if (keys != null) {\n        return deepCompareKeysImpl(objA, objB, keys);\n    } else if (objA.constructor !== objB.constructor) {\n        return false;\n    } else {\n        const keysA = Object.keys(objA);\n        const keysB = Object.keys(objB);\n        if (keysA == null || keysB == null) {\n            return false;\n        }\n        if (keysA.length === 0 && keysB.length === 0) {\n            return true;\n        }\n        return arraysEqual(keysA, keysB) && deepCompareKeysImpl(objA, objB, keysA);\n    }\n}\n\n/**\n * Returns a descriptive object for each key whose values are deeply unequal\n * between two provided objects. Useful for debugging shouldComponentUpdate.\n */\nexport function getDeepUnequalKeyValues<T extends {}>(\n    objA: T = {} as any as T,\n    objB: T = {} as any as T,\n    keys?: Array<keyof T>,\n) {\n    const filteredKeys = keys == null ? unionKeys(objA, objB) : keys;\n    return getUnequalKeyValues(objA, objB, filteredKeys, (a, b, key) => {\n        return deepCompareKeys(a, b, [key]);\n    });\n}\n\n// Private helpers\n// ===============\n\n/**\n * Partial shallow comparison between objects using the given list of keys.\n */\nfunction shallowCompareKeysImpl<T extends object>(objA: T, objB: T, keys: KeyDenylist<T> | KeyAllowlist<T>) {\n    return filterKeys(objA, objB, keys).every(key => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && objA[key] === objB[key];\n    });\n}\n\n/**\n * Partial deep comparison between objects using the given list of keys.\n */\nfunction deepCompareKeysImpl(objA: any, objB: any, keys: Array<string | number | symbol>): boolean {\n    return keys.every(key => {\n        return objA.hasOwnProperty(key) === objB.hasOwnProperty(key) && deepCompareKeys(objA[key], objB[key]);\n    });\n}\n\nfunction isSimplePrimitiveType(value: any) {\n    return typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\";\n}\n\nfunction filterKeys<T extends object>(objA: T, objB: T, keys: KeyDenylist<T> | KeyAllowlist<T>) {\n    if (isAllowlist(keys)) {\n        return keys.include;\n    } else if (isDenylist(keys)) {\n        const keysA = Object.keys(objA);\n        const keysB = Object.keys(objB);\n\n        // merge keys from both objects into a big set for quick access\n        const keySet = arrayToObject(keysA.concat(keysB));\n\n        // delete denied keys from the key set\n        keys.exclude.forEach(key => delete keySet[key]);\n\n        // return the remaining keys as an array\n        return Object.keys(keySet) as Array<keyof T>;\n    }\n\n    return [];\n}\n\nfunction isAllowlist<T>(keys: any): keys is KeyAllowlist<T> {\n    return keys != null && (keys as KeyAllowlist<T>).include != null;\n}\n\nfunction isDenylist<T>(keys: any): keys is KeyDenylist<T> {\n    return keys != null && (keys as KeyDenylist<T>).exclude != null;\n}\n\nfunction arrayToObject(arr: any[]) {\n    return arr.reduce((obj: any, element: any) => {\n        obj[element] = true;\n        return obj;\n    }, {});\n}\n\nfunction getUnequalKeyValues<T extends {}>(\n    objA: T,\n    objB: T,\n    keys: Array<keyof T>,\n    compareFn: (objA: any, objB: any, key: keyof T) => boolean,\n) {\n    const unequalKeys = keys.filter(key => !compareFn(objA, objB, key));\n    const unequalKeyValues = unequalKeys.map(key => ({\n        key,\n        valueA: objA[key],\n        valueB: objB[key],\n    }));\n    return unequalKeyValues;\n}\n\nfunction unionKeys<T extends {}>(objA: T, objB: T) {\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n\n    const concatKeys = keysA.concat(keysB);\n    const keySet = arrayToObject(concatKeys);\n\n    return Object.keys(keySet) as Array<keyof T>;\n}\n"]}