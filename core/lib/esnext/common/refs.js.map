{"version":3,"file":"refs.js","sourceRoot":"","sources":["../../../src/common/refs.ts"],"names":[],"mappings":";;;AAkBA,SAAgB,WAAW,CAAI,KAA+B;IAC1D,OAAO,KAAK,IAAI,IAAI,IAAI,OAAO,KAAK,KAAK,UAAU,CAAC;AACxD,CAAC;AAFD,kCAEC;AAED,SAAgB,aAAa,CAAI,KAA+B;IAC5D,OAAO,OAAO,KAAK,KAAK,UAAU,CAAC;AACvC,CAAC;AAFD,sCAEC;AAKD,SAAgB,MAAM,CAAI,SAAmC,EAAE,GAAa;IACxE,IAAI,WAAW,CAAI,SAAS,CAAC,EAAE;QAE1B,SAAS,CAAC,OAAe,GAAG,GAAG,CAAC;KACpC;SAAM,IAAI,aAAa,CAAC,SAAS,CAAC,EAAE;QACjC,SAAS,CAAC,GAAG,CAAC,CAAC;KAClB;AACL,CAAC;AAPD,wBAOC;AAGD,SAAgB,WAAW,CAAI,IAA0B,EAAE,IAA0B;IACjF,OAAO,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACjC,CAAC;AAFD,kCAEC;AAMD,SAAgB,SAAS,CAAI,GAAG,IAAyB;IACrD,OAAO,KAAK,CAAC,EAAE;QACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACf,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAND,8BAMC;AAED,SAAgB,MAAM,CAAI,GAAkC;IACxD,IAAI,GAAG,KAAK,IAAI,EAAE;QACd,OAAO,IAAI,CAAC;KACf;IAED,OAAQ,GAA0B,CAAC,OAAO,IAAK,GAAS,CAAC;AAC7D,CAAC;AAND,wBAMC;AAQD,SAAgB,UAAU,CACtB,eAAuC,EACvC,YAAe,EACf,OAAkC;IAElC,OAAO,CAAC,GAAa,EAAE,EAAE;QACrB,eAAe,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC;QACpC,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IACzB,CAAC,CAAC;AACN,CAAC;AATD,gCASC","sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nexport function isRefObject<T>(value: React.Ref<T> | undefined): value is React.RefObject<T> {\n    return value != null && typeof value !== \"function\";\n}\n\nexport function isRefCallback<T>(value: React.Ref<T> | undefined): value is React.RefCallback<T> {\n    return typeof value === \"function\";\n}\n\n/**\n * Assign the given ref to a target, either a React ref object or a callback which takes the ref as its first argument.\n */\nexport function setRef<T>(refTarget: React.Ref<T> | undefined, ref: T | null): void {\n    if (isRefObject<T>(refTarget)) {\n        // HACKHACK: .current property is readonly\n        (refTarget.current as any) = ref;\n    } else if (isRefCallback(refTarget)) {\n        refTarget(ref);\n    }\n}\n\n/** @deprecated use mergeRefs() instead */\nexport function combineRefs<T>(ref1: React.RefCallback<T>, ref2: React.RefCallback<T>) {\n    return mergeRefs(ref1, ref2);\n}\n\n/**\n * Utility for merging refs into one singular callback ref.\n * If using in a functional component, would recomend using `useMemo` to preserve function identity.\n */\nexport function mergeRefs<T>(...refs: Array<React.Ref<T>>): React.RefCallback<T> {\n    return value => {\n        refs.forEach(ref => {\n            setRef(ref, value);\n        });\n    };\n}\n\nexport function getRef<T>(ref: T | React.RefObject<T> | null): T | null {\n    if (ref === null) {\n        return null;\n    }\n\n    return (ref as React.RefObject<T>).current ?? (ref as T);\n}\n\n/**\n * Creates a ref handler which assigns the ref returned by React for a mounted component to a field on the target object.\n * The target object is usually a component class.\n *\n * If provided, it will also update the given `refProp` with the value of the ref.\n */\nexport function refHandler<T extends HTMLElement, K extends string>(\n    refTargetParent: { [k in K]: T | null },\n    refTargetKey: K,\n    refProp?: React.Ref<T> | undefined,\n): React.RefCallback<T> {\n    return (ref: T | null) => {\n        refTargetParent[refTargetKey] = ref;\n        setRef(refProp, ref);\n    };\n}\n\n/* eslint-disable deprecation/deprecation */\n\n/** @deprecated use React.Ref */\nexport type IRef<T = HTMLElement> = IRefObject<T> | IRefCallback<T>;\n\n// compatible with React.Ref type in @types/react@^16\n/** @deprecated use React.RefObject */\nexport interface IRefObject<T = HTMLElement> {\n    current: T | null;\n}\n\n/** @deprecated use React.RefCallback */\nexport type IRefCallback<T = HTMLElement> = (ref: T | null) => any;\n"]}