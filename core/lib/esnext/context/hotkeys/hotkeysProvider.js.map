{"version":3,"file":"hotkeysProvider.js","sourceRoot":"","sources":["../../../../src/context/hotkeys/hotkeysProvider.tsx"],"names":[],"mappings":";;;;AAgBA,qDAA+B;AAE/B,8CAAwD;AACxD,4EAA8F;AAwB9F,MAAM,mBAAmB,GAAwB,EAAE,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;AAC1G,MAAM,YAAY,GAAkC,GAAG,EAAE,CAAC,IAAI,CAAC;AAYlD,QAAA,cAAc,GAAG,KAAK,CAAC,aAAa,CAAyB,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC,CAAC;AAE/G,MAAM,cAAc,GAAG,CAAC,KAA0B,EAAE,MAAqB,EAAE,EAAE;IACzE,QAAQ,MAAM,CAAC,IAAI,EAAE;QACjB,KAAK,aAAa;YAEd,MAAM,gBAAgB,GAAG,EAAS,CAAC;YACnC,KAAK,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,EAAE;gBAC5B,IAAI,QAAQ,GAAG,IAAI,CAAC;gBACpB,KAAK,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE;oBAC3B,QAAQ,KAAK,CAAC,IAAA,0BAAkB,EAAC,CAAC,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC;iBACjF;gBACD,IAAI,QAAQ,EAAE;oBACV,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAC5B;aACJ;YACD,OAAO;gBACH,GAAG,KAAK;gBACR,OAAO,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,EAAE,GAAG,gBAAgB,CAAC;aACnD,CAAC;QACN,KAAK,gBAAgB;YACjB,OAAO;gBACH,GAAG,KAAK;gBACR,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;aAC3E,CAAC;QACN,KAAK,aAAa;YACd,OAAO,EAAE,GAAG,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;QAC5C,KAAK,cAAc;YACf,OAAO,EAAE,GAAG,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;QAC7C;YACI,OAAO,KAAK,CAAC;KACpB;AACL,CAAC,CAAC;AAqBK,MAAM,eAAe,GAAG,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,YAAY,EAAE,KAAK,EAAwB,EAAE,EAAE;IACpG,MAAM,kBAAkB,GAAG,KAAK,IAAI,IAAI,CAAC;IACzC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,KAAK,IAAI,KAAK,CAAC,UAAU,CAAC,cAAc,EAAE,EAAE,GAAG,mBAAmB,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;IACnH,MAAM,iBAAiB,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAE1F,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,iBAAiB,EAAE,CAAC,IAAI,CAC3D,oBAAC,+BAAc,OACP,WAAW,EACf,MAAM,EAAE,KAAK,CAAC,YAAY,EAC1B,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,OAAO,EAAE,iBAAiB,GAC5B,CACL,CAAC;IAGF,OAAO,CACH,oBAAC,sBAAc,CAAC,QAAQ,IAAC,KAAK,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;QAC5C,QAAQ;QACR,kBAAkB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAClB,CAC7B,CAAC;AACN,CAAC,CAAC;AArBW,QAAA,eAAe,mBAqB1B","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { shallowCompareKeys } from \"../../common/utils\";\nimport { HotkeysDialog2, HotkeysDialog2Props } from \"../../components/hotkeys/hotkeysDialog2\";\nimport { HotkeyConfig } from \"../../hooks\";\n\ninterface HotkeysContextState {\n    /**\n     * Whether the context instance is being used within a tree which has a <HotkeysProvider>.\n     * It's technically ok if this is false, but not recommended, since that means any hotkeys\n     * bound with that context instance will not show up in the hotkeys help dialog.\n     */\n    hasProvider: boolean;\n\n    /** List of hotkeys accessible in the current scope, registered by currently mounted components, can be global or local. */\n    hotkeys: HotkeyConfig[];\n\n    /** Whether the global hotkeys dialog is open. */\n    isDialogOpen: boolean;\n}\n\ntype HotkeysAction =\n    | { type: \"ADD_HOTKEYS\" | \"REMOVE_HOTKEYS\"; payload: HotkeyConfig[] }\n    | { type: \"CLOSE_DIALOG\" | \"OPEN_DIALOG\" };\n\nexport type HotkeysContextInstance = [HotkeysContextState, React.Dispatch<HotkeysAction>];\n\nconst initialHotkeysState: HotkeysContextState = { hasProvider: false, hotkeys: [], isDialogOpen: false };\nconst noOpDispatch: React.Dispatch<HotkeysAction> = () => null;\n\n/**\n * A React context used to register and deregister hotkeys as components are mounted and unmounted in an application.\n * Users should take care to make sure that only _one_ of these is instantiated and used within an application, especially\n * if using global hotkeys.\n *\n * You will likely not be using this HotkeysContext directly, except in cases where you need to get a direct handle on an\n * existing context instance for advanced use cases involving nested HotkeysProviders.\n *\n * For more information, see the [HotkeysProvider documentation](https://blueprintjs.com/docs/#core/context/hotkeys-provider).\n */\nexport const HotkeysContext = React.createContext<HotkeysContextInstance>([initialHotkeysState, noOpDispatch]);\n\nconst hotkeysReducer = (state: HotkeysContextState, action: HotkeysAction) => {\n    switch (action.type) {\n        case \"ADD_HOTKEYS\":\n            // only pick up unique hotkeys which haven't been registered already\n            const newUniqueHotkeys = [] as any;\n            for (const a of action.payload) {\n                let isUnique = true;\n                for (const b of state.hotkeys) {\n                    isUnique &&= !shallowCompareKeys(a, b, { exclude: [\"onKeyDown\", \"onKeyUp\"] });\n                }\n                if (isUnique) {\n                    newUniqueHotkeys.push(a);\n                }\n            }\n            return {\n                ...state,\n                hotkeys: [...state.hotkeys, ...newUniqueHotkeys],\n            };\n        case \"REMOVE_HOTKEYS\":\n            return {\n                ...state,\n                hotkeys: state.hotkeys.filter(key => action.payload.indexOf(key) === -1),\n            };\n        case \"OPEN_DIALOG\":\n            return { ...state, isDialogOpen: true };\n        case \"CLOSE_DIALOG\":\n            return { ...state, isDialogOpen: false };\n        default:\n            return state;\n    }\n};\n\nexport interface HotkeysProviderProps {\n    /** The component subtree which will have access to this hotkeys context. */\n    children: React.ReactChild;\n\n    /** Optional props to customize the rendered hotkeys dialog. */\n    dialogProps?: Partial<Omit<HotkeysDialog2Props, \"hotkeys\">>;\n\n    /** If provided, this dialog render function will be used in place of the default implementation. */\n    renderDialog?: (state: HotkeysContextState, contextActions: { handleDialogClose: () => void }) => JSX.Element;\n\n    /** If provided, we will use this context instance instead of generating our own. */\n    value?: HotkeysContextInstance;\n}\n\n/**\n * Hotkeys context provider, necessary for the `useHotkeys` hook.\n *\n * @see https://blueprintjs.com/docs/#core/context/hotkeys-provider\n */\nexport const HotkeysProvider = ({ children, dialogProps, renderDialog, value }: HotkeysProviderProps) => {\n    const hasExistingContext = value != null;\n    const [state, dispatch] = value ?? React.useReducer(hotkeysReducer, { ...initialHotkeysState, hasProvider: true });\n    const handleDialogClose = React.useCallback(() => dispatch({ type: \"CLOSE_DIALOG\" }), []);\n\n    const dialog = renderDialog?.(state, { handleDialogClose }) ?? (\n        <HotkeysDialog2\n            {...dialogProps}\n            isOpen={state.isDialogOpen}\n            hotkeys={state.hotkeys}\n            onClose={handleDialogClose}\n        />\n    );\n\n    // if we are working with an existing context, we don't need to generate our own dialog\n    return (\n        <HotkeysContext.Provider value={[state, dispatch]}>\n            {children}\n            {hasExistingContext ? undefined : dialog}\n        </HotkeysContext.Provider>\n    );\n};\n"]}