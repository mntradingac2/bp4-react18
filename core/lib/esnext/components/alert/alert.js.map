{"version":3,"file":"alert.js","sourceRoot":"","sources":["../../../../src/components/alert/alert.tsx"],"names":[],"mappings":";;;;AAgBA,oEAAoC;AACpC,qDAA+B;AAE/B,yCAAgH;AAChH,gDAI6B;AAC7B,+CAA2C;AAC3C,6CAA0C;AAC1C,uCAA8C;AAmH9C,MAAa,KAAM,SAAQ,+BAAkC;IAClD,MAAM,CAAC,YAAY,GAAe;QACrC,kBAAkB,EAAE,KAAK;QACzB,qBAAqB,EAAE,KAAK;QAC5B,iBAAiB,EAAE,IAAI;QACvB,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,KAAK;KACjB,CAAC;IAEK,MAAM,CAAC,WAAW,GAAG,GAAG,2BAAkB,QAAQ,CAAC;IAEnD,MAAM;QACT,MAAM,EACF,kBAAkB,EAClB,qBAAqB,EACrB,QAAQ,EACR,SAAS,EACT,IAAI,EACJ,MAAM,EACN,OAAO,EACP,gBAAgB,EAChB,iBAAiB,EACjB,OAAO,EACP,GAAG,YAAY,EAClB,GAAG,IAAI,CAAC,KAAK,CAAC;QACf,OAAO,CACH,oBAAC,eAAM,OACC,YAAY,EAChB,SAAS,EAAE,IAAA,oBAAU,EAAC,gBAAO,CAAC,KAAK,EAAE,SAAS,CAAC,EAC/C,iBAAiB,EAAE,kBAAkB,EACrC,oBAAoB,EAAE,qBAAqB,EAC3C,OAAO,EAAE,IAAI,CAAC,YAAY,EAC1B,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe;YAE3C,6BAAK,SAAS,EAAE,gBAAO,CAAC,UAAU;gBAC9B,oBAAC,WAAI,IAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,GAAI;gBAC9C,6BAAK,SAAS,EAAE,gBAAO,CAAC,cAAc,IAAG,QAAQ,CAAO,CACtD;YACN,6BAAK,SAAS,EAAE,gBAAO,CAAC,YAAY;gBAChC,oBAAC,gBAAM,IAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,iBAAiB,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,GAAI;gBACjG,gBAAgB,IAAI,CACjB,oBAAC,gBAAM,IAAC,IAAI,EAAE,gBAAgB,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY,GAAI,CACpF,CACC,CACD,CACZ,CAAC;IACN,CAAC;IAES,aAAa,CAAC,KAAiB;QACrC,IAAI,KAAK,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE;YACxF,OAAO,CAAC,IAAI,CAAC,gCAAuB,CAAC,CAAC;SACzC;QAED,MAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC;QACzE,IAAI,KAAK,CAAC,kBAAkB,IAAI,CAAC,gBAAgB,EAAE;YAC/C,OAAO,CAAC,IAAI,CAAC,qCAA4B,CAAC,CAAC;SAC9C;QACD,IAAI,KAAK,CAAC,qBAAqB,IAAI,CAAC,gBAAgB,EAAE;YAClD,OAAO,CAAC,IAAI,CAAC,wCAA+B,CAAC,CAAC;SACjD;IACL,CAAC;IAEO,YAAY,GAAG,CAAC,GAAuC,EAAE,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAErG,aAAa,GAAG,CAAC,GAAsC,EAAE,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAEpG,uBAAuB,CAAC,SAAkB,EAAE,GAAuC;QACvF,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpD,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAC1C,OAAO,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC9B,CAAC;;AAtEL,sBAuEC","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, Intent, MaybeElement, Props } from \"../../common\";\nimport {\n    ALERT_WARN_CANCEL_ESCAPE_KEY,\n    ALERT_WARN_CANCEL_OUTSIDE_CLICK,\n    ALERT_WARN_CANCEL_PROPS,\n} from \"../../common/errors\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"../dialog/dialog\";\nimport { Icon, IconName } from \"../icon/icon\";\nimport { IOverlayLifecycleProps } from \"../overlay/overlay\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type AlertProps = IAlertProps;\n/** @deprecated use AlertProps */\nexport interface IAlertProps extends IOverlayLifecycleProps, Props {\n    /**\n     * Whether pressing <kbd>escape</kbd> when focused on the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canEscapeKeyCancel?: boolean;\n\n    /**\n     * Whether clicking outside the Alert should cancel the alert.\n     * If this prop is enabled, then either `onCancel` or `onClose` must also be defined.\n     *\n     * @default false\n     */\n    canOutsideClickCancel?: boolean;\n\n    /**\n     * The text for the cancel button.\n     * If this prop is defined, then either `onCancel` or `onClose` must also be defined.\n     */\n    cancelButtonText?: string;\n\n    /** Dialog contents. */\n    children?: React.ReactNode;\n\n    /**\n     * The text for the confirm (right-most) button.\n     * This button will always appear, and uses the value of the `intent` prop below.\n     *\n     * @default \"OK\"\n     */\n    confirmButtonText?: string;\n\n    /** Name of a Blueprint UI icon (or an icon element) to display on the left side. */\n    icon?: IconName | MaybeElement;\n\n    /**\n     * The intent to be applied to the confirm (right-most) button and the icon (if provided).\n     */\n    intent?: Intent;\n\n    /**\n     * Toggles the visibility of the alert.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * If set to `true`, the confirm button will be set to its loading state. The cancel button, if\n     * visible, will be disabled.\n     *\n     * @default false\n     */\n    loading?: boolean;\n\n    /**\n     * CSS styles to apply to the alert.\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\n     * This is used by React `CSSTransition` to know when a transition completes and must match\n     * the duration of the animation in CSS. Only set this prop if you override Blueprint's default\n     * transitions with new transitions of a different length.\n     *\n     * @default 300\n     */\n    transitionDuration?: number;\n\n    /**\n     * The container element into which the overlay renders its contents, when `usePortal` is `true`.\n     * This prop is ignored if `usePortal` is `false`.\n     *\n     * @default document.body\n     */\n    portalContainer?: HTMLElement;\n\n    /**\n     * Handler invoked when the alert is canceled. Alerts can be **canceled** in the following ways:\n     * - clicking the cancel button (if `cancelButtonText` is defined)\n     * - pressing the escape key (if `canEscapeKeyCancel` is enabled)\n     * - clicking on the overlay backdrop (if `canOutsideClickCancel` is enabled)\n     *\n     * If any of the `cancel` props are defined, then either `onCancel` or `onClose` must be defined.\n     */\n    onCancel?(evt?: React.SyntheticEvent<HTMLElement>): void;\n\n    /**\n     * Handler invoked when the confirm button is clicked. Alerts can be **confirmed** in the following ways:\n     * - clicking the confirm button\n     * - focusing on the confirm button and pressing `enter` or `space`\n     */\n    onConfirm?(evt?: React.SyntheticEvent<HTMLElement>): void;\n\n    /**\n     * Handler invoked when the Alert is confirmed or canceled; see `onConfirm` and `onCancel` for more details.\n     * First argument is `true` if confirmed, `false` otherwise.\n     * This is an alternative to defining separate `onConfirm` and `onCancel` handlers.\n     */\n    onClose?(confirmed: boolean, evt?: React.SyntheticEvent<HTMLElement>): void;\n}\n\n/**\n * Alert component.\n *\n * @see https://blueprintjs.com/docs/#core/components/alert\n */\nexport class Alert extends AbstractPureComponent2<AlertProps> {\n    public static defaultProps: AlertProps = {\n        canEscapeKeyCancel: false,\n        canOutsideClickCancel: false,\n        confirmButtonText: \"OK\",\n        isOpen: false,\n        loading: false,\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.Alert`;\n\n    public render() {\n        const {\n            canEscapeKeyCancel,\n            canOutsideClickCancel,\n            children,\n            className,\n            icon,\n            intent,\n            loading,\n            cancelButtonText,\n            confirmButtonText,\n            onClose,\n            ...overlayProps\n        } = this.props;\n        return (\n            <Dialog\n                {...overlayProps}\n                className={classNames(Classes.ALERT, className)}\n                canEscapeKeyClose={canEscapeKeyCancel}\n                canOutsideClickClose={canOutsideClickCancel}\n                onClose={this.handleCancel}\n                portalContainer={this.props.portalContainer}\n            >\n                <div className={Classes.ALERT_BODY}>\n                    <Icon icon={icon} size={40} intent={intent} />\n                    <div className={Classes.ALERT_CONTENTS}>{children}</div>\n                </div>\n                <div className={Classes.ALERT_FOOTER}>\n                    <Button loading={loading} intent={intent} text={confirmButtonText} onClick={this.handleConfirm} />\n                    {cancelButtonText && (\n                        <Button text={cancelButtonText} disabled={loading} onClick={this.handleCancel} />\n                    )}\n                </div>\n            </Dialog>\n        );\n    }\n\n    protected validateProps(props: AlertProps) {\n        if (props.onClose == null && (props.cancelButtonText == null) !== (props.onCancel == null)) {\n            console.warn(ALERT_WARN_CANCEL_PROPS);\n        }\n\n        const hasCancelHandler = props.onCancel != null || props.onClose != null;\n        if (props.canEscapeKeyCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_ESCAPE_KEY);\n        }\n        if (props.canOutsideClickCancel && !hasCancelHandler) {\n            console.warn(ALERT_WARN_CANCEL_OUTSIDE_CLICK);\n        }\n    }\n\n    private handleCancel = (evt?: React.SyntheticEvent<HTMLElement>) => this.internalHandleCallbacks(false, evt);\n\n    private handleConfirm = (evt: React.SyntheticEvent<HTMLElement>) => this.internalHandleCallbacks(true, evt);\n\n    private internalHandleCallbacks(confirmed: boolean, evt?: React.SyntheticEvent<HTMLElement>) {\n        const { onCancel, onClose, onConfirm } = this.props;\n        (confirmed ? onConfirm : onCancel)?.(evt);\n        onClose?.(confirmed, evt);\n    }\n}\n"]}