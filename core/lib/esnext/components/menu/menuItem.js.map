{"version":3,"file":"menuItem.js","sourceRoot":"","sources":["../../../../src/components/menu/menuItem.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable deprecation/deprecation */\n\nimport classNames from \"classnames\";\nimport { Modifiers } from \"popper.js\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, Position } from \"../../common\";\nimport { ActionProps, DISPLAYNAME_PREFIX, IElementRefProps, LinkProps } from \"../../common/props\";\nimport { clickElementOnKeyPress } from \"../../common/utils\";\nimport { Icon } from \"../icon/icon\";\nimport { IPopoverProps, Popover, PopoverInteractionKind } from \"../popover/popover\";\nimport { Text } from \"../text/text\";\nimport { Menu, MenuProps } from \"./menu\";\n\n/** @deprecated use MenuItemProps */\nexport type IMenuItemProps = MenuItemProps;\nexport interface MenuItemProps extends ActionProps, LinkProps, IElementRefProps<HTMLLIElement> {\n    /** Item text, required for usability. */\n    text: React.ReactNode;\n\n    /**\n     * Whether this item should render with an active appearance. Used to indicate keyboard focus.\n     */\n    active?: boolean;\n\n    /**\n     * Children of this component will be rendered in a __submenu__ that appears when hovering or\n     * clicking on this menu item.\n     *\n     * Use `text` prop for the content of the menu item itself.\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Whether this menu item is non-interactive. Enabling this prop will ignore `href`, `tabIndex`,\n     * and mouse event handlers (in particular click, down, enter, leave).\n     */\n    disabled?: boolean;\n\n    /**\n     * Right-aligned label text content, useful for displaying hotkeys.\n     *\n     * This prop actually supports JSX elements, but TypeScript will throw an error because\n     * `HTMLAttributes` only allows strings. Use `labelElement` to supply a JSX element in TypeScript.\n     */\n    label?: string;\n\n    /**\n     * A space-delimited list of class names to pass along to the right-aligned label wrapper element.\n     */\n    labelClassName?: string;\n\n    /**\n     * Right-aligned label content, useful for displaying hotkeys.\n     */\n    labelElement?: React.ReactNode;\n\n    /**\n     * Changes the ARIA `role` property structure of this MenuItem to accomodate for various\n     * different `role`s of the parent Menu `ul` element.\n     *\n     * If `menuitem`, role structure becomes:\n     *\n     * `<li role=\"none\"`\n     *     `<a role=\"menuitem\"`\n     *\n     * which is proper role structure for a `<ul role=\"menu\"` parent (this is the default `role` of a `Menu`).\n     *\n     * If `listoption`, role structure becomes:\n     *\n     * `<li role=\"option\"`\n     *     `<a role=undefined`\n     *\n     * which is proper role structure for a `<ul role=\"listbox\"` parent, or a `<select>` parent.\n     *\n     * If `listitem`, role structure becomes:\n     *\n     * `<li role=undefined`\n     *     `<a role=undefined`\n     *\n     * which can be used if this item is within a basic `<ul/>` (or `role=\"list\"`) parent.\n     *\n     * If `none`, role structure becomes:\n     *\n     * `<li role=\"none\"`\n     *     `<a role=undefined`\n     *\n     * which can be used if wrapping this item in a custom `<li>` parent.\n     *\n     * @default \"menuitem\"\n     */\n    roleStructure?: \"menuitem\" | \"listoption\" | \"listitem\" | \"none\";\n\n    /**\n     * Whether the text should be allowed to wrap to multiple lines.\n     * If `false`, text will be truncated with an ellipsis when it reaches `max-width`.\n     *\n     * @default false\n     */\n    multiline?: boolean;\n\n    /**\n     * Props to spread to `Popover`. Note that `content` and `minimal` cannot be\n     * changed and `usePortal` defaults to `false` so all submenus will live in\n     * the same container.\n     */\n    popoverProps?: Partial<IPopoverProps>;\n\n    /**\n     * Whether this item is selected. This will set the `aria-selected` attribute.\n     */\n    selected?: boolean;\n\n    /**\n     * Whether an enabled item without a submenu should automatically close its parent popover when clicked.\n     *\n     * @default true\n     */\n    shouldDismissPopover?: boolean;\n\n    /**\n     * Props to spread to the child `Menu` component if this item has a submenu.\n     */\n    submenuProps?: Partial<MenuProps>;\n\n    /**\n     * Name of the HTML tag that wraps the MenuItem.\n     *\n     * @default \"a\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * A space-delimited list of class names to pass along to the text wrapper element.\n     */\n    textClassName?: string;\n\n    /**\n     * HTML title to be passed to the <Text> component\n     */\n    htmlTitle?: string;\n}\n\n/**\n * Menu item component.\n *\n * @see https://blueprintjs.com/docs/#core/components/menu.menu-item\n */\nexport class MenuItem extends AbstractPureComponent2<MenuItemProps & React.AnchorHTMLAttributes<HTMLAnchorElement>> {\n    public static defaultProps: MenuItemProps = {\n        active: false,\n        disabled: false,\n        multiline: false,\n        popoverProps: {},\n        selected: false,\n        shouldDismissPopover: true,\n        text: \"\",\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.MenuItem`;\n\n    public render() {\n        const {\n            active,\n            className,\n            children,\n            disabled,\n            elementRef,\n            icon,\n            intent,\n            labelClassName,\n            labelElement,\n            multiline,\n            popoverProps,\n            roleStructure = \"menuitem\",\n            selected,\n            shouldDismissPopover,\n            submenuProps,\n            text,\n            textClassName,\n            tagName = \"a\",\n            htmlTitle,\n            ...htmlProps\n        } = this.props;\n\n        const hasIcon = icon != null;\n        const hasSubmenu = children != null;\n\n        const intentClass = Classes.intentClass(intent);\n        const anchorClasses = classNames(\n            Classes.MENU_ITEM,\n            intentClass,\n            {\n                [Classes.ACTIVE]: active,\n                [Classes.DISABLED]: disabled,\n                // prevent popover from closing when clicking on submenu trigger or disabled item\n                [Classes.POPOVER_DISMISS]: shouldDismissPopover && !disabled && !hasSubmenu,\n                [Classes.SELECTED]: selected || (active && intentClass === undefined),\n            },\n            className,\n        );\n\n        const [liRole, targetRole, ariaSelected] =\n            roleStructure === \"listoption\"\n                ? [\"option\", undefined, active || selected] // parent has listbox role, or is a <select>\n                : roleStructure === \"menuitem\"\n                ? [\"none\", \"menuitem\", undefined] // parent has menu role\n                : roleStructure === \"none\"\n                ? [\"none\", undefined, undefined] // if wrapping in a custom <li>\n                : [undefined, undefined, undefined]; // roleStructure === \"listitem\"-- needs no role prop, li is listitem by default\n\n        const target = React.createElement(\n            tagName,\n            {\n                // for menuitems, onClick when enter key pressed doesn't take effect like it does for a button-- fix this\n                onKeyDown: clickElementOnKeyPress([\"Enter\", \" \"]),\n                // if hasSubmenu, must apply correct role and tabIndex to the outer Popover2 target <span> instead of this target element\n                role: hasSubmenu ? \"none\" : targetRole,\n                tabIndex: hasSubmenu ? -1 : 0,\n                ...htmlProps,\n                ...(disabled ? DISABLED_PROPS : {}),\n                className: anchorClasses,\n            },\n            hasIcon ? (\n                // wrap icon in a <span> in case `icon` is a custom element rather than a built-in icon identifier,\n                // so that we always render this class\n                <span className={Classes.MENU_ITEM_ICON}>\n                    <Icon icon={icon} aria-hidden={true} tabIndex={-1} />\n                </span>\n            ) : undefined,\n            <Text className={classNames(Classes.FILL, textClassName)} ellipsize={!multiline} title={htmlTitle}>\n                {text}\n            </Text>,\n            this.maybeRenderLabel(labelElement),\n            hasSubmenu ? <Icon className={Classes.MENU_SUBMENU_ICON} icon=\"caret-right\" /> : undefined,\n        );\n\n        const liClasses = classNames({ [Classes.MENU_SUBMENU]: hasSubmenu });\n        return (\n            <li className={liClasses} ref={elementRef} role={liRole} aria-selected={ariaSelected}>\n                {this.maybeRenderPopover(target, { role: targetRole, tabIndex: 0 }, children)}\n            </li>\n        );\n    }\n\n    private maybeRenderLabel(labelElement?: React.ReactNode) {\n        const { label, labelClassName } = this.props;\n        if (label == null && labelElement == null) {\n            return null;\n        }\n        return (\n            <span className={classNames(Classes.MENU_ITEM_LABEL, labelClassName)}>\n                {label}\n                {labelElement}\n            </span>\n        );\n    }\n\n    private maybeRenderPopover(\n        target: JSX.Element,\n        popoverTargetProps: IPopoverProps[\"targetProps\"],\n        children?: React.ReactNode,\n    ) {\n        if (children == null) {\n            return target;\n        }\n        const { disabled, popoverProps, submenuProps } = this.props;\n        return (\n            <Popover\n                autoFocus={false}\n                captureDismiss={false}\n                disabled={disabled}\n                enforceFocus={false}\n                hoverCloseDelay={0}\n                interactionKind={PopoverInteractionKind.HOVER}\n                modifiers={SUBMENU_POPOVER_MODIFIERS}\n                targetProps={popoverTargetProps}\n                position={Position.RIGHT_TOP}\n                usePortal={false}\n                {...popoverProps}\n                content={<Menu {...submenuProps}>{children}</Menu>}\n                minimal={true}\n                popoverClassName={classNames(Classes.MENU_SUBMENU, popoverProps?.popoverClassName)}\n                target={target}\n            />\n        );\n    }\n}\n\nconst SUBMENU_POPOVER_MODIFIERS: Modifiers = {\n    // 20px padding - scrollbar width + a bit\n    flip: { boundariesElement: \"viewport\", padding: 20 },\n    // shift popover up 5px so MenuItems align\n    offset: { offset: -5 },\n    preventOverflow: { boundariesElement: \"viewport\", padding: 20 },\n};\n\n// props to ignore when disabled\nconst DISABLED_PROPS: React.AnchorHTMLAttributes<HTMLAnchorElement> = {\n    href: undefined,\n    onClick: undefined,\n    onMouseDown: undefined,\n    onMouseEnter: undefined,\n    onMouseLeave: undefined,\n    tabIndex: -1,\n};\n"]}