{"version":3,"file":"tabs.js","sourceRoot":"","sources":["../../../../src/components/tabs/tabs.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\nimport * as Utils from \"../../common/utils\";\nimport { Tab, TabId, TabProps } from \"./tab\";\nimport { generateTabPanelId, generateTabTitleId, TabTitle } from \"./tabTitle\";\n\nexport const Expander: React.FC = () => <div className={Classes.FLEX_EXPANDER} />;\n\ntype TabElement = React.ReactElement<TabProps & { children: React.ReactNode }>;\n\nconst TAB_SELECTOR = `.${Classes.TAB}`;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type TabsProps = ITabsProps;\n/** @deprecated use TabsProps */\nexport interface ITabsProps extends Props {\n    /**\n     * Whether the selected tab indicator should animate its movement.\n     *\n     * @default true\n     */\n    animate?: boolean;\n\n    /** Tab elements. */\n    children?: React.ReactNode;\n\n    /**\n     * Initial selected tab `id`, for uncontrolled usage.\n     * Note that this prop refers only to `<Tab>` children; other types of elements are ignored.\n     *\n     * @default first tab\n     */\n    defaultSelectedTabId?: TabId;\n\n    /**\n     * Unique identifier for this `Tabs` container. This will be combined with the `id` of each\n     * `Tab` child to generate ARIA accessibility attributes. IDs are required and should be\n     * unique on the page to support server-side rendering.\n     */\n    id: TabId;\n\n    /**\n     * If set to `true`, the tab titles will display with larger styling.\n     * This will apply large styles only to the tabs at this level, not to nested tabs.\n     *\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * Whether inactive tab panels should be removed from the DOM and unmounted in React.\n     * This can be a performance enhancement when rendering many complex panels, but requires\n     * careful support for unmounting and remounting.\n     *\n     * @default false\n     */\n    renderActiveTabPanelOnly?: boolean;\n\n    /**\n     * Selected tab `id`, for controlled usage.\n     * Providing this prop will put the component in controlled mode.\n     * Unknown ids will result in empty selection (no errors).\n     */\n    selectedTabId?: TabId;\n\n    /**\n     * Whether to show tabs stacked vertically on the left side.\n     *\n     * @default false\n     */\n    vertical?: boolean;\n\n    /**\n     * Whether to make the tabs list fill the height of its parent.\n     *\n     * This has no effect when `vertical={true}`.\n     * This is not recommended when tab panels are defined within this component subtree, as the height computation will\n     * include the panel height, which is usually not intended. Instead, it works well if the panels are rendered\n     * elsewhere in the React tree.\n     *\n     * @default false\n     */\n    fill?: boolean;\n\n    /**\n     * A callback function that is invoked when a tab in the tab list is clicked.\n     */\n    onChange?(newTabId: TabId, prevTabId: TabId | undefined, event: React.MouseEvent<HTMLElement>): void;\n}\n\nexport interface ITabsState {\n    indicatorWrapperStyle?: React.CSSProperties;\n    selectedTabId?: TabId;\n}\n\n/**\n * Tabs component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tabs\n */\nexport class Tabs extends AbstractPureComponent2<TabsProps, ITabsState> {\n    /** Insert a `Tabs.Expander` between any two children to right-align all subsequent children. */\n    public static Expander = Expander;\n\n    public static Tab = Tab;\n\n    public static defaultProps: Partial<TabsProps> = {\n        animate: true,\n        fill: false,\n        large: false,\n        renderActiveTabPanelOnly: false,\n        vertical: false,\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.Tabs`;\n\n    public static getDerivedStateFromProps({ selectedTabId }: TabsProps) {\n        if (selectedTabId !== undefined) {\n            // keep state in sync with controlled prop, so state is canonical source of truth\n            return { selectedTabId };\n        }\n        return null;\n    }\n\n    private tablistElement: HTMLDivElement | null = null;\n\n    private refHandlers = {\n        tablist: (tabElement: HTMLDivElement) => (this.tablistElement = tabElement),\n    };\n\n    constructor(props: TabsProps) {\n        super(props);\n        const selectedTabId = this.getInitialSelectedTabId();\n        this.state = { selectedTabId };\n    }\n\n    public render() {\n        const { indicatorWrapperStyle, selectedTabId } = this.state;\n\n        const tabTitles = React.Children.map(this.props.children, this.renderTabTitle);\n\n        const tabPanels = this.getTabChildren()\n            .filter(this.props.renderActiveTabPanelOnly ? tab => tab.props.id === selectedTabId : () => true)\n            .map(this.renderTabPanel);\n\n        const tabIndicator = this.props.animate ? (\n            <div className={Classes.TAB_INDICATOR_WRAPPER} style={indicatorWrapperStyle}>\n                <div className={Classes.TAB_INDICATOR} />\n            </div>\n        ) : null;\n\n        const classes = classNames(Classes.TABS, this.props.className, {\n            [Classes.VERTICAL]: this.props.vertical,\n            [Classes.FILL]: this.props.fill,\n        });\n        const tabListClasses = classNames(Classes.TAB_LIST, {\n            [Classes.LARGE]: this.props.large,\n        });\n\n        return (\n            <div className={classes}>\n                <div\n                    className={tabListClasses}\n                    onKeyDown={this.handleKeyDown}\n                    onKeyPress={this.handleKeyPress}\n                    ref={this.refHandlers.tablist}\n                    role=\"tablist\"\n                >\n                    {tabIndicator}\n                    {tabTitles}\n                </div>\n                {tabPanels}\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        this.moveSelectionIndicator(false);\n    }\n\n    public componentDidUpdate(prevProps: TabsProps, prevState: ITabsState) {\n        if (this.state.selectedTabId !== prevState.selectedTabId) {\n            this.moveSelectionIndicator();\n        } else if (prevState.selectedTabId != null) {\n            // comparing React nodes is difficult to do with simple logic, so\n            // shallowly compare just their props as a workaround.\n            const didChildrenChange = !Utils.arraysEqual(\n                this.getTabChildrenProps(prevProps),\n                this.getTabChildrenProps(),\n                Utils.shallowCompareKeys,\n            );\n            if (didChildrenChange) {\n                this.moveSelectionIndicator();\n            }\n        }\n    }\n\n    private getInitialSelectedTabId() {\n        // NOTE: providing an unknown ID will hide the selection\n        const { defaultSelectedTabId, selectedTabId } = this.props;\n        if (selectedTabId !== undefined) {\n            return selectedTabId;\n        } else if (defaultSelectedTabId !== undefined) {\n            return defaultSelectedTabId;\n        } else {\n            // select first tab in absence of user input\n            const tabs = this.getTabChildren();\n            return tabs.length === 0 ? undefined : tabs[0].props.id;\n        }\n    }\n\n    private getKeyCodeDirection(e: React.KeyboardEvent<HTMLElement>) {\n        if (isEventKeyCode(e, Keys.ARROW_LEFT, Keys.ARROW_UP)) {\n            return -1;\n        } else if (isEventKeyCode(e, Keys.ARROW_RIGHT, Keys.ARROW_DOWN)) {\n            return 1;\n        }\n        return undefined;\n    }\n\n    private getTabChildrenProps(props: TabsProps & { children?: React.ReactNode } = this.props) {\n        return this.getTabChildren(props).map(child => child.props);\n    }\n\n    /** Filters children to only `<Tab>`s */\n    private getTabChildren(props: TabsProps & { children?: React.ReactNode } = this.props) {\n        return React.Children.toArray(props.children).filter(isTabElement);\n    }\n\n    /** Queries root HTML element for all tabs with optional filter selector */\n    private getTabElements(subselector = \"\") {\n        if (this.tablistElement == null) {\n            return [];\n        }\n        return Array.from(this.tablistElement.querySelectorAll(TAB_SELECTOR + subselector));\n    }\n\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        const focusedElement = Utils.getActiveElement(this.tablistElement)?.closest(TAB_SELECTOR);\n        // rest of this is potentially expensive and futile, so bail if no tab is focused\n        if (focusedElement == null) {\n            return;\n        }\n\n        // must rely on DOM state because we have no way of mapping `focusedElement` to a JSX.Element\n        const enabledTabElements = this.getTabElements().filter(el => el.getAttribute(\"aria-disabled\") === \"false\");\n        const focusedIndex = enabledTabElements.indexOf(focusedElement);\n        const direction = this.getKeyCodeDirection(e);\n\n        if (focusedIndex >= 0 && direction !== undefined) {\n            e.preventDefault();\n            const { length } = enabledTabElements;\n            // auto-wrapping at 0 and `length`\n            const nextFocusedIndex = (focusedIndex + direction + length) % length;\n            (enabledTabElements[nextFocusedIndex] as HTMLElement).focus();\n        }\n    };\n\n    private handleKeyPress = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        const targetTabElement = (e.target as HTMLElement).closest(TAB_SELECTOR) as HTMLElement;\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        // eslint-disable-next-line deprecation/deprecation\n        if (targetTabElement != null && Keys.isKeyboardClick(e.which)) {\n            e.preventDefault();\n            targetTabElement.click();\n        }\n    };\n\n    private handleTabClick = (newTabId: TabId, event: React.MouseEvent<HTMLElement>) => {\n        this.props.onChange?.(newTabId, this.state.selectedTabId, event);\n        if (this.props.selectedTabId === undefined) {\n            this.setState({ selectedTabId: newTabId });\n        }\n    };\n\n    /**\n     * Calculate the new height, width, and position of the tab indicator.\n     * Store the CSS values so the transition animation can start.\n     */\n    private moveSelectionIndicator(animate = true) {\n        if (this.tablistElement == null || !this.props.animate) {\n            return;\n        }\n\n        const tabIdSelector = `${TAB_SELECTOR}[data-tab-id=\"${this.state.selectedTabId}\"]`;\n        const selectedTabElement = this.tablistElement.querySelector(tabIdSelector) as HTMLElement;\n\n        let indicatorWrapperStyle: React.CSSProperties = { display: \"none\" };\n        if (selectedTabElement != null) {\n            const { clientHeight, clientWidth, offsetLeft, offsetTop } = selectedTabElement;\n            indicatorWrapperStyle = {\n                height: clientHeight,\n                transform: `translateX(${Math.floor(offsetLeft)}px) translateY(${Math.floor(offsetTop)}px)`,\n                width: clientWidth,\n            };\n\n            if (!animate) {\n                indicatorWrapperStyle.transition = \"none\";\n            }\n        }\n        this.setState({ indicatorWrapperStyle });\n    }\n\n    private renderTabPanel = (tab: TabElement) => {\n        const { className, panel, id, panelClassName } = tab.props;\n        if (panel === undefined) {\n            return undefined;\n        }\n        return (\n            <div\n                aria-labelledby={generateTabTitleId(this.props.id, id)}\n                aria-hidden={id !== this.state.selectedTabId}\n                className={classNames(Classes.TAB_PANEL, className, panelClassName)}\n                id={generateTabPanelId(this.props.id, id)}\n                key={id}\n                role=\"tabpanel\"\n            >\n                {panel}\n            </div>\n        );\n    };\n\n    private renderTabTitle = (child: React.ReactNode) => {\n        if (isTabElement(child)) {\n            const { id } = child.props;\n            return (\n                <TabTitle\n                    {...child.props}\n                    parentId={this.props.id}\n                    onClick={this.handleTabClick}\n                    selected={id === this.state.selectedTabId}\n                />\n            );\n        }\n        return child;\n    };\n}\n\nfunction isEventKeyCode(e: React.KeyboardEvent<HTMLElement>, ...codes: number[]) {\n    // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n    // eslint-disable-next-line deprecation/deprecation\n    return codes.indexOf(e.which) >= 0;\n}\n\nfunction isTabElement(child: any): child is TabElement {\n    return Utils.isElementOfType(child, Tab);\n}\n"]}