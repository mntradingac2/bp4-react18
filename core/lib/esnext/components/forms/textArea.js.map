{"version":3,"file":"textArea.js","sourceRoot":"","sources":["../../../../src/components/forms/textArea.tsx"],"names":[],"mappings":";;;;AAgBA,oEAAoC;AACpC,qDAA+B;AAE/B,yCAAmF;AACnF,8CAA4E;AA2C5E,MAAa,QAAS,SAAQ,+BAAoD;IACvE,MAAM,CAAC,WAAW,GAAG,GAAG,0BAAkB,WAAW,CAAC;IAEtD,KAAK,GAAkB,EAAE,CAAC;IAG1B,eAAe,GAA+B,IAAI,CAAC;IAElD,SAAS,GAA2C,IAAA,mBAAU,EAClE,IAAI,EACJ,iBAAiB,EACjB,IAAI,CAAC,KAAK,CAAC,QAAQ,CACtB,CAAC;IAEM,6BAA6B,GAAG,GAAG,EAAE;QACzC,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE;YAC3D,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;YAC9C,IAAI,YAAY,GAAG,CAAC,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;aAC3C;SACJ;IACL,CAAC,CAAC;IAEK,iBAAiB;QACpB,IAAI,CAAC,6BAA6B,EAAE,CAAC;IACzC,CAAC;IAEM,kBAAkB,CAAC,SAAwB;QAC9C,IAAI,SAAS,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YAC5C,IAAA,eAAM,EAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,CAAC,SAAS,GAAG,IAAA,mBAAU,EAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC1E,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;SACrD;QAED,IAAI,SAAS,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YAC9E,IAAI,CAAC,6BAA6B,EAAE,CAAC;SACxC;IACL,CAAC;IAEM,MAAM;QACT,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAErG,MAAM,WAAW,GAAG,IAAA,oBAAU,EAC1B,gBAAO,CAAC,KAAK,EACb,gBAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAC3B;YACI,CAAC,gBAAO,CAAC,IAAI,CAAC,EAAE,IAAI;YACpB,CAAC,gBAAO,CAAC,KAAK,CAAC,EAAE,KAAK;YACtB,CAAC,gBAAO,CAAC,KAAK,CAAC,EAAE,KAAK;SACzB,EACD,SAAS,CACZ,CAAC;QAGF,IAAI,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,SAAS,CAAC;QAC/B,IAAI,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE;YAG7C,KAAK,GAAG;gBACJ,GAAG,KAAK;gBACR,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI;aACnC,CAAC;SACL;QAED,OAAO,CACH,qCACQ,SAAS,EACb,SAAS,EAAE,WAAW,EACtB,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,GAAG,EAAE,IAAI,CAAC,SAAS,EACnB,KAAK,EAAE,KAAK,GACd,CACL,CAAC;IACN,CAAC;IAEO,YAAY,GAAG,CAAC,CAAyC,EAAE,EAAE;QACjE,IAAI,CAAC,6BAA6B,EAAE,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;;AA9EN,4BA+EC","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, refHandler, setRef } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, IntentProps, Props } from \"../../common/props\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type TextAreaProps = ITextAreaProps;\n/** @deprecated use TextAreaProps */\nexport interface ITextAreaProps extends IntentProps, Props, React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n    /**\n     * Whether the text area should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /**\n     * Whether the text area should appear with large styling.\n     */\n    large?: boolean;\n\n    /**\n     * Whether the text area should appear with small styling.\n     */\n    small?: boolean;\n\n    /**\n     * Whether the text area should automatically grow vertically to accomodate content.\n     */\n    growVertically?: boolean;\n\n    /**\n     * Ref handler that receives HTML `<textarea>` element backing this component.\n     */\n    inputRef?: React.Ref<HTMLTextAreaElement>;\n}\n\nexport interface TextAreaState {\n    height?: number;\n}\n\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\n/**\n * Text area component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text-inputs.text-area\n */\nexport class TextArea extends AbstractPureComponent2<TextAreaProps, TextAreaState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.TextArea`;\n\n    public state: TextAreaState = {};\n\n    // used to measure and set the height of the component on first mount\n    public textareaElement: HTMLTextAreaElement | null = null;\n\n    private handleRef: React.RefCallback<HTMLTextAreaElement> = refHandler(\n        this,\n        \"textareaElement\",\n        this.props.inputRef,\n    );\n\n    private maybeSyncHeightToScrollHeight = () => {\n        if (this.props.growVertically && this.textareaElement != null) {\n            const { scrollHeight } = this.textareaElement;\n            if (scrollHeight > 0) {\n                this.setState({ height: scrollHeight });\n            }\n        }\n    };\n\n    public componentDidMount() {\n        this.maybeSyncHeightToScrollHeight();\n    }\n\n    public componentDidUpdate(prevProps: TextAreaProps) {\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.handleRef = refHandler(this, \"textareaElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.textareaElement);\n        }\n\n        if (prevProps.value !== this.props.value || prevProps.style !== this.props.style) {\n            this.maybeSyncHeightToScrollHeight();\n        }\n    }\n\n    public render() {\n        const { className, fill, inputRef, intent, large, small, growVertically, ...htmlProps } = this.props;\n\n        const rootClasses = classNames(\n            Classes.INPUT,\n            Classes.intentClass(intent),\n            {\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.SMALL]: small,\n            },\n            className,\n        );\n\n        // add explicit height style while preserving user-supplied styles if they exist\n        let { style = {} } = htmlProps;\n        if (growVertically && this.state.height != null) {\n            // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n            // so we make a new one to add a property\n            style = {\n                ...style,\n                height: `${this.state.height}px`,\n            };\n        }\n\n        return (\n            <textarea\n                {...htmlProps}\n                className={rootClasses}\n                onChange={this.handleChange}\n                ref={this.handleRef}\n                style={style}\n            />\n        );\n    }\n\n    private handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        this.maybeSyncHeightToScrollHeight();\n        this.props.onChange?.(e);\n    };\n}\n"]}