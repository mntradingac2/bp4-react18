{"version":3,"file":"inputGroup.js","sourceRoot":"","sources":["../../../../src/components/forms/inputGroup.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport {\n    ControlledProps2,\n    DISPLAYNAME_PREFIX,\n    HTMLInputProps,\n    IControlledProps,\n    IntentProps,\n    MaybeElement,\n    Props,\n    removeNonHTMLProps,\n} from \"../../common/props\";\nimport { Icon, IconName } from \"../icon/icon\";\nimport { AsyncControllableInput } from \"./asyncControllableInput\";\nimport type { InputSharedProps } from \"./inputSharedProps\";\n\n/** @deprecated use InputGroupProps2 */\n// eslint-disable-next-line deprecation/deprecation\nexport type InputGroupProps = IInputGroupProps;\n\n/**\n * @deprecated use InputGroupProps2.\n *\n * NOTE: This interface does not extend HTMLInputProps due to incompatiblity with `IControlledProps`.\n * Instead, we union the props in the component definition, which does work and properly disallows `string[]` values.\n */\nexport interface IInputGroupProps\n    // eslint-disable-next-line deprecation/deprecation\n    extends IControlledProps,\n        IntentProps,\n        Props {\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler, or if working with certain libraries like __redux-form__.\n     *\n     * @default false\n     */\n    asyncControl?: boolean;\n\n    /**\n     * Whether the input is disabled.\n     *\n     * Note that `rightElement` must be disabled separately; this prop will not affect it.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Whether the component should take up the full width of its container.\n     */\n    fill?: boolean;\n\n    /** Ref handler or a ref object that receives HTML `<input>` element backing this component. */\n    inputRef?: React.Ref<HTMLInputElement>;\n\n    /**\n     * Element to render on the left side of input.\n     * This prop is mutually exclusive with `leftIcon`.\n     */\n    leftElement?: JSX.Element;\n\n    /**\n     * Name of a Blueprint UI icon to render on the left side of the input group,\n     * before the user's cursor.  This prop is mutually exclusive with `leftElement`.\n     * Usage with content is deprecated.  Use `leftElement` for elements.\n     */\n    leftIcon?: IconName | MaybeElement;\n\n    /** Whether this input should use large styles. */\n    large?: boolean;\n\n    /** Whether this input should use small styles. */\n    small?: boolean;\n\n    /** Placeholder text in the absence of any value. */\n    placeholder?: string;\n\n    /**\n     * Whether the input is read-only.\n     *\n     * Note that `rightElement` must be disabled or made read-only separately;\n     * this prop will not affect it.\n     *\n     * @default false\n     */\n    readOnly?: boolean;\n\n    /**\n     * Element to render on right side of input.\n     * For best results, use a minimal button, tag, or small spinner.\n     */\n    rightElement?: JSX.Element;\n\n    /** Whether the input (and any buttons) should appear with rounded caps. */\n    round?: boolean;\n\n    /**\n     * HTML `input` type attribute.\n     *\n     * @default \"text\"\n     */\n    type?: string;\n}\n\n/** @deprecated use InputGroupProps2 */\nexport type IInputGroupProps2 = InputGroupProps2;\n\nexport interface InputGroupProps2\n    extends Omit<HTMLInputProps, keyof ControlledProps2>,\n        ControlledProps2,\n        InputSharedProps {\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler, or if working with certain libraries like __redux-form__.\n     *\n     * @default false\n     */\n    asyncControl?: boolean;\n\n    /** Whether this input should use large styles. */\n    large?: boolean;\n\n    /** Whether this input should use small styles. */\n    small?: boolean;\n\n    /** Whether the input (and any buttons) should appear with rounded caps. */\n    round?: boolean;\n\n    /**\n     * Name of the HTML tag that contains the input group.\n     *\n     * @default \"div\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * HTML `input` type attribute.\n     *\n     * @default \"text\"\n     */\n    type?: string;\n}\n\nexport interface IInputGroupState {\n    leftElementWidth?: number;\n    rightElementWidth?: number;\n}\n\n/**\n * Input group component.\n *\n * @see https://blueprintjs.com/docs/#core/components/text-inputs.input-group\n */\nexport class InputGroup extends AbstractPureComponent2<InputGroupProps2, IInputGroupState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.InputGroup`;\n\n    public state: IInputGroupState = {};\n\n    private leftElement: HTMLElement | null = null;\n\n    private rightElement: HTMLElement | null = null;\n\n    private refHandlers = {\n        leftElement: (ref: HTMLSpanElement | null) => (this.leftElement = ref),\n        rightElement: (ref: HTMLSpanElement | null) => (this.rightElement = ref),\n    };\n\n    public render() {\n        const {\n            asyncControl = false,\n            className,\n            disabled,\n            fill,\n            inputClassName,\n            inputRef,\n            intent,\n            large,\n            readOnly,\n            round,\n            small,\n            tagName = \"div\",\n        } = this.props;\n        const inputGroupClasses = classNames(\n            Classes.INPUT_GROUP,\n            Classes.intentClass(intent),\n            {\n                [Classes.DISABLED]: disabled,\n                [Classes.READ_ONLY]: readOnly,\n                [Classes.FILL]: fill,\n                [Classes.LARGE]: large,\n                [Classes.SMALL]: small,\n                [Classes.ROUND]: round,\n            },\n            className,\n        );\n        const style: React.CSSProperties = {\n            ...this.props.style,\n            paddingLeft: this.state.leftElementWidth,\n            paddingRight: this.state.rightElementWidth,\n        };\n        const inputProps = {\n            type: \"text\",\n            ...removeNonHTMLProps(this.props),\n            className: classNames(Classes.INPUT, inputClassName),\n            style,\n        };\n        const inputElement = asyncControl ? (\n            <AsyncControllableInput {...inputProps} inputRef={inputRef} />\n        ) : (\n            <input {...inputProps} ref={inputRef} />\n        );\n\n        return React.createElement(\n            tagName,\n            { className: inputGroupClasses },\n            this.maybeRenderLeftElement(),\n            inputElement,\n            this.maybeRenderRightElement(),\n        );\n    }\n\n    public componentDidMount() {\n        this.updateInputWidth();\n    }\n\n    public componentDidUpdate(prevProps: InputGroupProps2) {\n        const { leftElement, rightElement } = this.props;\n        if (prevProps.leftElement !== leftElement || prevProps.rightElement !== rightElement) {\n            this.updateInputWidth();\n        }\n    }\n\n    protected validateProps(props: InputGroupProps2) {\n        if (props.leftElement != null && props.leftIcon != null) {\n            console.warn(Errors.INPUT_WARN_LEFT_ELEMENT_LEFT_ICON_MUTEX);\n        }\n    }\n\n    private maybeRenderLeftElement() {\n        const { leftElement, leftIcon } = this.props;\n\n        if (leftElement != null) {\n            return (\n                <span className={Classes.INPUT_LEFT_CONTAINER} ref={this.refHandlers.leftElement}>\n                    {leftElement}\n                </span>\n            );\n        } else if (leftIcon != null) {\n            return <Icon icon={leftIcon} aria-hidden={true} tabIndex={-1} />;\n        }\n\n        return undefined;\n    }\n\n    private maybeRenderRightElement() {\n        const { rightElement } = this.props;\n        if (rightElement == null) {\n            return undefined;\n        }\n        return (\n            <span className={Classes.INPUT_ACTION} ref={this.refHandlers.rightElement}>\n                {rightElement}\n            </span>\n        );\n    }\n\n    private updateInputWidth() {\n        const { leftElementWidth, rightElementWidth } = this.state;\n\n        if (this.leftElement != null) {\n            const { clientWidth } = this.leftElement;\n            // small threshold to prevent infinite loops\n            if (leftElementWidth === undefined || Math.abs(clientWidth - leftElementWidth) > 2) {\n                this.setState({ leftElementWidth: clientWidth });\n            }\n        } else {\n            this.setState({ leftElementWidth: undefined });\n        }\n\n        if (this.rightElement != null) {\n            const { clientWidth } = this.rightElement;\n            // small threshold to prevent infinite loops\n            if (rightElementWidth === undefined || Math.abs(clientWidth - rightElementWidth) > 2) {\n                this.setState({ rightElementWidth: clientWidth });\n            }\n        } else {\n            this.setState({ rightElementWidth: undefined });\n        }\n    }\n}\n"]}