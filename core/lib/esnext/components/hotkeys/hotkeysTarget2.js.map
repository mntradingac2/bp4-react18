{"version":3,"file":"hotkeysTarget2.js","sourceRoot":"","sources":["../../../../src/components/hotkeys/hotkeysTarget2.tsx"],"names":[],"mappings":";;;;AAgBA,qDAA+B;AAE/B,oEAA8C;AAC9C,8CAA+C;AAC/C,uCAA0E;AA0BnE,MAAM,cAAc,GAAG,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAuB,EAAe,EAAE;IAC/F,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,IAAA,kBAAU,EAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAGpE,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACjB,IAAI,CAAC,IAAA,iBAAS,EAAC,YAAY,CAAC,EAAE;YAC1B,IAAI,OAAO,QAAQ,KAAK,UAAU,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;gBAChE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,sCAAsC,CAAC,CAAC;aAChE;SACJ;IACL,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;QAChC,OAAO,QAAQ,CAAC,EAAE,aAAa,EAAE,WAAW,EAAE,CAAC,CAAC;KACnD;SAAM;QACH,OAAO,QAAQ,CAAC;KACnB;AACL,CAAC,CAAC;AAjBW,QAAA,cAAc,kBAiBzB","sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport * as Errors from \"../../common/errors\";\nimport { isNodeEnv } from \"../../common/utils\";\nimport { HotkeyConfig, useHotkeys, UseHotkeysOptions } from \"../../hooks\";\n\n/** Identical to the return type of `useHotkeys` hook. */\nexport interface HotkeysTarget2RenderProps {\n    handleKeyDown: React.KeyboardEventHandler<HTMLElement>;\n    handleKeyUp: React.KeyboardEventHandler<HTMLElement>;\n}\n\nexport interface HotkeysTarget2Props {\n    /**\n     * Render prop which receives the same callback handlers generated by the `useHotkeys` hook.\n     * If your hotkey definitions are all global, you may supply an element instead.\n     */\n    children: JSX.Element | ((props: HotkeysTarget2RenderProps) => JSX.Element);\n\n    /** Hotkey definitions. */\n    hotkeys: readonly HotkeyConfig[];\n\n    /** Hook customization options. */\n    options?: UseHotkeysOptions;\n}\n\n/**\n * Utility component which allows consumers to use the new `useHotkeys` hook inside\n * React component classes. The implementation simply passes through to the hook.\n */\nexport const HotkeysTarget2 = ({ children, hotkeys, options }: HotkeysTarget2Props): JSX.Element => {\n    const { handleKeyDown, handleKeyUp } = useHotkeys(hotkeys, options);\n\n    // run props validation\n    React.useEffect(() => {\n        if (!isNodeEnv(\"production\")) {\n            if (typeof children !== \"function\" && hotkeys.some(h => !h.global)) {\n                console.error(Errors.HOTKEYS_TARGET2_CHILDREN_LOCAL_HOTKEYS);\n            }\n        }\n    }, [hotkeys]);\n\n    if (typeof children === \"function\") {\n        return children({ handleKeyDown, handleKeyUp });\n    } else {\n        return children;\n    }\n};\n"]}