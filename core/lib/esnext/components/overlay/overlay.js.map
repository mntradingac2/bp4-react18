{"version":3,"file":"overlay.js","sourceRoot":"","sources":["../../../../src/components/overlay/overlay.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { findDOMNode } from \"react-dom\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { AbstractPureComponent2, Classes, Keys } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, HTMLDivProps, Props } from \"../../common/props\";\nimport { getActiveElement, isFunction } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type OverlayableProps = IOverlayableProps;\n/** @deprecated use OverlayableProps */\nexport interface IOverlayableProps extends IOverlayLifecycleProps {\n    /**\n     * Whether the overlay should acquire application focus when it first opens.\n     *\n     * @default true\n     */\n    autoFocus?: boolean;\n\n    /**\n     * Whether pressing the `esc` key should invoke `onClose`.\n     *\n     * @default true\n     */\n    canEscapeKeyClose?: boolean;\n\n    /**\n     * Whether the overlay should prevent focus from leaving itself. That is, if the user attempts\n     * to focus an element outside the overlay and this prop is enabled, then the overlay will\n     * immediately bring focus back to itself. If you are nesting overlay components, either disable\n     * this prop on the \"outermost\" overlays or mark the nested ones `usePortal={false}`.\n     *\n     * @default true\n     */\n    enforceFocus?: boolean;\n\n    /**\n     * If `true` and `usePortal={true}`, the `Portal` containing the children is created and attached\n     * to the DOM when the overlay is opened for the first time; otherwise this happens when the\n     * component mounts. Lazy mounting provides noticeable performance improvements if you have lots\n     * of overlays at once, such as on each row of a table.\n     *\n     * @default true\n     */\n    lazy?: boolean;\n\n    /**\n     * Whether the application should return focus to the last active element in the\n     * document after this overlay closes.\n     *\n     * @default true\n     */\n    shouldReturnFocusOnClose?: boolean;\n\n    /**\n     * Indicates how long (in milliseconds) the overlay's enter/leave transition takes.\n     * This is used by React `CSSTransition` to know when a transition completes and must match\n     * the duration of the animation in CSS. Only set this prop if you override Blueprint's default\n     * transitions with new transitions of a different length.\n     *\n     * @default 300\n     */\n    transitionDuration?: number;\n\n    /**\n     * Whether the overlay should be wrapped in a `Portal`, which renders its contents in a new\n     * element attached to `portalContainer` prop.\n     *\n     * This prop essentially determines which element is covered by the backdrop: if `false`,\n     * then only its parent is covered; otherwise, the entire page is covered (because the parent\n     * of the `Portal` is the `<body>` itself).\n     *\n     * Set this prop to `false` on nested overlays (such as `Dialog` or `Popover`) to ensure that they\n     * are rendered above their parents.\n     *\n     * @default true\n     */\n    usePortal?: boolean;\n\n    /**\n     * Space-delimited string of class names applied to the `Portal` element if\n     * `usePortal={true}`.\n     */\n    portalClassName?: string;\n\n    /**\n     * The container element into which the overlay renders its contents, when `usePortal` is `true`.\n     * This prop is ignored if `usePortal` is `false`.\n     *\n     * @default document.body\n     */\n    portalContainer?: HTMLElement;\n\n    /**\n     * A list of DOM events which should be stopped from propagating through the Portal.\n     * This prop is ignored if `usePortal` is `false`.\n     *\n     * @see https://legacy.reactjs.org/docs/portals.html#event-bubbling-through-portals\n     * @see https://github.com/palantir/blueprint/issues/6124\n     */\n    portalStopPropagationEvents?: Array<keyof HTMLElementEventMap>;\n\n    /**\n     * A callback that is invoked when user interaction causes the overlay to close, such as\n     * clicking on the overlay or pressing the `esc` key (if enabled).\n     *\n     * Receives the event from the user's interaction, if there was an event (generally either a\n     * mouse or key event). Note that, since this component is controlled by the `isOpen` prop, it\n     * will not actually close itself until that prop becomes `false`.\n     */\n    onClose?: (event: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nexport type OverlayLifecycleProps = IOverlayLifecycleProps;\nexport interface IOverlayLifecycleProps {\n    /**\n     * Lifecycle method invoked just before the CSS _close_ transition begins on\n     * a child. Receives the DOM element of the child being closed.\n     */\n    onClosing?: (node: HTMLElement) => void;\n\n    /**\n     * Lifecycle method invoked just after the CSS _close_ transition ends but\n     * before the child has been removed from the DOM. Receives the DOM element\n     * of the child being closed.\n     */\n    onClosed?: (node: HTMLElement) => void;\n\n    /**\n     * Lifecycle method invoked just after mounting the child in the DOM but\n     * just before the CSS _open_ transition begins. Receives the DOM element of\n     * the child being opened.\n     */\n    onOpening?: (node: HTMLElement) => void;\n\n    /**\n     * Lifecycle method invoked just after the CSS _open_ transition ends.\n     * Receives the DOM element of the child being opened.\n     */\n    onOpened?: (node: HTMLElement) => void;\n}\n\nexport type BackdropProps = IBackdropProps;\nexport interface IBackdropProps {\n    /** CSS class names to apply to backdrop element. */\n    backdropClassName?: string;\n\n    /** HTML props for the backdrop element. */\n    backdropProps?: React.HTMLProps<HTMLDivElement>;\n\n    /**\n     * Whether clicking outside the overlay element (either on backdrop when present or on document)\n     * should invoke `onClose`.\n     *\n     * @default true\n     */\n    canOutsideClickClose?: boolean;\n\n    /**\n     * Whether a container-spanning backdrop element should be rendered behind the contents.\n     *\n     * @default true\n     */\n    hasBackdrop?: boolean;\n}\n\n// eslint-disable-next-line deprecation/deprecation\nexport type OverlayProps = IOverlayProps;\n/** @deprecated use OverlayProps */\nexport interface IOverlayProps extends OverlayableProps, IBackdropProps, Props {\n    /** Element to overlay. */\n    children?: React.ReactNode;\n\n    /**\n     * Toggles the visibility of the overlay and its children.\n     * This prop is required because the component is controlled.\n     */\n    isOpen: boolean;\n\n    /**\n     * Name of the transition for internal `CSSTransition`.\n     * Providing your own name here will require defining new CSS transition properties.\n     *\n     * @default Classes.OVERLAY\n     */\n    transitionName?: string;\n}\n\nexport interface IOverlayState {\n    hasEverOpened?: boolean;\n}\n\n/**\n * Overlay component.\n *\n * @see https://blueprintjs.com/docs/#core/components/overlay\n */\nexport class Overlay extends AbstractPureComponent2<OverlayProps, IOverlayState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Overlay`;\n\n    public static defaultProps: OverlayProps = {\n        autoFocus: true,\n        backdropProps: {},\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        isOpen: false,\n        lazy: true,\n        shouldReturnFocusOnClose: true,\n        transitionDuration: 300,\n        transitionName: Classes.OVERLAY,\n        usePortal: true,\n    };\n\n    public static getDerivedStateFromProps({ isOpen: hasEverOpened }: OverlayProps) {\n        if (hasEverOpened) {\n            return { hasEverOpened };\n        }\n        return null;\n    }\n\n    private static openStack: Overlay[] = [];\n\n    private static getLastOpened = () => Overlay.openStack[Overlay.openStack.length - 1];\n\n    private isAutoFocusing = false;\n\n    private lastActiveElementBeforeOpened: Element | null | undefined;\n\n    public state: IOverlayState = {\n        hasEverOpened: this.props.isOpen,\n    };\n\n    // an HTMLElement that contains the backdrop and any children, to query for focus target\n    public containerElement: HTMLElement | null = null;\n\n    // An empty, keyboard-focusable div at the beginning of the Overlay content\n    private startFocusTrapElement: HTMLDivElement | null = null;\n\n    // An empty, keyboard-focusable div at the end of the Overlay content\n    private endFocusTrapElement: HTMLDivElement | null = null;\n\n    private refHandlers = {\n        // HACKHACK: see https://github.com/palantir/blueprint/issues/3979\n        /* eslint-disable-next-line react/no-find-dom-node */\n        container: (ref: TransitionGroup | null) => (this.containerElement = findDOMNode(ref) as HTMLElement),\n        endFocusTrap: (ref: HTMLDivElement | null) => (this.endFocusTrapElement = ref),\n        startFocusTrap: (ref: HTMLDivElement | null) => (this.startFocusTrapElement = ref),\n    };\n\n    public render() {\n        // oh snap! no reason to render anything at all if we're being truly lazy\n        if (this.props.lazy && !this.state.hasEverOpened) {\n            return null;\n        }\n\n        const { autoFocus, children, className, enforceFocus, usePortal, isOpen } = this.props;\n\n        // TransitionGroup types require single array of children; does not support nested arrays.\n        // So we must collapse backdrop and children into one array, and every item must be wrapped in a\n        // Transition element (no ReactText allowed).\n        const childrenWithTransitions = isOpen ? React.Children.map(children, this.maybeRenderChild) ?? [] : [];\n\n        const maybeBackdrop = this.maybeRenderBackdrop();\n        if (maybeBackdrop !== null) {\n            childrenWithTransitions.unshift(maybeBackdrop);\n        }\n        if (isOpen && (autoFocus || enforceFocus) && childrenWithTransitions.length > 0) {\n            childrenWithTransitions.unshift(\n                this.renderDummyElement(\"__start\", {\n                    className: Classes.OVERLAY_START_FOCUS_TRAP,\n                    onFocus: this.handleStartFocusTrapElementFocus,\n                    onKeyDown: this.handleStartFocusTrapElementKeyDown,\n                    ref: this.refHandlers.startFocusTrap,\n                }),\n            );\n            if (enforceFocus) {\n                childrenWithTransitions.push(\n                    this.renderDummyElement(\"__end\", {\n                        className: Classes.OVERLAY_END_FOCUS_TRAP,\n                        onFocus: this.handleEndFocusTrapElementFocus,\n                        ref: this.refHandlers.endFocusTrap,\n                    }),\n                );\n            }\n        }\n\n        const containerClasses = classNames(\n            Classes.OVERLAY,\n            {\n                [Classes.OVERLAY_OPEN]: isOpen,\n                [Classes.OVERLAY_INLINE]: !usePortal,\n            },\n            className,\n        );\n\n        const transitionGroup = (\n            <TransitionGroup\n                appear={true}\n                aria-live=\"polite\"\n                className={containerClasses}\n                component=\"div\"\n                onKeyDown={this.handleKeyDown}\n                ref={this.refHandlers.container}\n            >\n                {childrenWithTransitions}\n            </TransitionGroup>\n        );\n        if (usePortal) {\n            return (\n                <Portal\n                    className={this.props.portalClassName}\n                    container={this.props.portalContainer}\n                    stopPropagationEvents={this.props.portalStopPropagationEvents}\n                >\n                    {transitionGroup}\n                </Portal>\n            );\n        } else {\n            return transitionGroup;\n        }\n    }\n\n    public componentDidMount() {\n        if (this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentDidUpdate(prevProps: OverlayProps) {\n        if (prevProps.isOpen && !this.props.isOpen) {\n            this.overlayWillClose();\n        } else if (!prevProps.isOpen && this.props.isOpen) {\n            this.overlayWillOpen();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.overlayWillClose();\n    }\n\n    /**\n     * @public for testing\n     * @internal\n     */\n    public bringFocusInsideOverlay() {\n        // always delay focus manipulation to just before repaint to prevent scroll jumping\n        return this.requestAnimationFrame(() => {\n            // container ref may be undefined between component mounting and Portal rendering\n            // activeElement may be undefined in some rare cases in IE\n            const activeElement = getActiveElement(this.containerElement);\n\n            if (this.containerElement == null || activeElement == null || !this.props.isOpen) {\n                return;\n            }\n\n            const isFocusOutsideModal = !this.containerElement.contains(activeElement);\n            if (isFocusOutsideModal) {\n                this.startFocusTrapElement?.focus({ preventScroll: true });\n                this.isAutoFocusing = false;\n            }\n        });\n    }\n\n    private maybeRenderChild = (child?: any) => {\n        if (isFunction(child)) {\n            child = child();\n        }\n\n        if (child == null) {\n            return null;\n        }\n\n        // add a special class to each child element that will automatically set the appropriate\n        // CSS position mode under the hood.\n        const decoratedChild =\n            typeof child === \"object\" ? (\n                React.cloneElement(child as React.ReactElement, {\n                    className: classNames((child as React.ReactElement).props.className, Classes.OVERLAY_CONTENT),\n                })\n            ) : (\n                <span className={Classes.OVERLAY_CONTENT}>{child}</span>\n            );\n        const { onOpening, onOpened, onClosing, transitionDuration, transitionName } = this.props;\n\n        return (\n            <CSSTransition\n                classNames={transitionName}\n                onEntering={onOpening}\n                onEntered={onOpened}\n                onExiting={onClosing}\n                onExited={this.handleTransitionExited}\n                timeout={transitionDuration}\n                addEndListener={this.handleTransitionAddEnd}\n            >\n                {decoratedChild}\n            </CSSTransition>\n        );\n    };\n\n    private maybeRenderBackdrop() {\n        const { backdropClassName, backdropProps, hasBackdrop, isOpen, transitionDuration, transitionName } =\n            this.props;\n\n        if (hasBackdrop && isOpen) {\n            return (\n                <CSSTransition\n                    classNames={transitionName}\n                    key=\"__backdrop\"\n                    timeout={transitionDuration}\n                    addEndListener={this.handleTransitionAddEnd}\n                >\n                    <div\n                        {...backdropProps}\n                        className={classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps?.className)}\n                        onMouseDown={this.handleBackdropMouseDown}\n                    />\n                </CSSTransition>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    private renderDummyElement(key: string, props: HTMLDivProps & { ref?: React.Ref<HTMLDivElement> }) {\n        const { transitionDuration, transitionName } = this.props;\n        return (\n            <CSSTransition\n                classNames={transitionName}\n                key={key}\n                addEndListener={this.handleTransitionAddEnd}\n                timeout={transitionDuration}\n                unmountOnExit={true}\n            >\n                <div tabIndex={0} {...props} />\n            </CSSTransition>\n        );\n    }\n\n    /**\n     * Ensures repeatedly pressing shift+tab keeps focus inside the Overlay. Moves focus to\n     * the `endFocusTrapElement` or the first keyboard-focusable element in the Overlay (excluding\n     * the `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    private handleStartFocusTrapElementFocus = (e: React.FocusEvent<HTMLDivElement>) => {\n        if (!this.props.enforceFocus || this.isAutoFocusing) {\n            return;\n        }\n        // e.relatedTarget will not be defined if this was a programmatic focus event, as is the\n        // case when we call this.bringFocusInsideOverlay() after a user clicked on the backdrop.\n        // Otherwise, we're handling a user interaction, and we should wrap around to the last\n        // element in this transition group.\n        if (\n            e.relatedTarget != null &&\n            this.containerElement!.contains(e.relatedTarget as Element) &&\n            e.relatedTarget !== this.endFocusTrapElement\n        ) {\n            this.endFocusTrapElement?.focus({ preventScroll: true });\n        }\n    };\n\n    /**\n     * Wrap around to the end of the dialog if `enforceFocus` is enabled.\n     */\n    private handleStartFocusTrapElementKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!this.props.enforceFocus) {\n            return;\n        }\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        /* eslint-disable-next-line deprecation/deprecation */\n        if (e.shiftKey && e.which === Keys.TAB) {\n            const lastFocusableElement = this.getKeyboardFocusableElements().pop();\n            if (lastFocusableElement != null) {\n                lastFocusableElement.focus();\n            } else {\n                this.endFocusTrapElement?.focus({ preventScroll: true });\n            }\n        }\n    };\n\n    /**\n     * Ensures repeatedly pressing tab keeps focus inside the Overlay. Moves focus to the\n     * `startFocusTrapElement` or the last keyboard-focusable element in the Overlay (excluding the\n     * `startFocusTrapElement`), depending on whether the element losing focus is inside the\n     * Overlay.\n     */\n    private handleEndFocusTrapElementFocus = (e: React.FocusEvent<HTMLDivElement>) => {\n        // No need for this.props.enforceFocus check here because this element is only rendered\n        // when that prop is true.\n        // During user interactions, e.relatedTarget will be defined, and we should wrap around to the\n        // \"start focus trap\" element.\n        // Otherwise, we're handling a programmatic focus event, which can only happen after a user\n        // presses shift+tab from the first focusable element in the overlay.\n        if (\n            e.relatedTarget != null &&\n            this.containerElement!.contains(e.relatedTarget as Element) &&\n            e.relatedTarget !== this.startFocusTrapElement\n        ) {\n            const firstFocusableElement = this.getKeyboardFocusableElements().shift();\n            // ensure we don't re-focus an already active element by comparing against e.relatedTarget\n            if (!this.isAutoFocusing && firstFocusableElement != null && firstFocusableElement !== e.relatedTarget) {\n                firstFocusableElement.focus();\n            } else {\n                this.startFocusTrapElement?.focus({ preventScroll: true });\n            }\n        } else {\n            const lastFocusableElement = this.getKeyboardFocusableElements().pop();\n            if (lastFocusableElement != null) {\n                lastFocusableElement.focus();\n            } else {\n                // Keeps focus within Overlay even if there are no keyboard-focusable children\n                this.startFocusTrapElement?.focus({ preventScroll: true });\n            }\n        }\n    };\n\n    private getKeyboardFocusableElements() {\n        const focusableElements: HTMLElement[] =\n            this.containerElement !== null\n                ? Array.from(\n                    // Order may not be correct if children elements use tabindex values > 0.\n                    // Selectors derived from this SO question:\n                    // https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus\n                    this.containerElement.querySelectorAll(\n                        [\n                            'a[href]:not([tabindex=\"-1\"])',\n                            'button:not([disabled]):not([tabindex=\"-1\"])',\n                            'details:not([tabindex=\"-1\"])',\n                            'input:not([disabled]):not([tabindex=\"-1\"])',\n                            'select:not([disabled]):not([tabindex=\"-1\"])',\n                            'textarea:not([disabled]):not([tabindex=\"-1\"])',\n                            '[tabindex]:not([tabindex=\"-1\"])',\n                        ].join(\",\"),\n                    ),\n                )\n                : [];\n\n        return focusableElements.filter(\n            el =>\n                !el.classList.contains(Classes.OVERLAY_START_FOCUS_TRAP) &&\n                !el.classList.contains(Classes.OVERLAY_END_FOCUS_TRAP),\n        );\n    }\n\n    private overlayWillClose() {\n        document.removeEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n\n        const { openStack } = Overlay;\n        const stackIndex = openStack.indexOf(this);\n        if (stackIndex !== -1) {\n            openStack.splice(stackIndex, 1);\n            if (openStack.length > 0) {\n                const lastOpenedOverlay = Overlay.getLastOpened();\n                // Only bring focus back to last overlay if it had autoFocus _and_ enforceFocus enabled.\n                // If `autoFocus={false}`, it's likely that the overlay never received focus in the first place,\n                // so it would be surprising for us to send it there. See https://github.com/palantir/blueprint/issues/4921\n                if (lastOpenedOverlay.props.autoFocus && lastOpenedOverlay.props.enforceFocus) {\n                    lastOpenedOverlay.bringFocusInsideOverlay();\n                    document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus, /* useCapture */ true);\n                }\n            }\n\n            if (openStack.filter(o => o.props.usePortal && o.props.hasBackdrop).length === 0) {\n                document.body.classList.remove(Classes.OVERLAY_OPEN);\n            }\n        }\n    }\n\n    private overlayWillOpen() {\n        const { getLastOpened, openStack } = Overlay;\n        if (openStack.length > 0) {\n            document.removeEventListener(\"focus\", getLastOpened().handleDocumentFocus, /* useCapture */ true);\n        }\n        openStack.push(this);\n\n        if (this.props.autoFocus) {\n            this.isAutoFocusing = true;\n            this.bringFocusInsideOverlay();\n        }\n\n        if (this.props.enforceFocus) {\n            // Focus events do not bubble, but setting useCapture allows us to listen in and execute\n            // our handler before all others\n            document.addEventListener(\"focus\", this.handleDocumentFocus, /* useCapture */ true);\n        }\n\n        if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n            document.addEventListener(\"mousedown\", this.handleDocumentClick);\n        }\n\n        if (this.props.hasBackdrop && this.props.usePortal) {\n            // add a class to the body to prevent scrolling of content below the overlay\n            document.body.classList.add(Classes.OVERLAY_OPEN);\n        }\n\n        this.lastActiveElementBeforeOpened = getActiveElement(this.containerElement);\n    }\n\n    private handleTransitionExited = (node: HTMLElement) => {\n        if (this.props.shouldReturnFocusOnClose && this.lastActiveElementBeforeOpened instanceof HTMLElement) {\n            this.lastActiveElementBeforeOpened.focus();\n        }\n        this.props.onClosed?.(node);\n    };\n\n    private handleBackdropMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n        const { backdropProps, canOutsideClickClose, enforceFocus, onClose } = this.props;\n        if (canOutsideClickClose) {\n            onClose?.(e);\n        }\n        if (enforceFocus) {\n            this.bringFocusInsideOverlay();\n        }\n        backdropProps?.onMouseDown?.(e);\n    };\n\n    private handleDocumentClick = (e: MouseEvent) => {\n        const { canOutsideClickClose, isOpen, onClose } = this.props;\n        // get the actual target even in the Shadow DOM\n        const eventTarget = (e.composed ? e.composedPath()[0] : e.target) as HTMLElement;\n\n        const stackIndex = Overlay.openStack.indexOf(this);\n        const isClickInThisOverlayOrDescendant = Overlay.openStack\n            .slice(stackIndex)\n            .some(({ containerElement: elem }) => {\n                // `elem` is the container of backdrop & content, so clicking on that container\n                // should not count as being \"inside\" the overlay.\n                return elem && elem.contains(eventTarget) && !elem.isSameNode(eventTarget);\n            });\n\n        if (isOpen && !isClickInThisOverlayOrDescendant && canOutsideClickClose) {\n            // casting to any because this is a native event\n            onClose?.(e as any);\n        }\n    };\n\n    /**\n     * When multiple Overlays are open, this event handler is only active for the most recently\n     * opened one to avoid Overlays competing with each other for focus.\n     */\n    private handleDocumentFocus = (e: FocusEvent) => {\n        // get the actual target even in the Shadow DOM\n        const eventTarget = e.composed ? e.composedPath()[0] : e.target;\n        if (\n            this.props.enforceFocus &&\n            this.containerElement != null &&\n            eventTarget instanceof Node &&\n            !this.containerElement.contains(eventTarget as HTMLElement)\n        ) {\n            // prevent default focus behavior (sometimes auto-scrolls the page)\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            this.bringFocusInsideOverlay();\n        }\n    };\n\n    private handleKeyDown = (e: React.KeyboardEvent<HTMLElement>) => {\n        const { canEscapeKeyClose, onClose } = this.props;\n        if (e.key === \"Escape\" && canEscapeKeyClose) {\n            onClose?.(e);\n            // prevent other overlays from closing\n            e.stopPropagation();\n            // prevent browser-specific escape key behavior (Safari exits fullscreen)\n            e.preventDefault();\n        }\n    };\n\n    private handleTransitionAddEnd = () => {\n        // no-op\n    };\n}\n"]}