{"version":3,"file":"tree.js","sourceRoot":"","sources":["../../../../src/components/tree/tree.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX, Props } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { TreeNode, TreeNodeInfo } from \"./treeNode\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type TreeEventHandler<T = {}> = (\n    node: TreeNodeInfo<T>,\n    nodePath: number[],\n    e: React.MouseEvent<HTMLElement>,\n) => void;\n\n// eslint-disable-next-line @typescript-eslint/ban-types, deprecation/deprecation\nexport type TreeProps<T = {}> = ITreeProps<T>;\n/** @deprecated use TreeProps */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface ITreeProps<T = {}> extends Props {\n    /**\n     * The data specifying the contents and appearance of the tree.\n     */\n    contents: ReadonlyArray<TreeNodeInfo<T>>;\n\n    /**\n     * Invoked when a node is clicked anywhere other than the caret for expanding/collapsing the node.\n     */\n    onNodeClick?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when caret of an expanded node is clicked.\n     */\n    onNodeCollapse?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when a node is right-clicked or the context menu button is pressed on a focused node.\n     */\n    onNodeContextMenu?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when a node is double-clicked. Be careful when using this in combination with\n     * an `onNodeClick` (single-click) handler, as the way this behaves can vary between browsers.\n     * See http://stackoverflow.com/q/5497073/3124288\n     */\n    onNodeDoubleClick?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the caret of a collapsed node is clicked.\n     */\n    onNodeExpand?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the mouse is moved over a node.\n     */\n    onNodeMouseEnter?: TreeEventHandler<T>;\n\n    /**\n     * Invoked when the mouse is moved out of a node.\n     */\n    onNodeMouseLeave?: TreeEventHandler<T>;\n}\n\n/**\n * Tree component.\n *\n * @see https://blueprintjs.com/docs/#core/components/tree\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class Tree<T = {}> extends React.Component<TreeProps<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Tree`;\n\n    public static ofType<U>() {\n        return Tree as new (props: TreeProps<U>) => Tree<U>;\n    }\n\n    public static nodeFromPath<U>(\n        path: readonly number[],\n        treeNodes?: ReadonlyArray<TreeNodeInfo<U>>,\n    ): TreeNodeInfo<U> {\n        if (path.length === 1) {\n            return treeNodes![path[0]];\n        } else {\n            return Tree.nodeFromPath(path.slice(1), treeNodes![path[0]].childNodes);\n        }\n    }\n\n    private nodeRefs: { [nodeId: string]: HTMLElement } = {};\n\n    public render() {\n        return (\n            <div className={classNames(Classes.TREE, this.props.className)}>\n                {this.renderNodes(this.props.contents, [], Classes.TREE_ROOT)}\n            </div>\n        );\n    }\n\n    /**\n     * Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.\n     * This element does not contain the children of the node, only its label and controls.\n     * If the node is not currently mounted, `undefined` is returned.\n     */\n    public getNodeContentElement(nodeId: string | number): HTMLElement | undefined {\n        return this.nodeRefs[nodeId];\n    }\n\n    private renderNodes(\n        treeNodes: ReadonlyArray<TreeNodeInfo<T>> | undefined,\n        currentPath?: number[],\n        className?: string,\n    ) {\n        if (treeNodes == null) {\n            return null;\n        }\n\n        const nodeItems = treeNodes.map((node, i) => {\n            const elementPath = currentPath!.concat(i);\n            return (\n                <TreeNode<T>\n                    {...node}\n                    key={node.id}\n                    contentRef={this.handleContentRef}\n                    depth={elementPath.length - 1}\n                    onClick={this.handleNodeClick}\n                    onContextMenu={this.handleNodeContextMenu}\n                    onCollapse={this.handleNodeCollapse}\n                    onDoubleClick={this.handleNodeDoubleClick}\n                    onExpand={this.handleNodeExpand}\n                    onMouseEnter={this.handleNodeMouseEnter}\n                    onMouseLeave={this.handleNodeMouseLeave}\n                    path={elementPath}\n                >\n                    {this.renderNodes(node.childNodes, elementPath)}\n                </TreeNode>\n            );\n        });\n\n        return <ul className={classNames(Classes.TREE_NODE_LIST, className)}>{nodeItems}</ul>;\n    }\n\n    private handleNodeCollapse = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeCollapse, node, e);\n    };\n\n    private handleNodeClick = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeClick, node, e);\n    };\n\n    private handleContentRef = (node: TreeNode<T>, element: HTMLElement | null) => {\n        if (element != null) {\n            this.nodeRefs[node.props.id] = element;\n        } else {\n            // don't want our object to get bloated with old keys\n            delete this.nodeRefs[node.props.id];\n        }\n    };\n\n    private handleNodeContextMenu = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeContextMenu, node, e);\n    };\n\n    private handleNodeDoubleClick = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeDoubleClick, node, e);\n    };\n\n    private handleNodeExpand = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeExpand, node, e);\n    };\n\n    private handleNodeMouseEnter = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeMouseEnter, node, e);\n    };\n\n    private handleNodeMouseLeave = (node: TreeNode<T>, e: React.MouseEvent<HTMLElement>) => {\n        this.handlerHelper(this.props.onNodeMouseLeave, node, e);\n    };\n\n    private handlerHelper(\n        handlerFromProps: TreeEventHandler<T> | undefined,\n        node: TreeNode<T>,\n        e: React.MouseEvent<HTMLElement>,\n    ) {\n        if (isFunction(handlerFromProps)) {\n            const nodeData = Tree.nodeFromPath(node.props.path, this.props.contents);\n            handlerFromProps(nodeData, node.props.path, e);\n        }\n    }\n}\n"]}